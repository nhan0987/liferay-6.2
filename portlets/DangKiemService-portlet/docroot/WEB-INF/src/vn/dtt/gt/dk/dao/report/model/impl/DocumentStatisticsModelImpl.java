/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.report.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.report.model.DocumentStatistics;
import vn.dtt.gt.dk.dao.report.model.DocumentStatisticsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DocumentStatistics service. Represents a row in the &quot;rp_documentstatistics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.report.model.DocumentStatisticsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentStatisticsImpl}.
 * </p>
 *
 * @author win_64
 * @see DocumentStatisticsImpl
 * @see vn.dtt.gt.dk.dao.report.model.DocumentStatistics
 * @see vn.dtt.gt.dk.dao.report.model.DocumentStatisticsModel
 * @generated
 */
public class DocumentStatisticsModelImpl extends BaseModelImpl<DocumentStatistics>
	implements DocumentStatisticsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a document statistics model instance should use the {@link vn.dtt.gt.dk.dao.report.model.DocumentStatistics} interface instead.
	 */
	public static final String TABLE_NAME = "rp_documentstatistics";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "documentTypeCode", Types.VARCHAR },
			{ "remainingNumber", Types.BIGINT },
			{ "receivedNumber", Types.BIGINT },
			{ "ontimeNumber", Types.BIGINT },
			{ "overtimeNumber", Types.BIGINT },
			{ "processingNumber", Types.BIGINT },
			{ "delayingNumber", Types.BIGINT },
			{ "month", Types.INTEGER },
			{ "year", Types.INTEGER },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table rp_documentstatistics (id LONG not null primary key,createDate DATE null,modifiedDate DATE null,documentTypeCode VARCHAR(75) null,remainingNumber LONG,receivedNumber LONG,ontimeNumber LONG,overtimeNumber LONG,processingNumber LONG,delayingNumber LONG,month INTEGER,year INTEGER,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table rp_documentstatistics";
	public static final String ORDER_BY_JPQL = " ORDER BY documentStatistics.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY rp_documentstatistics.id DESC";
	public static final String DATA_SOURCE = "tthcDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.report.model.DocumentStatistics"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.report.model.DocumentStatistics"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.report.model.DocumentStatistics"),
			true);
	public static long DOCUMENTTYPECODE_COLUMN_BITMASK = 1L;
	public static long MONTH_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long YEAR_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.report.model.DocumentStatistics"));

	public DocumentStatisticsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocumentStatistics.class;
	}

	@Override
	public String getModelClassName() {
		return DocumentStatistics.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("documentTypeCode", getDocumentTypeCode());
		attributes.put("remainingNumber", getRemainingNumber());
		attributes.put("receivedNumber", getReceivedNumber());
		attributes.put("ontimeNumber", getOntimeNumber());
		attributes.put("overtimeNumber", getOvertimeNumber());
		attributes.put("processingNumber", getProcessingNumber());
		attributes.put("delayingNumber", getDelayingNumber());
		attributes.put("month", getMonth());
		attributes.put("year", getYear());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String documentTypeCode = (String)attributes.get("documentTypeCode");

		if (documentTypeCode != null) {
			setDocumentTypeCode(documentTypeCode);
		}

		Long remainingNumber = (Long)attributes.get("remainingNumber");

		if (remainingNumber != null) {
			setRemainingNumber(remainingNumber);
		}

		Long receivedNumber = (Long)attributes.get("receivedNumber");

		if (receivedNumber != null) {
			setReceivedNumber(receivedNumber);
		}

		Long ontimeNumber = (Long)attributes.get("ontimeNumber");

		if (ontimeNumber != null) {
			setOntimeNumber(ontimeNumber);
		}

		Long overtimeNumber = (Long)attributes.get("overtimeNumber");

		if (overtimeNumber != null) {
			setOvertimeNumber(overtimeNumber);
		}

		Long processingNumber = (Long)attributes.get("processingNumber");

		if (processingNumber != null) {
			setProcessingNumber(processingNumber);
		}

		Long delayingNumber = (Long)attributes.get("delayingNumber");

		if (delayingNumber != null) {
			setDelayingNumber(delayingNumber);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getDocumentTypeCode() {
		if (_documentTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentTypeCode;
		}
	}

	@Override
	public void setDocumentTypeCode(String documentTypeCode) {
		_columnBitmask |= DOCUMENTTYPECODE_COLUMN_BITMASK;

		if (_originalDocumentTypeCode == null) {
			_originalDocumentTypeCode = _documentTypeCode;
		}

		_documentTypeCode = documentTypeCode;
	}

	public String getOriginalDocumentTypeCode() {
		return GetterUtil.getString(_originalDocumentTypeCode);
	}

	@Override
	public long getRemainingNumber() {
		return _remainingNumber;
	}

	@Override
	public void setRemainingNumber(long remainingNumber) {
		_remainingNumber = remainingNumber;
	}

	@Override
	public long getReceivedNumber() {
		return _receivedNumber;
	}

	@Override
	public void setReceivedNumber(long receivedNumber) {
		_receivedNumber = receivedNumber;
	}

	@Override
	public long getOntimeNumber() {
		return _ontimeNumber;
	}

	@Override
	public void setOntimeNumber(long ontimeNumber) {
		_ontimeNumber = ontimeNumber;
	}

	@Override
	public long getOvertimeNumber() {
		return _overtimeNumber;
	}

	@Override
	public void setOvertimeNumber(long overtimeNumber) {
		_overtimeNumber = overtimeNumber;
	}

	@Override
	public long getProcessingNumber() {
		return _processingNumber;
	}

	@Override
	public void setProcessingNumber(long processingNumber) {
		_processingNumber = processingNumber;
	}

	@Override
	public long getDelayingNumber() {
		return _delayingNumber;
	}

	@Override
	public void setDelayingNumber(long delayingNumber) {
		_delayingNumber = delayingNumber;
	}

	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_columnBitmask |= MONTH_COLUMN_BITMASK;

		if (!_setOriginalMonth) {
			_setOriginalMonth = true;

			_originalMonth = _month;
		}

		_month = month;
	}

	public int getOriginalMonth() {
		return _originalMonth;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_columnBitmask |= YEAR_COLUMN_BITMASK;

		if (!_setOriginalYear) {
			_setOriginalYear = true;

			_originalYear = _year;
		}

		_year = year;
	}

	public int getOriginalYear() {
		return _originalYear;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DocumentStatistics.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DocumentStatistics toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DocumentStatistics)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocumentStatisticsImpl documentStatisticsImpl = new DocumentStatisticsImpl();

		documentStatisticsImpl.setId(getId());
		documentStatisticsImpl.setCreateDate(getCreateDate());
		documentStatisticsImpl.setModifiedDate(getModifiedDate());
		documentStatisticsImpl.setDocumentTypeCode(getDocumentTypeCode());
		documentStatisticsImpl.setRemainingNumber(getRemainingNumber());
		documentStatisticsImpl.setReceivedNumber(getReceivedNumber());
		documentStatisticsImpl.setOntimeNumber(getOntimeNumber());
		documentStatisticsImpl.setOvertimeNumber(getOvertimeNumber());
		documentStatisticsImpl.setProcessingNumber(getProcessingNumber());
		documentStatisticsImpl.setDelayingNumber(getDelayingNumber());
		documentStatisticsImpl.setMonth(getMonth());
		documentStatisticsImpl.setYear(getYear());
		documentStatisticsImpl.setStatus(getStatus());

		documentStatisticsImpl.resetOriginalValues();

		return documentStatisticsImpl;
	}

	@Override
	public int compareTo(DocumentStatistics documentStatistics) {
		int value = 0;

		if (getId() < documentStatistics.getId()) {
			value = -1;
		}
		else if (getId() > documentStatistics.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DocumentStatistics)) {
			return false;
		}

		DocumentStatistics documentStatistics = (DocumentStatistics)obj;

		long primaryKey = documentStatistics.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DocumentStatisticsModelImpl documentStatisticsModelImpl = this;

		documentStatisticsModelImpl._originalDocumentTypeCode = documentStatisticsModelImpl._documentTypeCode;

		documentStatisticsModelImpl._originalMonth = documentStatisticsModelImpl._month;

		documentStatisticsModelImpl._setOriginalMonth = false;

		documentStatisticsModelImpl._originalYear = documentStatisticsModelImpl._year;

		documentStatisticsModelImpl._setOriginalYear = false;

		documentStatisticsModelImpl._originalStatus = documentStatisticsModelImpl._status;

		documentStatisticsModelImpl._setOriginalStatus = false;

		documentStatisticsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DocumentStatistics> toCacheModel() {
		DocumentStatisticsCacheModel documentStatisticsCacheModel = new DocumentStatisticsCacheModel();

		documentStatisticsCacheModel.id = getId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			documentStatisticsCacheModel.createDate = createDate.getTime();
		}
		else {
			documentStatisticsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			documentStatisticsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			documentStatisticsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		documentStatisticsCacheModel.documentTypeCode = getDocumentTypeCode();

		String documentTypeCode = documentStatisticsCacheModel.documentTypeCode;

		if ((documentTypeCode != null) && (documentTypeCode.length() == 0)) {
			documentStatisticsCacheModel.documentTypeCode = null;
		}

		documentStatisticsCacheModel.remainingNumber = getRemainingNumber();

		documentStatisticsCacheModel.receivedNumber = getReceivedNumber();

		documentStatisticsCacheModel.ontimeNumber = getOntimeNumber();

		documentStatisticsCacheModel.overtimeNumber = getOvertimeNumber();

		documentStatisticsCacheModel.processingNumber = getProcessingNumber();

		documentStatisticsCacheModel.delayingNumber = getDelayingNumber();

		documentStatisticsCacheModel.month = getMonth();

		documentStatisticsCacheModel.year = getYear();

		documentStatisticsCacheModel.status = getStatus();

		return documentStatisticsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", documentTypeCode=");
		sb.append(getDocumentTypeCode());
		sb.append(", remainingNumber=");
		sb.append(getRemainingNumber());
		sb.append(", receivedNumber=");
		sb.append(getReceivedNumber());
		sb.append(", ontimeNumber=");
		sb.append(getOntimeNumber());
		sb.append(", overtimeNumber=");
		sb.append(getOvertimeNumber());
		sb.append(", processingNumber=");
		sb.append(getProcessingNumber());
		sb.append(", delayingNumber=");
		sb.append(getDelayingNumber());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.report.model.DocumentStatistics");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentTypeCode</column-name><column-value><![CDATA[");
		sb.append(getDocumentTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remainingNumber</column-name><column-value><![CDATA[");
		sb.append(getRemainingNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receivedNumber</column-name><column-value><![CDATA[");
		sb.append(getReceivedNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ontimeNumber</column-name><column-value><![CDATA[");
		sb.append(getOntimeNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overtimeNumber</column-name><column-value><![CDATA[");
		sb.append(getOvertimeNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processingNumber</column-name><column-value><![CDATA[");
		sb.append(getProcessingNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>delayingNumber</column-name><column-value><![CDATA[");
		sb.append(getDelayingNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DocumentStatistics.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DocumentStatistics.class
		};
	private long _id;
	private Date _createDate;
	private Date _modifiedDate;
	private String _documentTypeCode;
	private String _originalDocumentTypeCode;
	private long _remainingNumber;
	private long _receivedNumber;
	private long _ontimeNumber;
	private long _overtimeNumber;
	private long _processingNumber;
	private long _delayingNumber;
	private int _month;
	private int _originalMonth;
	private boolean _setOriginalMonth;
	private int _year;
	private int _originalYear;
	private boolean _setOriginalYear;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private DocumentStatistics _escapedModel;
}