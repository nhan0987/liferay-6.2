/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRate;
import vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRateModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NewExchangeRate service. Represents a row in the &quot;vr_new_exchangerate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewExchangeRateImpl}.
 * </p>
 *
 * @author huymq
 * @see NewExchangeRateImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRate
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRateModel
 * @generated
 */
@JSON(strict = true)
public class NewExchangeRateModelImpl extends BaseModelImpl<NewExchangeRate>
	implements NewExchangeRateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a new exchange rate model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRate} interface instead.
	 */
	public static final String TABLE_NAME = "vr_new_exchangerate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "originalcurrency", Types.VARCHAR },
			{ "basiccurrency", Types.VARCHAR },
			{ "exchangerate", Types.DOUBLE },
			{ "publishdate", Types.TIMESTAMP },
			{ "validfrom", Types.TIMESTAMP },
			{ "validuntil", Types.TIMESTAMP },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_new_exchangerate (id LONG not null primary key,originalcurrency VARCHAR(75) null,basiccurrency VARCHAR(75) null,exchangerate DOUBLE,publishdate DATE null,validfrom DATE null,validuntil DATE null,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_new_exchangerate";
	public static final String ORDER_BY_JPQL = " ORDER BY newExchangeRate.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_new_exchangerate.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRate"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRate"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRate"),
			true);
	public static long BASICCURRENCY_COLUMN_BITMASK = 1L;
	public static long ORIGINALCURRENCY_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NewExchangeRate toModel(NewExchangeRateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NewExchangeRate model = new NewExchangeRateImpl();

		model.setId(soapModel.getId());
		model.setOriginalCurrency(soapModel.getOriginalCurrency());
		model.setBasicCurrency(soapModel.getBasicCurrency());
		model.setExchangeRate(soapModel.getExchangeRate());
		model.setPublishDate(soapModel.getPublishDate());
		model.setValidFrom(soapModel.getValidFrom());
		model.setValidUntil(soapModel.getValidUntil());
		model.setSynchdate(soapModel.getSynchdate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NewExchangeRate> toModels(
		NewExchangeRateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NewExchangeRate> models = new ArrayList<NewExchangeRate>(soapModels.length);

		for (NewExchangeRateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRate"));

	public NewExchangeRateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NewExchangeRate.class;
	}

	@Override
	public String getModelClassName() {
		return NewExchangeRate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("originalCurrency", getOriginalCurrency());
		attributes.put("basicCurrency", getBasicCurrency());
		attributes.put("exchangeRate", getExchangeRate());
		attributes.put("publishDate", getPublishDate());
		attributes.put("validFrom", getValidFrom());
		attributes.put("validUntil", getValidUntil());
		attributes.put("synchdate", getSynchdate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String originalCurrency = (String)attributes.get("originalCurrency");

		if (originalCurrency != null) {
			setOriginalCurrency(originalCurrency);
		}

		String basicCurrency = (String)attributes.get("basicCurrency");

		if (basicCurrency != null) {
			setBasicCurrency(basicCurrency);
		}

		Double exchangeRate = (Double)attributes.get("exchangeRate");

		if (exchangeRate != null) {
			setExchangeRate(exchangeRate);
		}

		Date publishDate = (Date)attributes.get("publishDate");

		if (publishDate != null) {
			setPublishDate(publishDate);
		}

		Date validFrom = (Date)attributes.get("validFrom");

		if (validFrom != null) {
			setValidFrom(validFrom);
		}

		Date validUntil = (Date)attributes.get("validUntil");

		if (validUntil != null) {
			setValidUntil(validUntil);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getOriginalCurrency() {
		if (_originalCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _originalCurrency;
		}
	}

	@Override
	public void setOriginalCurrency(String originalCurrency) {
		_columnBitmask |= ORIGINALCURRENCY_COLUMN_BITMASK;

		if (_originalOriginalCurrency == null) {
			_originalOriginalCurrency = _originalCurrency;
		}

		_originalCurrency = originalCurrency;
	}

	public String getOriginalOriginalCurrency() {
		return GetterUtil.getString(_originalOriginalCurrency);
	}

	@JSON
	@Override
	public String getBasicCurrency() {
		if (_basicCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _basicCurrency;
		}
	}

	@Override
	public void setBasicCurrency(String basicCurrency) {
		_columnBitmask |= BASICCURRENCY_COLUMN_BITMASK;

		if (_originalBasicCurrency == null) {
			_originalBasicCurrency = _basicCurrency;
		}

		_basicCurrency = basicCurrency;
	}

	public String getOriginalBasicCurrency() {
		return GetterUtil.getString(_originalBasicCurrency);
	}

	@JSON
	@Override
	public double getExchangeRate() {
		return _exchangeRate;
	}

	@Override
	public void setExchangeRate(double exchangeRate) {
		_exchangeRate = exchangeRate;
	}

	@JSON
	@Override
	public Date getPublishDate() {
		return _publishDate;
	}

	@Override
	public void setPublishDate(Date publishDate) {
		_publishDate = publishDate;
	}

	@JSON
	@Override
	public Date getValidFrom() {
		return _validFrom;
	}

	@Override
	public void setValidFrom(Date validFrom) {
		_validFrom = validFrom;
	}

	@JSON
	@Override
	public Date getValidUntil() {
		return _validUntil;
	}

	@Override
	public void setValidUntil(Date validUntil) {
		_validUntil = validUntil;
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			NewExchangeRate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NewExchangeRate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NewExchangeRate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NewExchangeRateImpl newExchangeRateImpl = new NewExchangeRateImpl();

		newExchangeRateImpl.setId(getId());
		newExchangeRateImpl.setOriginalCurrency(getOriginalCurrency());
		newExchangeRateImpl.setBasicCurrency(getBasicCurrency());
		newExchangeRateImpl.setExchangeRate(getExchangeRate());
		newExchangeRateImpl.setPublishDate(getPublishDate());
		newExchangeRateImpl.setValidFrom(getValidFrom());
		newExchangeRateImpl.setValidUntil(getValidUntil());
		newExchangeRateImpl.setSynchdate(getSynchdate());

		newExchangeRateImpl.resetOriginalValues();

		return newExchangeRateImpl;
	}

	@Override
	public int compareTo(NewExchangeRate newExchangeRate) {
		int value = 0;

		if (getId() < newExchangeRate.getId()) {
			value = -1;
		}
		else if (getId() > newExchangeRate.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NewExchangeRate)) {
			return false;
		}

		NewExchangeRate newExchangeRate = (NewExchangeRate)obj;

		long primaryKey = newExchangeRate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NewExchangeRateModelImpl newExchangeRateModelImpl = this;

		newExchangeRateModelImpl._originalOriginalCurrency = newExchangeRateModelImpl._originalCurrency;

		newExchangeRateModelImpl._originalBasicCurrency = newExchangeRateModelImpl._basicCurrency;

		newExchangeRateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<NewExchangeRate> toCacheModel() {
		NewExchangeRateCacheModel newExchangeRateCacheModel = new NewExchangeRateCacheModel();

		newExchangeRateCacheModel.id = getId();

		newExchangeRateCacheModel.originalCurrency = getOriginalCurrency();

		String originalCurrency = newExchangeRateCacheModel.originalCurrency;

		if ((originalCurrency != null) && (originalCurrency.length() == 0)) {
			newExchangeRateCacheModel.originalCurrency = null;
		}

		newExchangeRateCacheModel.basicCurrency = getBasicCurrency();

		String basicCurrency = newExchangeRateCacheModel.basicCurrency;

		if ((basicCurrency != null) && (basicCurrency.length() == 0)) {
			newExchangeRateCacheModel.basicCurrency = null;
		}

		newExchangeRateCacheModel.exchangeRate = getExchangeRate();

		Date publishDate = getPublishDate();

		if (publishDate != null) {
			newExchangeRateCacheModel.publishDate = publishDate.getTime();
		}
		else {
			newExchangeRateCacheModel.publishDate = Long.MIN_VALUE;
		}

		Date validFrom = getValidFrom();

		if (validFrom != null) {
			newExchangeRateCacheModel.validFrom = validFrom.getTime();
		}
		else {
			newExchangeRateCacheModel.validFrom = Long.MIN_VALUE;
		}

		Date validUntil = getValidUntil();

		if (validUntil != null) {
			newExchangeRateCacheModel.validUntil = validUntil.getTime();
		}
		else {
			newExchangeRateCacheModel.validUntil = Long.MIN_VALUE;
		}

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			newExchangeRateCacheModel.synchdate = synchdate.getTime();
		}
		else {
			newExchangeRateCacheModel.synchdate = Long.MIN_VALUE;
		}

		return newExchangeRateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", originalCurrency=");
		sb.append(getOriginalCurrency());
		sb.append(", basicCurrency=");
		sb.append(getBasicCurrency());
		sb.append(", exchangeRate=");
		sb.append(getExchangeRate());
		sb.append(", publishDate=");
		sb.append(getPublishDate());
		sb.append(", validFrom=");
		sb.append(getValidFrom());
		sb.append(", validUntil=");
		sb.append(getValidUntil());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.NewExchangeRate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalCurrency</column-name><column-value><![CDATA[");
		sb.append(getOriginalCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basicCurrency</column-name><column-value><![CDATA[");
		sb.append(getBasicCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exchangeRate</column-name><column-value><![CDATA[");
		sb.append(getExchangeRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishDate</column-name><column-value><![CDATA[");
		sb.append(getPublishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validFrom</column-name><column-value><![CDATA[");
		sb.append(getValidFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validUntil</column-name><column-value><![CDATA[");
		sb.append(getValidUntil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NewExchangeRate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			NewExchangeRate.class
		};
	private long _id;
	private String _originalCurrency;
	private String _originalOriginalCurrency;
	private String _basicCurrency;
	private String _originalBasicCurrency;
	private double _exchangeRate;
	private Date _publishDate;
	private Date _validFrom;
	private Date _validUntil;
	private Date _synchdate;
	private long _columnBitmask;
	private NewExchangeRate _escapedModel;
}