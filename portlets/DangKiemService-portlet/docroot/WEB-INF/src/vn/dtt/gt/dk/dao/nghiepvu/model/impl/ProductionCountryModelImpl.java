/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountry;
import vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountryModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProductionCountry service. Represents a row in the &quot;vr_productioncountry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProductionCountryImpl}.
 * </p>
 *
 * @author huymq
 * @see ProductionCountryImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountry
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountryModel
 * @generated
 */
@JSON(strict = true)
public class ProductionCountryModelImpl extends BaseModelImpl<ProductionCountry>
	implements ProductionCountryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a production country model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountry} interface instead.
	 */
	public static final String TABLE_NAME = "vr_productioncountry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "vehiclegroupid", Types.BIGINT },
			{ "countrycode", Types.VARCHAR },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_productioncountry (id LONG not null primary key,vehiclegroupid LONG,countrycode VARCHAR(75) null,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_productioncountry";
	public static final String ORDER_BY_JPQL = " ORDER BY productionCountry.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_productioncountry.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountry"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountry"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountry"),
			true);
	public static long COUNTRYCODE_COLUMN_BITMASK = 1L;
	public static long VEHICLEGROUPID_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProductionCountry toModel(ProductionCountrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProductionCountry model = new ProductionCountryImpl();

		model.setId(soapModel.getId());
		model.setVehicleGroupId(soapModel.getVehicleGroupId());
		model.setCountryCode(soapModel.getCountryCode());
		model.setSynchdate(soapModel.getSynchdate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProductionCountry> toModels(
		ProductionCountrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProductionCountry> models = new ArrayList<ProductionCountry>(soapModels.length);

		for (ProductionCountrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountry"));

	public ProductionCountryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProductionCountry.class;
	}

	@Override
	public String getModelClassName() {
		return ProductionCountry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vehicleGroupId", getVehicleGroupId());
		attributes.put("countryCode", getCountryCode());
		attributes.put("synchdate", getSynchdate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long vehicleGroupId = (Long)attributes.get("vehicleGroupId");

		if (vehicleGroupId != null) {
			setVehicleGroupId(vehicleGroupId);
		}

		String countryCode = (String)attributes.get("countryCode");

		if (countryCode != null) {
			setCountryCode(countryCode);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getVehicleGroupId() {
		return _vehicleGroupId;
	}

	@Override
	public void setVehicleGroupId(long vehicleGroupId) {
		_columnBitmask |= VEHICLEGROUPID_COLUMN_BITMASK;

		if (!_setOriginalVehicleGroupId) {
			_setOriginalVehicleGroupId = true;

			_originalVehicleGroupId = _vehicleGroupId;
		}

		_vehicleGroupId = vehicleGroupId;
	}

	public long getOriginalVehicleGroupId() {
		return _originalVehicleGroupId;
	}

	@JSON
	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		_columnBitmask |= COUNTRYCODE_COLUMN_BITMASK;

		if (_originalCountryCode == null) {
			_originalCountryCode = _countryCode;
		}

		_countryCode = countryCode;
	}

	public String getOriginalCountryCode() {
		return GetterUtil.getString(_originalCountryCode);
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProductionCountry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProductionCountry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProductionCountry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProductionCountryImpl productionCountryImpl = new ProductionCountryImpl();

		productionCountryImpl.setId(getId());
		productionCountryImpl.setVehicleGroupId(getVehicleGroupId());
		productionCountryImpl.setCountryCode(getCountryCode());
		productionCountryImpl.setSynchdate(getSynchdate());

		productionCountryImpl.resetOriginalValues();

		return productionCountryImpl;
	}

	@Override
	public int compareTo(ProductionCountry productionCountry) {
		int value = 0;

		if (getId() < productionCountry.getId()) {
			value = -1;
		}
		else if (getId() > productionCountry.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProductionCountry)) {
			return false;
		}

		ProductionCountry productionCountry = (ProductionCountry)obj;

		long primaryKey = productionCountry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProductionCountryModelImpl productionCountryModelImpl = this;

		productionCountryModelImpl._originalVehicleGroupId = productionCountryModelImpl._vehicleGroupId;

		productionCountryModelImpl._setOriginalVehicleGroupId = false;

		productionCountryModelImpl._originalCountryCode = productionCountryModelImpl._countryCode;

		productionCountryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProductionCountry> toCacheModel() {
		ProductionCountryCacheModel productionCountryCacheModel = new ProductionCountryCacheModel();

		productionCountryCacheModel.id = getId();

		productionCountryCacheModel.vehicleGroupId = getVehicleGroupId();

		productionCountryCacheModel.countryCode = getCountryCode();

		String countryCode = productionCountryCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			productionCountryCacheModel.countryCode = null;
		}

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			productionCountryCacheModel.synchdate = synchdate.getTime();
		}
		else {
			productionCountryCacheModel.synchdate = Long.MIN_VALUE;
		}

		return productionCountryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vehicleGroupId=");
		sb.append(getVehicleGroupId());
		sb.append(", countryCode=");
		sb.append(getCountryCode());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.ProductionCountry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleGroupId</column-name><column-value><![CDATA[");
		sb.append(getVehicleGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ProductionCountry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ProductionCountry.class
		};
	private long _id;
	private long _vehicleGroupId;
	private long _originalVehicleGroupId;
	private boolean _setOriginalVehicleGroupId;
	private String _countryCode;
	private String _originalCountryCode;
	private Date _synchdate;
	private long _columnBitmask;
	private ProductionCountry _escapedModel;
}