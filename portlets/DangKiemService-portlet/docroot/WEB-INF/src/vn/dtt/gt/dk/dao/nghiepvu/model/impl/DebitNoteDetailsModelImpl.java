/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetails;
import vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DebitNoteDetails service. Represents a row in the &quot;vr_debitnotedetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DebitNoteDetailsImpl}.
 * </p>
 *
 * @author huymq
 * @see DebitNoteDetailsImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetails
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetailsModel
 * @generated
 */
public class DebitNoteDetailsModelImpl extends BaseModelImpl<DebitNoteDetails>
	implements DebitNoteDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a debit note details model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetails} interface instead.
	 */
	public static final String TABLE_NAME = "vr_debitnotedetails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "vehiclerecordid", Types.BIGINT },
			{ "debitnoteid", Types.BIGINT },
			{ "inspectionrecordid", Types.BIGINT },
			{ "unitprice", Types.DOUBLE },
			{ "currency", Types.VARCHAR },
			{ "basiccurrency", Types.VARCHAR },
			{ "exchangerate", Types.DOUBLE },
			{ "inspectionfee", Types.DOUBLE },
			{ "othercosts", Types.DOUBLE },
			{ "totalcostsandfee", Types.DOUBLE },
			{ "tax", Types.DOUBLE },
			{ "charges", Types.DOUBLE },
			{ "totalrealdebit", Types.DOUBLE },
			{ "totaldebit", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_debitnotedetails (id LONG not null primary key,vehiclerecordid LONG,debitnoteid LONG,inspectionrecordid LONG,unitprice DOUBLE,currency VARCHAR(75) null,basiccurrency VARCHAR(75) null,exchangerate DOUBLE,inspectionfee DOUBLE,othercosts DOUBLE,totalcostsandfee DOUBLE,tax DOUBLE,charges DOUBLE,totalrealdebit DOUBLE,totaldebit DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table vr_debitnotedetails";
	public static final String ORDER_BY_JPQL = " ORDER BY debitNoteDetails.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_debitnotedetails.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetails"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetails"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetails"),
			true);
	public static long DEBITNOTEID_COLUMN_BITMASK = 1L;
	public static long VEHICLERECORDID_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetails"));

	public DebitNoteDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DebitNoteDetails.class;
	}

	@Override
	public String getModelClassName() {
		return DebitNoteDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vehicleRecordId", getVehicleRecordId());
		attributes.put("debitNoteId", getDebitNoteId());
		attributes.put("inspectionRecordId", getInspectionRecordId());
		attributes.put("unitPrice", getUnitPrice());
		attributes.put("currency", getCurrency());
		attributes.put("basicCurrency", getBasicCurrency());
		attributes.put("exchangeRate", getExchangeRate());
		attributes.put("inspectionFee", getInspectionFee());
		attributes.put("otherCosts", getOtherCosts());
		attributes.put("totalCostsAndFee", getTotalCostsAndFee());
		attributes.put("tax", getTax());
		attributes.put("charges", getCharges());
		attributes.put("totalRealDebit", getTotalRealDebit());
		attributes.put("totalDebit", getTotalDebit());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long vehicleRecordId = (Long)attributes.get("vehicleRecordId");

		if (vehicleRecordId != null) {
			setVehicleRecordId(vehicleRecordId);
		}

		Long debitNoteId = (Long)attributes.get("debitNoteId");

		if (debitNoteId != null) {
			setDebitNoteId(debitNoteId);
		}

		Long inspectionRecordId = (Long)attributes.get("inspectionRecordId");

		if (inspectionRecordId != null) {
			setInspectionRecordId(inspectionRecordId);
		}

		Double unitPrice = (Double)attributes.get("unitPrice");

		if (unitPrice != null) {
			setUnitPrice(unitPrice);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String basicCurrency = (String)attributes.get("basicCurrency");

		if (basicCurrency != null) {
			setBasicCurrency(basicCurrency);
		}

		Double exchangeRate = (Double)attributes.get("exchangeRate");

		if (exchangeRate != null) {
			setExchangeRate(exchangeRate);
		}

		Double inspectionFee = (Double)attributes.get("inspectionFee");

		if (inspectionFee != null) {
			setInspectionFee(inspectionFee);
		}

		Double otherCosts = (Double)attributes.get("otherCosts");

		if (otherCosts != null) {
			setOtherCosts(otherCosts);
		}

		Double totalCostsAndFee = (Double)attributes.get("totalCostsAndFee");

		if (totalCostsAndFee != null) {
			setTotalCostsAndFee(totalCostsAndFee);
		}

		Double tax = (Double)attributes.get("tax");

		if (tax != null) {
			setTax(tax);
		}

		Double charges = (Double)attributes.get("charges");

		if (charges != null) {
			setCharges(charges);
		}

		Double totalRealDebit = (Double)attributes.get("totalRealDebit");

		if (totalRealDebit != null) {
			setTotalRealDebit(totalRealDebit);
		}

		Double totalDebit = (Double)attributes.get("totalDebit");

		if (totalDebit != null) {
			setTotalDebit(totalDebit);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public long getVehicleRecordId() {
		return _vehicleRecordId;
	}

	@Override
	public void setVehicleRecordId(long vehicleRecordId) {
		_columnBitmask |= VEHICLERECORDID_COLUMN_BITMASK;

		if (!_setOriginalVehicleRecordId) {
			_setOriginalVehicleRecordId = true;

			_originalVehicleRecordId = _vehicleRecordId;
		}

		_vehicleRecordId = vehicleRecordId;
	}

	public long getOriginalVehicleRecordId() {
		return _originalVehicleRecordId;
	}

	@Override
	public long getDebitNoteId() {
		return _debitNoteId;
	}

	@Override
	public void setDebitNoteId(long debitNoteId) {
		_columnBitmask |= DEBITNOTEID_COLUMN_BITMASK;

		if (!_setOriginalDebitNoteId) {
			_setOriginalDebitNoteId = true;

			_originalDebitNoteId = _debitNoteId;
		}

		_debitNoteId = debitNoteId;
	}

	public long getOriginalDebitNoteId() {
		return _originalDebitNoteId;
	}

	@Override
	public long getInspectionRecordId() {
		return _inspectionRecordId;
	}

	@Override
	public void setInspectionRecordId(long inspectionRecordId) {
		_inspectionRecordId = inspectionRecordId;
	}

	@Override
	public double getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(double unitPrice) {
		_unitPrice = unitPrice;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@Override
	public String getBasicCurrency() {
		if (_basicCurrency == null) {
			return StringPool.BLANK;
		}
		else {
			return _basicCurrency;
		}
	}

	@Override
	public void setBasicCurrency(String basicCurrency) {
		_basicCurrency = basicCurrency;
	}

	@Override
	public double getExchangeRate() {
		return _exchangeRate;
	}

	@Override
	public void setExchangeRate(double exchangeRate) {
		_exchangeRate = exchangeRate;
	}

	@Override
	public double getInspectionFee() {
		return _inspectionFee;
	}

	@Override
	public void setInspectionFee(double inspectionFee) {
		_inspectionFee = inspectionFee;
	}

	@Override
	public double getOtherCosts() {
		return _otherCosts;
	}

	@Override
	public void setOtherCosts(double otherCosts) {
		_otherCosts = otherCosts;
	}

	@Override
	public double getTotalCostsAndFee() {
		return _totalCostsAndFee;
	}

	@Override
	public void setTotalCostsAndFee(double totalCostsAndFee) {
		_totalCostsAndFee = totalCostsAndFee;
	}

	@Override
	public double getTax() {
		return _tax;
	}

	@Override
	public void setTax(double tax) {
		_tax = tax;
	}

	@Override
	public double getCharges() {
		return _charges;
	}

	@Override
	public void setCharges(double charges) {
		_charges = charges;
	}

	@Override
	public double getTotalRealDebit() {
		return _totalRealDebit;
	}

	@Override
	public void setTotalRealDebit(double totalRealDebit) {
		_totalRealDebit = totalRealDebit;
	}

	@Override
	public double getTotalDebit() {
		return _totalDebit;
	}

	@Override
	public void setTotalDebit(double totalDebit) {
		_totalDebit = totalDebit;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DebitNoteDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DebitNoteDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DebitNoteDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DebitNoteDetailsImpl debitNoteDetailsImpl = new DebitNoteDetailsImpl();

		debitNoteDetailsImpl.setId(getId());
		debitNoteDetailsImpl.setVehicleRecordId(getVehicleRecordId());
		debitNoteDetailsImpl.setDebitNoteId(getDebitNoteId());
		debitNoteDetailsImpl.setInspectionRecordId(getInspectionRecordId());
		debitNoteDetailsImpl.setUnitPrice(getUnitPrice());
		debitNoteDetailsImpl.setCurrency(getCurrency());
		debitNoteDetailsImpl.setBasicCurrency(getBasicCurrency());
		debitNoteDetailsImpl.setExchangeRate(getExchangeRate());
		debitNoteDetailsImpl.setInspectionFee(getInspectionFee());
		debitNoteDetailsImpl.setOtherCosts(getOtherCosts());
		debitNoteDetailsImpl.setTotalCostsAndFee(getTotalCostsAndFee());
		debitNoteDetailsImpl.setTax(getTax());
		debitNoteDetailsImpl.setCharges(getCharges());
		debitNoteDetailsImpl.setTotalRealDebit(getTotalRealDebit());
		debitNoteDetailsImpl.setTotalDebit(getTotalDebit());

		debitNoteDetailsImpl.resetOriginalValues();

		return debitNoteDetailsImpl;
	}

	@Override
	public int compareTo(DebitNoteDetails debitNoteDetails) {
		int value = 0;

		if (getId() < debitNoteDetails.getId()) {
			value = -1;
		}
		else if (getId() > debitNoteDetails.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DebitNoteDetails)) {
			return false;
		}

		DebitNoteDetails debitNoteDetails = (DebitNoteDetails)obj;

		long primaryKey = debitNoteDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DebitNoteDetailsModelImpl debitNoteDetailsModelImpl = this;

		debitNoteDetailsModelImpl._originalVehicleRecordId = debitNoteDetailsModelImpl._vehicleRecordId;

		debitNoteDetailsModelImpl._setOriginalVehicleRecordId = false;

		debitNoteDetailsModelImpl._originalDebitNoteId = debitNoteDetailsModelImpl._debitNoteId;

		debitNoteDetailsModelImpl._setOriginalDebitNoteId = false;

		debitNoteDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DebitNoteDetails> toCacheModel() {
		DebitNoteDetailsCacheModel debitNoteDetailsCacheModel = new DebitNoteDetailsCacheModel();

		debitNoteDetailsCacheModel.id = getId();

		debitNoteDetailsCacheModel.vehicleRecordId = getVehicleRecordId();

		debitNoteDetailsCacheModel.debitNoteId = getDebitNoteId();

		debitNoteDetailsCacheModel.inspectionRecordId = getInspectionRecordId();

		debitNoteDetailsCacheModel.unitPrice = getUnitPrice();

		debitNoteDetailsCacheModel.currency = getCurrency();

		String currency = debitNoteDetailsCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			debitNoteDetailsCacheModel.currency = null;
		}

		debitNoteDetailsCacheModel.basicCurrency = getBasicCurrency();

		String basicCurrency = debitNoteDetailsCacheModel.basicCurrency;

		if ((basicCurrency != null) && (basicCurrency.length() == 0)) {
			debitNoteDetailsCacheModel.basicCurrency = null;
		}

		debitNoteDetailsCacheModel.exchangeRate = getExchangeRate();

		debitNoteDetailsCacheModel.inspectionFee = getInspectionFee();

		debitNoteDetailsCacheModel.otherCosts = getOtherCosts();

		debitNoteDetailsCacheModel.totalCostsAndFee = getTotalCostsAndFee();

		debitNoteDetailsCacheModel.tax = getTax();

		debitNoteDetailsCacheModel.charges = getCharges();

		debitNoteDetailsCacheModel.totalRealDebit = getTotalRealDebit();

		debitNoteDetailsCacheModel.totalDebit = getTotalDebit();

		return debitNoteDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vehicleRecordId=");
		sb.append(getVehicleRecordId());
		sb.append(", debitNoteId=");
		sb.append(getDebitNoteId());
		sb.append(", inspectionRecordId=");
		sb.append(getInspectionRecordId());
		sb.append(", unitPrice=");
		sb.append(getUnitPrice());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", basicCurrency=");
		sb.append(getBasicCurrency());
		sb.append(", exchangeRate=");
		sb.append(getExchangeRate());
		sb.append(", inspectionFee=");
		sb.append(getInspectionFee());
		sb.append(", otherCosts=");
		sb.append(getOtherCosts());
		sb.append(", totalCostsAndFee=");
		sb.append(getTotalCostsAndFee());
		sb.append(", tax=");
		sb.append(getTax());
		sb.append(", charges=");
		sb.append(getCharges());
		sb.append(", totalRealDebit=");
		sb.append(getTotalRealDebit());
		sb.append(", totalDebit=");
		sb.append(getTotalDebit());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.DebitNoteDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleRecordId</column-name><column-value><![CDATA[");
		sb.append(getVehicleRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debitNoteId</column-name><column-value><![CDATA[");
		sb.append(getDebitNoteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordId</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPrice</column-name><column-value><![CDATA[");
		sb.append(getUnitPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basicCurrency</column-name><column-value><![CDATA[");
		sb.append(getBasicCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exchangeRate</column-name><column-value><![CDATA[");
		sb.append(getExchangeRate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionFee</column-name><column-value><![CDATA[");
		sb.append(getInspectionFee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherCosts</column-name><column-value><![CDATA[");
		sb.append(getOtherCosts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCostsAndFee</column-name><column-value><![CDATA[");
		sb.append(getTotalCostsAndFee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tax</column-name><column-value><![CDATA[");
		sb.append(getTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>charges</column-name><column-value><![CDATA[");
		sb.append(getCharges());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalRealDebit</column-name><column-value><![CDATA[");
		sb.append(getTotalRealDebit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalDebit</column-name><column-value><![CDATA[");
		sb.append(getTotalDebit());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DebitNoteDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DebitNoteDetails.class
		};
	private long _id;
	private long _vehicleRecordId;
	private long _originalVehicleRecordId;
	private boolean _setOriginalVehicleRecordId;
	private long _debitNoteId;
	private long _originalDebitNoteId;
	private boolean _setOriginalDebitNoteId;
	private long _inspectionRecordId;
	private double _unitPrice;
	private String _currency;
	private String _basicCurrency;
	private double _exchangeRate;
	private double _inspectionFee;
	private double _otherCosts;
	private double _totalCostsAndFee;
	private double _tax;
	private double _charges;
	private double _totalRealDebit;
	private double _totalDebit;
	private long _columnBitmask;
	private DebitNoteDetails _escapedModel;
}