/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecification;
import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecificationModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecificationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VehicleSpecification service. Represents a row in the &quot;vr_vehiclespecification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VehicleSpecificationImpl}.
 * </p>
 *
 * @author huymq
 * @see VehicleSpecificationImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecification
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecificationModel
 * @generated
 */
@JSON(strict = true)
public class VehicleSpecificationModelImpl extends BaseModelImpl<VehicleSpecification>
	implements VehicleSpecificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vehicle specification model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecification} interface instead.
	 */
	public static final String TABLE_NAME = "vr_vehiclespecification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "vehiclegroupid", Types.BIGINT },
			{ "specificationversion", Types.BIGINT },
			{ "specificationsourcecode", Types.VARCHAR },
			{ "specificationcode", Types.VARCHAR },
			{ "specificationname", Types.VARCHAR },
			{ "specificationvalue", Types.VARCHAR },
			{ "safetytestreportid", Types.BIGINT },
			{ "inspectionrecordid", Types.BIGINT },
			{ "specificresult", Types.BIGINT },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_vehiclespecification (id LONG not null primary key,vehiclegroupid LONG,specificationversion LONG,specificationsourcecode VARCHAR(75) null,specificationcode VARCHAR(75) null,specificationname VARCHAR(75) null,specificationvalue VARCHAR(75) null,safetytestreportid LONG,inspectionrecordid LONG,specificresult LONG,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_vehiclespecification";
	public static final String ORDER_BY_JPQL = " ORDER BY vehicleSpecification.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_vehiclespecification.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecification"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecification"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecification"),
			true);
	public static long INSPECTIONRECORDID_COLUMN_BITMASK = 1L;
	public static long SPECIFICATIONCODE_COLUMN_BITMASK = 2L;
	public static long VEHICLEGROUPID_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VehicleSpecification toModel(
		VehicleSpecificationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VehicleSpecification model = new VehicleSpecificationImpl();

		model.setId(soapModel.getId());
		model.setVehicleGroupId(soapModel.getVehicleGroupId());
		model.setSpecificationVersion(soapModel.getSpecificationVersion());
		model.setSpecificationSourceCode(soapModel.getSpecificationSourceCode());
		model.setSpecificationCode(soapModel.getSpecificationCode());
		model.setSpecificationName(soapModel.getSpecificationName());
		model.setSpecificationValue(soapModel.getSpecificationValue());
		model.setSafetyTestReportId(soapModel.getSafetyTestReportId());
		model.setInspectionRecordId(soapModel.getInspectionRecordId());
		model.setSpecificResult(soapModel.getSpecificResult());
		model.setSynchdate(soapModel.getSynchdate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VehicleSpecification> toModels(
		VehicleSpecificationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VehicleSpecification> models = new ArrayList<VehicleSpecification>(soapModels.length);

		for (VehicleSpecificationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecification"));

	public VehicleSpecificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VehicleSpecification.class;
	}

	@Override
	public String getModelClassName() {
		return VehicleSpecification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vehicleGroupId", getVehicleGroupId());
		attributes.put("specificationVersion", getSpecificationVersion());
		attributes.put("specificationSourceCode", getSpecificationSourceCode());
		attributes.put("specificationCode", getSpecificationCode());
		attributes.put("specificationName", getSpecificationName());
		attributes.put("specificationValue", getSpecificationValue());
		attributes.put("safetyTestReportId", getSafetyTestReportId());
		attributes.put("inspectionRecordId", getInspectionRecordId());
		attributes.put("specificResult", getSpecificResult());
		attributes.put("synchdate", getSynchdate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long vehicleGroupId = (Long)attributes.get("vehicleGroupId");

		if (vehicleGroupId != null) {
			setVehicleGroupId(vehicleGroupId);
		}

		Long specificationVersion = (Long)attributes.get("specificationVersion");

		if (specificationVersion != null) {
			setSpecificationVersion(specificationVersion);
		}

		String specificationSourceCode = (String)attributes.get(
				"specificationSourceCode");

		if (specificationSourceCode != null) {
			setSpecificationSourceCode(specificationSourceCode);
		}

		String specificationCode = (String)attributes.get("specificationCode");

		if (specificationCode != null) {
			setSpecificationCode(specificationCode);
		}

		String specificationName = (String)attributes.get("specificationName");

		if (specificationName != null) {
			setSpecificationName(specificationName);
		}

		String specificationValue = (String)attributes.get("specificationValue");

		if (specificationValue != null) {
			setSpecificationValue(specificationValue);
		}

		Long safetyTestReportId = (Long)attributes.get("safetyTestReportId");

		if (safetyTestReportId != null) {
			setSafetyTestReportId(safetyTestReportId);
		}

		Long inspectionRecordId = (Long)attributes.get("inspectionRecordId");

		if (inspectionRecordId != null) {
			setInspectionRecordId(inspectionRecordId);
		}

		Long specificResult = (Long)attributes.get("specificResult");

		if (specificResult != null) {
			setSpecificResult(specificResult);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getVehicleGroupId() {
		return _vehicleGroupId;
	}

	@Override
	public void setVehicleGroupId(long vehicleGroupId) {
		_columnBitmask |= VEHICLEGROUPID_COLUMN_BITMASK;

		if (!_setOriginalVehicleGroupId) {
			_setOriginalVehicleGroupId = true;

			_originalVehicleGroupId = _vehicleGroupId;
		}

		_vehicleGroupId = vehicleGroupId;
	}

	public long getOriginalVehicleGroupId() {
		return _originalVehicleGroupId;
	}

	@JSON
	@Override
	public long getSpecificationVersion() {
		return _specificationVersion;
	}

	@Override
	public void setSpecificationVersion(long specificationVersion) {
		_specificationVersion = specificationVersion;
	}

	@JSON
	@Override
	public String getSpecificationSourceCode() {
		if (_specificationSourceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationSourceCode;
		}
	}

	@Override
	public void setSpecificationSourceCode(String specificationSourceCode) {
		_specificationSourceCode = specificationSourceCode;
	}

	@JSON
	@Override
	public String getSpecificationCode() {
		if (_specificationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationCode;
		}
	}

	@Override
	public void setSpecificationCode(String specificationCode) {
		_columnBitmask |= SPECIFICATIONCODE_COLUMN_BITMASK;

		if (_originalSpecificationCode == null) {
			_originalSpecificationCode = _specificationCode;
		}

		_specificationCode = specificationCode;
	}

	public String getOriginalSpecificationCode() {
		return GetterUtil.getString(_originalSpecificationCode);
	}

	@JSON
	@Override
	public String getSpecificationName() {
		if (_specificationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationName;
		}
	}

	@Override
	public void setSpecificationName(String specificationName) {
		_specificationName = specificationName;
	}

	@JSON
	@Override
	public String getSpecificationValue() {
		if (_specificationValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationValue;
		}
	}

	@Override
	public void setSpecificationValue(String specificationValue) {
		_specificationValue = specificationValue;
	}

	@JSON
	@Override
	public long getSafetyTestReportId() {
		return _safetyTestReportId;
	}

	@Override
	public void setSafetyTestReportId(long safetyTestReportId) {
		_safetyTestReportId = safetyTestReportId;
	}

	@JSON
	@Override
	public long getInspectionRecordId() {
		return _inspectionRecordId;
	}

	@Override
	public void setInspectionRecordId(long inspectionRecordId) {
		_columnBitmask |= INSPECTIONRECORDID_COLUMN_BITMASK;

		if (!_setOriginalInspectionRecordId) {
			_setOriginalInspectionRecordId = true;

			_originalInspectionRecordId = _inspectionRecordId;
		}

		_inspectionRecordId = inspectionRecordId;
	}

	public long getOriginalInspectionRecordId() {
		return _originalInspectionRecordId;
	}

	@JSON
	@Override
	public long getSpecificResult() {
		return _specificResult;
	}

	@Override
	public void setSpecificResult(long specificResult) {
		_specificResult = specificResult;
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VehicleSpecification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VehicleSpecification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VehicleSpecification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VehicleSpecificationImpl vehicleSpecificationImpl = new VehicleSpecificationImpl();

		vehicleSpecificationImpl.setId(getId());
		vehicleSpecificationImpl.setVehicleGroupId(getVehicleGroupId());
		vehicleSpecificationImpl.setSpecificationVersion(getSpecificationVersion());
		vehicleSpecificationImpl.setSpecificationSourceCode(getSpecificationSourceCode());
		vehicleSpecificationImpl.setSpecificationCode(getSpecificationCode());
		vehicleSpecificationImpl.setSpecificationName(getSpecificationName());
		vehicleSpecificationImpl.setSpecificationValue(getSpecificationValue());
		vehicleSpecificationImpl.setSafetyTestReportId(getSafetyTestReportId());
		vehicleSpecificationImpl.setInspectionRecordId(getInspectionRecordId());
		vehicleSpecificationImpl.setSpecificResult(getSpecificResult());
		vehicleSpecificationImpl.setSynchdate(getSynchdate());

		vehicleSpecificationImpl.resetOriginalValues();

		return vehicleSpecificationImpl;
	}

	@Override
	public int compareTo(VehicleSpecification vehicleSpecification) {
		int value = 0;

		if (getId() < vehicleSpecification.getId()) {
			value = -1;
		}
		else if (getId() > vehicleSpecification.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VehicleSpecification)) {
			return false;
		}

		VehicleSpecification vehicleSpecification = (VehicleSpecification)obj;

		long primaryKey = vehicleSpecification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VehicleSpecificationModelImpl vehicleSpecificationModelImpl = this;

		vehicleSpecificationModelImpl._originalVehicleGroupId = vehicleSpecificationModelImpl._vehicleGroupId;

		vehicleSpecificationModelImpl._setOriginalVehicleGroupId = false;

		vehicleSpecificationModelImpl._originalSpecificationCode = vehicleSpecificationModelImpl._specificationCode;

		vehicleSpecificationModelImpl._originalInspectionRecordId = vehicleSpecificationModelImpl._inspectionRecordId;

		vehicleSpecificationModelImpl._setOriginalInspectionRecordId = false;

		vehicleSpecificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VehicleSpecification> toCacheModel() {
		VehicleSpecificationCacheModel vehicleSpecificationCacheModel = new VehicleSpecificationCacheModel();

		vehicleSpecificationCacheModel.id = getId();

		vehicleSpecificationCacheModel.vehicleGroupId = getVehicleGroupId();

		vehicleSpecificationCacheModel.specificationVersion = getSpecificationVersion();

		vehicleSpecificationCacheModel.specificationSourceCode = getSpecificationSourceCode();

		String specificationSourceCode = vehicleSpecificationCacheModel.specificationSourceCode;

		if ((specificationSourceCode != null) &&
				(specificationSourceCode.length() == 0)) {
			vehicleSpecificationCacheModel.specificationSourceCode = null;
		}

		vehicleSpecificationCacheModel.specificationCode = getSpecificationCode();

		String specificationCode = vehicleSpecificationCacheModel.specificationCode;

		if ((specificationCode != null) && (specificationCode.length() == 0)) {
			vehicleSpecificationCacheModel.specificationCode = null;
		}

		vehicleSpecificationCacheModel.specificationName = getSpecificationName();

		String specificationName = vehicleSpecificationCacheModel.specificationName;

		if ((specificationName != null) && (specificationName.length() == 0)) {
			vehicleSpecificationCacheModel.specificationName = null;
		}

		vehicleSpecificationCacheModel.specificationValue = getSpecificationValue();

		String specificationValue = vehicleSpecificationCacheModel.specificationValue;

		if ((specificationValue != null) && (specificationValue.length() == 0)) {
			vehicleSpecificationCacheModel.specificationValue = null;
		}

		vehicleSpecificationCacheModel.safetyTestReportId = getSafetyTestReportId();

		vehicleSpecificationCacheModel.inspectionRecordId = getInspectionRecordId();

		vehicleSpecificationCacheModel.specificResult = getSpecificResult();

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			vehicleSpecificationCacheModel.synchdate = synchdate.getTime();
		}
		else {
			vehicleSpecificationCacheModel.synchdate = Long.MIN_VALUE;
		}

		return vehicleSpecificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vehicleGroupId=");
		sb.append(getVehicleGroupId());
		sb.append(", specificationVersion=");
		sb.append(getSpecificationVersion());
		sb.append(", specificationSourceCode=");
		sb.append(getSpecificationSourceCode());
		sb.append(", specificationCode=");
		sb.append(getSpecificationCode());
		sb.append(", specificationName=");
		sb.append(getSpecificationName());
		sb.append(", specificationValue=");
		sb.append(getSpecificationValue());
		sb.append(", safetyTestReportId=");
		sb.append(getSafetyTestReportId());
		sb.append(", inspectionRecordId=");
		sb.append(getInspectionRecordId());
		sb.append(", specificResult=");
		sb.append(getSpecificResult());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.VehicleSpecification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleGroupId</column-name><column-value><![CDATA[");
		sb.append(getVehicleGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationVersion</column-name><column-value><![CDATA[");
		sb.append(getSpecificationVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationSourceCode</column-name><column-value><![CDATA[");
		sb.append(getSpecificationSourceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationCode</column-name><column-value><![CDATA[");
		sb.append(getSpecificationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationName</column-name><column-value><![CDATA[");
		sb.append(getSpecificationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationValue</column-name><column-value><![CDATA[");
		sb.append(getSpecificationValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safetyTestReportId</column-name><column-value><![CDATA[");
		sb.append(getSafetyTestReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordId</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificResult</column-name><column-value><![CDATA[");
		sb.append(getSpecificResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VehicleSpecification.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VehicleSpecification.class
		};
	private long _id;
	private long _vehicleGroupId;
	private long _originalVehicleGroupId;
	private boolean _setOriginalVehicleGroupId;
	private long _specificationVersion;
	private String _specificationSourceCode;
	private String _specificationCode;
	private String _originalSpecificationCode;
	private String _specificationName;
	private String _specificationValue;
	private long _safetyTestReportId;
	private long _inspectionRecordId;
	private long _originalInspectionRecordId;
	private boolean _setOriginalInspectionRecordId;
	private long _specificResult;
	private Date _synchdate;
	private long _columnBitmask;
	private VehicleSpecification _escapedModel;
}