/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.api.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.api.model.Api;
import vn.dtt.gt.dk.dao.api.model.ApiModel;
import vn.dtt.gt.dk.dao.api.model.ApiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Api service. Represents a row in the &quot;api_log&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.api.model.ApiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApiImpl}.
 * </p>
 *
 * @author huymq
 * @see ApiImpl
 * @see vn.dtt.gt.dk.dao.api.model.Api
 * @see vn.dtt.gt.dk.dao.api.model.ApiModel
 * @generated
 */
@JSON(strict = true)
public class ApiModelImpl extends BaseModelImpl<Api> implements ApiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a api model instance should use the {@link vn.dtt.gt.dk.dao.api.model.Api} interface instead.
	 */
	public static final String TABLE_NAME = "api_log";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userAgent", Types.VARCHAR },
			{ "ip", Types.VARCHAR },
			{ "code_", Types.VARCHAR },
			{ "registeredNumber", Types.VARCHAR },
			{ "request", Types.VARCHAR },
			{ "response", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table api_log (id_ LONG not null primary key,createDate DATE null,modifiedDate DATE null,userAgent VARCHAR(75) null,ip VARCHAR(75) null,code_ VARCHAR(75) null,registeredNumber VARCHAR(75) null,request VARCHAR(75) null,response VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table api_log";
	public static final String ORDER_BY_JPQL = " ORDER BY api.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY api_log.createDate ASC";
	public static final String DATA_SOURCE = "tthcDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.api.model.Api"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.api.model.Api"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.api.model.Api"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long IP_COLUMN_BITMASK = 2L;
	public static long REGISTEREDNUMBER_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Api toModel(ApiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Api model = new ApiImpl();

		model.setId(soapModel.getId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUserAgent(soapModel.getUserAgent());
		model.setIp(soapModel.getIp());
		model.setCode(soapModel.getCode());
		model.setRegisteredNumber(soapModel.getRegisteredNumber());
		model.setRequest(soapModel.getRequest());
		model.setResponse(soapModel.getResponse());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Api> toModels(ApiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Api> models = new ArrayList<Api>(soapModels.length);

		for (ApiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.api.model.Api"));

	public ApiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Api.class;
	}

	@Override
	public String getModelClassName() {
		return Api.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userAgent", getUserAgent());
		attributes.put("ip", getIp());
		attributes.put("code", getCode());
		attributes.put("registeredNumber", getRegisteredNumber());
		attributes.put("request", getRequest());
		attributes.put("response", getResponse());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String userAgent = (String)attributes.get("userAgent");

		if (userAgent != null) {
			setUserAgent(userAgent);
		}

		String ip = (String)attributes.get("ip");

		if (ip != null) {
			setIp(ip);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String registeredNumber = (String)attributes.get("registeredNumber");

		if (registeredNumber != null) {
			setRegisteredNumber(registeredNumber);
		}

		String request = (String)attributes.get("request");

		if (request != null) {
			setRequest(request);
		}

		String response = (String)attributes.get("response");

		if (response != null) {
			setResponse(response);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUserAgent() {
		if (_userAgent == null) {
			return StringPool.BLANK;
		}
		else {
			return _userAgent;
		}
	}

	@Override
	public void setUserAgent(String userAgent) {
		_userAgent = userAgent;
	}

	@JSON
	@Override
	public String getIp() {
		if (_ip == null) {
			return StringPool.BLANK;
		}
		else {
			return _ip;
		}
	}

	@Override
	public void setIp(String ip) {
		_columnBitmask |= IP_COLUMN_BITMASK;

		if (_originalIp == null) {
			_originalIp = _ip;
		}

		_ip = ip;
	}

	public String getOriginalIp() {
		return GetterUtil.getString(_originalIp);
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public String getRegisteredNumber() {
		if (_registeredNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registeredNumber;
		}
	}

	@Override
	public void setRegisteredNumber(String registeredNumber) {
		_columnBitmask |= REGISTEREDNUMBER_COLUMN_BITMASK;

		if (_originalRegisteredNumber == null) {
			_originalRegisteredNumber = _registeredNumber;
		}

		_registeredNumber = registeredNumber;
	}

	public String getOriginalRegisteredNumber() {
		return GetterUtil.getString(_originalRegisteredNumber);
	}

	@JSON
	@Override
	public String getRequest() {
		if (_request == null) {
			return StringPool.BLANK;
		}
		else {
			return _request;
		}
	}

	@Override
	public void setRequest(String request) {
		_request = request;
	}

	@JSON
	@Override
	public String getResponse() {
		if (_response == null) {
			return StringPool.BLANK;
		}
		else {
			return _response;
		}
	}

	@Override
	public void setResponse(String response) {
		_response = response;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Api.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Api toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Api)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApiImpl apiImpl = new ApiImpl();

		apiImpl.setId(getId());
		apiImpl.setCreateDate(getCreateDate());
		apiImpl.setModifiedDate(getModifiedDate());
		apiImpl.setUserAgent(getUserAgent());
		apiImpl.setIp(getIp());
		apiImpl.setCode(getCode());
		apiImpl.setRegisteredNumber(getRegisteredNumber());
		apiImpl.setRequest(getRequest());
		apiImpl.setResponse(getResponse());

		apiImpl.resetOriginalValues();

		return apiImpl;
	}

	@Override
	public int compareTo(Api api) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), api.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Api)) {
			return false;
		}

		Api api = (Api)obj;

		long primaryKey = api.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ApiModelImpl apiModelImpl = this;

		apiModelImpl._originalIp = apiModelImpl._ip;

		apiModelImpl._originalCode = apiModelImpl._code;

		apiModelImpl._originalRegisteredNumber = apiModelImpl._registeredNumber;

		apiModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Api> toCacheModel() {
		ApiCacheModel apiCacheModel = new ApiCacheModel();

		apiCacheModel.id = getId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			apiCacheModel.createDate = createDate.getTime();
		}
		else {
			apiCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			apiCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			apiCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		apiCacheModel.userAgent = getUserAgent();

		String userAgent = apiCacheModel.userAgent;

		if ((userAgent != null) && (userAgent.length() == 0)) {
			apiCacheModel.userAgent = null;
		}

		apiCacheModel.ip = getIp();

		String ip = apiCacheModel.ip;

		if ((ip != null) && (ip.length() == 0)) {
			apiCacheModel.ip = null;
		}

		apiCacheModel.code = getCode();

		String code = apiCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			apiCacheModel.code = null;
		}

		apiCacheModel.registeredNumber = getRegisteredNumber();

		String registeredNumber = apiCacheModel.registeredNumber;

		if ((registeredNumber != null) && (registeredNumber.length() == 0)) {
			apiCacheModel.registeredNumber = null;
		}

		apiCacheModel.request = getRequest();

		String request = apiCacheModel.request;

		if ((request != null) && (request.length() == 0)) {
			apiCacheModel.request = null;
		}

		apiCacheModel.response = getResponse();

		String response = apiCacheModel.response;

		if ((response != null) && (response.length() == 0)) {
			apiCacheModel.response = null;
		}

		return apiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userAgent=");
		sb.append(getUserAgent());
		sb.append(", ip=");
		sb.append(getIp());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", registeredNumber=");
		sb.append(getRegisteredNumber());
		sb.append(", request=");
		sb.append(getRequest());
		sb.append(", response=");
		sb.append(getResponse());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.api.model.Api");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userAgent</column-name><column-value><![CDATA[");
		sb.append(getUserAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ip</column-name><column-value><![CDATA[");
		sb.append(getIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredNumber</column-name><column-value><![CDATA[");
		sb.append(getRegisteredNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>request</column-name><column-value><![CDATA[");
		sb.append(getRequest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>response</column-name><column-value><![CDATA[");
		sb.append(getResponse());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Api.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Api.class };
	private long _id;
	private Date _createDate;
	private Date _modifiedDate;
	private String _userAgent;
	private String _ip;
	private String _originalIp;
	private String _code;
	private String _originalCode;
	private String _registeredNumber;
	private String _originalRegisteredNumber;
	private String _request;
	private String _response;
	private long _columnBitmask;
	private Api _escapedModel;
}