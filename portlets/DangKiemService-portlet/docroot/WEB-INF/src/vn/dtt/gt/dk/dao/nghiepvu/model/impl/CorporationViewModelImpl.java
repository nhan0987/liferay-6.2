/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.CorporationView;
import vn.dtt.gt.dk.dao.nghiepvu.model.CorporationViewModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.CorporationViewSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CorporationView service. Represents a row in the &quot;vr_corporation_view&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.CorporationViewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CorporationViewImpl}.
 * </p>
 *
 * @author huymq
 * @see CorporationViewImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.CorporationView
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.CorporationViewModel
 * @generated
 */
@JSON(strict = true)
public class CorporationViewModelImpl extends BaseModelImpl<CorporationView>
	implements CorporationViewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a corporation view model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.CorporationView} interface instead.
	 */
	public static final String TABLE_NAME = "vr_corporation_view";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "corporationid", Types.VARCHAR },
			{ "corporationname", Types.VARCHAR },
			{ "inspectorid", Types.BIGINT },
			{ "isleader", Types.INTEGER },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_corporation_view (id LONG not null primary key,corporationid VARCHAR(75) null,corporationname VARCHAR(75) null,inspectorid LONG,isleader INTEGER,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_corporation_view";
	public static final String ORDER_BY_JPQL = " ORDER BY corporationView.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_corporation_view.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.CorporationView"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.CorporationView"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.CorporationView"),
			true);
	public static long CORPORATIONID_COLUMN_BITMASK = 1L;
	public static long INSPECTORID_COLUMN_BITMASK = 2L;
	public static long ISLEADER_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CorporationView toModel(CorporationViewSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CorporationView model = new CorporationViewImpl();

		model.setId(soapModel.getId());
		model.setCorporationId(soapModel.getCorporationId());
		model.setCorporationName(soapModel.getCorporationName());
		model.setInspectorId(soapModel.getInspectorId());
		model.setIsLeader(soapModel.getIsLeader());
		model.setSynchdate(soapModel.getSynchdate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CorporationView> toModels(
		CorporationViewSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CorporationView> models = new ArrayList<CorporationView>(soapModels.length);

		for (CorporationViewSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.CorporationView"));

	public CorporationViewModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CorporationView.class;
	}

	@Override
	public String getModelClassName() {
		return CorporationView.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("corporationId", getCorporationId());
		attributes.put("corporationName", getCorporationName());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("isLeader", getIsLeader());
		attributes.put("synchdate", getSynchdate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		String corporationName = (String)attributes.get("corporationName");

		if (corporationName != null) {
			setCorporationName(corporationName);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		Integer isLeader = (Integer)attributes.get("isLeader");

		if (isLeader != null) {
			setIsLeader(isLeader);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (_originalCorporationId == null) {
			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public String getOriginalCorporationId() {
		return GetterUtil.getString(_originalCorporationId);
	}

	@JSON
	@Override
	public String getCorporationName() {
		if (_corporationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationName;
		}
	}

	@Override
	public void setCorporationName(String corporationName) {
		_corporationName = corporationName;
	}

	@JSON
	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_columnBitmask |= INSPECTORID_COLUMN_BITMASK;

		if (!_setOriginalInspectorId) {
			_setOriginalInspectorId = true;

			_originalInspectorId = _inspectorId;
		}

		_inspectorId = inspectorId;
	}

	public long getOriginalInspectorId() {
		return _originalInspectorId;
	}

	@JSON
	@Override
	public int getIsLeader() {
		return _isLeader;
	}

	@Override
	public void setIsLeader(int isLeader) {
		_columnBitmask |= ISLEADER_COLUMN_BITMASK;

		if (!_setOriginalIsLeader) {
			_setOriginalIsLeader = true;

			_originalIsLeader = _isLeader;
		}

		_isLeader = isLeader;
	}

	public int getOriginalIsLeader() {
		return _originalIsLeader;
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CorporationView.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CorporationView toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CorporationView)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CorporationViewImpl corporationViewImpl = new CorporationViewImpl();

		corporationViewImpl.setId(getId());
		corporationViewImpl.setCorporationId(getCorporationId());
		corporationViewImpl.setCorporationName(getCorporationName());
		corporationViewImpl.setInspectorId(getInspectorId());
		corporationViewImpl.setIsLeader(getIsLeader());
		corporationViewImpl.setSynchdate(getSynchdate());

		corporationViewImpl.resetOriginalValues();

		return corporationViewImpl;
	}

	@Override
	public int compareTo(CorporationView corporationView) {
		int value = 0;

		if (getId() < corporationView.getId()) {
			value = -1;
		}
		else if (getId() > corporationView.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CorporationView)) {
			return false;
		}

		CorporationView corporationView = (CorporationView)obj;

		long primaryKey = corporationView.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CorporationViewModelImpl corporationViewModelImpl = this;

		corporationViewModelImpl._originalCorporationId = corporationViewModelImpl._corporationId;

		corporationViewModelImpl._originalInspectorId = corporationViewModelImpl._inspectorId;

		corporationViewModelImpl._setOriginalInspectorId = false;

		corporationViewModelImpl._originalIsLeader = corporationViewModelImpl._isLeader;

		corporationViewModelImpl._setOriginalIsLeader = false;

		corporationViewModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CorporationView> toCacheModel() {
		CorporationViewCacheModel corporationViewCacheModel = new CorporationViewCacheModel();

		corporationViewCacheModel.id = getId();

		corporationViewCacheModel.corporationId = getCorporationId();

		String corporationId = corporationViewCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			corporationViewCacheModel.corporationId = null;
		}

		corporationViewCacheModel.corporationName = getCorporationName();

		String corporationName = corporationViewCacheModel.corporationName;

		if ((corporationName != null) && (corporationName.length() == 0)) {
			corporationViewCacheModel.corporationName = null;
		}

		corporationViewCacheModel.inspectorId = getInspectorId();

		corporationViewCacheModel.isLeader = getIsLeader();

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			corporationViewCacheModel.synchdate = synchdate.getTime();
		}
		else {
			corporationViewCacheModel.synchdate = Long.MIN_VALUE;
		}

		return corporationViewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", corporationName=");
		sb.append(getCorporationName());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", isLeader=");
		sb.append(getIsLeader());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.CorporationView");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationName</column-name><column-value><![CDATA[");
		sb.append(getCorporationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isLeader</column-name><column-value><![CDATA[");
		sb.append(getIsLeader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CorporationView.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CorporationView.class
		};
	private long _id;
	private String _corporationId;
	private String _originalCorporationId;
	private String _corporationName;
	private long _inspectorId;
	private long _originalInspectorId;
	private boolean _setOriginalInspectorId;
	private int _isLeader;
	private int _originalIsLeader;
	private boolean _setOriginalIsLeader;
	private Date _synchdate;
	private long _columnBitmask;
	private CorporationView _escapedModel;
}