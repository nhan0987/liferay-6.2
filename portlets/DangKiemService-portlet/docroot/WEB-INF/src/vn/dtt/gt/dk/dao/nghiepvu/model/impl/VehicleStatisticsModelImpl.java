/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatistics;
import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatisticsModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatisticsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VehicleStatistics service. Represents a row in the &quot;vr_vehiclestatistics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatisticsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VehicleStatisticsImpl}.
 * </p>
 *
 * @author huymq
 * @see VehicleStatisticsImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatistics
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatisticsModel
 * @generated
 */
@JSON(strict = true)
public class VehicleStatisticsModelImpl extends BaseModelImpl<VehicleStatistics>
	implements VehicleStatisticsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vehicle statistics model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatistics} interface instead.
	 */
	public static final String TABLE_NAME = "vr_vehiclestatistics";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "registeredinspectionid", Types.BIGINT },
			{ "totalregisteredvehicle", Types.BIGINT },
			{ "totalrequestedvehicle", Types.BIGINT },
			{ "totalnotyetrequestedvehicle", Types.BIGINT },
			{ "totalcancelledvehicle", Types.BIGINT },
			{ "totalinspectedvehicle", Types.BIGINT },
			{ "totalresolvedvehicle", Types.BIGINT },
			{ "totalreexportedvehicle", Types.BIGINT },
			{ "totalwrongstatusvehicle", Types.BIGINT },
			{ "totalsafetestsample", Types.BIGINT },
			{ "totalemissiontestsample", Types.BIGINT },
			{ "totalcontrolrequiredvehicle", Types.BIGINT },
			{ "totalcertificate", Types.BIGINT },
			{ "totalviolatedvehicle", Types.BIGINT },
			{ "totaltechnicalspec", Types.BIGINT },
			{ "processingstate", Types.BIGINT },
			{ "processingtiming", Types.BIGINT },
			{ "daysuptodeadline", Types.BIGINT },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_vehiclestatistics (id LONG not null primary key,registeredinspectionid LONG,totalregisteredvehicle LONG,totalrequestedvehicle LONG,totalnotyetrequestedvehicle LONG,totalcancelledvehicle LONG,totalinspectedvehicle LONG,totalresolvedvehicle LONG,totalreexportedvehicle LONG,totalwrongstatusvehicle LONG,totalsafetestsample LONG,totalemissiontestsample LONG,totalcontrolrequiredvehicle LONG,totalcertificate LONG,totalviolatedvehicle LONG,totaltechnicalspec LONG,processingstate LONG,processingtiming LONG,daysuptodeadline LONG,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_vehiclestatistics";
	public static final String ORDER_BY_JPQL = " ORDER BY vehicleStatistics.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_vehiclestatistics.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatistics"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatistics"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatistics"),
			true);
	public static long REGISTEREDINSPECTIONID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VehicleStatistics toModel(VehicleStatisticsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VehicleStatistics model = new VehicleStatisticsImpl();

		model.setId(soapModel.getId());
		model.setRegisteredInspectionId(soapModel.getRegisteredInspectionId());
		model.setTotalRegisteredVehicle(soapModel.getTotalRegisteredVehicle());
		model.setTotalRequestedVehicle(soapModel.getTotalRequestedVehicle());
		model.setTotalNotYetRequestedVehicle(soapModel.getTotalNotYetRequestedVehicle());
		model.setTotalCancelledVehicle(soapModel.getTotalCancelledVehicle());
		model.setTotalInspectedVehicle(soapModel.getTotalInspectedVehicle());
		model.setTotalResolvedVehicle(soapModel.getTotalResolvedVehicle());
		model.setTotalReexportedVehicle(soapModel.getTotalReexportedVehicle());
		model.setTotalWrongStatusVehicle(soapModel.getTotalWrongStatusVehicle());
		model.setTotalSafeTestSample(soapModel.getTotalSafeTestSample());
		model.setTotalEmissionTestSample(soapModel.getTotalEmissionTestSample());
		model.setTotalControlRequiredVehicle(soapModel.getTotalControlRequiredVehicle());
		model.setTotalCertificate(soapModel.getTotalCertificate());
		model.setTotalViolatedVehicle(soapModel.getTotalViolatedVehicle());
		model.setTotalTechnicalSpec(soapModel.getTotalTechnicalSpec());
		model.setProcessingState(soapModel.getProcessingState());
		model.setProcessingTiming(soapModel.getProcessingTiming());
		model.setDaysUptoDeadline(soapModel.getDaysUptoDeadline());
		model.setSynchdate(soapModel.getSynchdate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VehicleStatistics> toModels(
		VehicleStatisticsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VehicleStatistics> models = new ArrayList<VehicleStatistics>(soapModels.length);

		for (VehicleStatisticsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatistics"));

	public VehicleStatisticsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VehicleStatistics.class;
	}

	@Override
	public String getModelClassName() {
		return VehicleStatistics.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("registeredInspectionId", getRegisteredInspectionId());
		attributes.put("totalRegisteredVehicle", getTotalRegisteredVehicle());
		attributes.put("totalRequestedVehicle", getTotalRequestedVehicle());
		attributes.put("totalNotYetRequestedVehicle",
			getTotalNotYetRequestedVehicle());
		attributes.put("totalCancelledVehicle", getTotalCancelledVehicle());
		attributes.put("totalInspectedVehicle", getTotalInspectedVehicle());
		attributes.put("totalResolvedVehicle", getTotalResolvedVehicle());
		attributes.put("totalReexportedVehicle", getTotalReexportedVehicle());
		attributes.put("totalWrongStatusVehicle", getTotalWrongStatusVehicle());
		attributes.put("totalSafeTestSample", getTotalSafeTestSample());
		attributes.put("totalEmissionTestSample", getTotalEmissionTestSample());
		attributes.put("totalControlRequiredVehicle",
			getTotalControlRequiredVehicle());
		attributes.put("totalCertificate", getTotalCertificate());
		attributes.put("totalViolatedVehicle", getTotalViolatedVehicle());
		attributes.put("totalTechnicalSpec", getTotalTechnicalSpec());
		attributes.put("processingState", getProcessingState());
		attributes.put("processingTiming", getProcessingTiming());
		attributes.put("daysUptoDeadline", getDaysUptoDeadline());
		attributes.put("synchdate", getSynchdate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long registeredInspectionId = (Long)attributes.get(
				"registeredInspectionId");

		if (registeredInspectionId != null) {
			setRegisteredInspectionId(registeredInspectionId);
		}

		Long totalRegisteredVehicle = (Long)attributes.get(
				"totalRegisteredVehicle");

		if (totalRegisteredVehicle != null) {
			setTotalRegisteredVehicle(totalRegisteredVehicle);
		}

		Long totalRequestedVehicle = (Long)attributes.get(
				"totalRequestedVehicle");

		if (totalRequestedVehicle != null) {
			setTotalRequestedVehicle(totalRequestedVehicle);
		}

		Long totalNotYetRequestedVehicle = (Long)attributes.get(
				"totalNotYetRequestedVehicle");

		if (totalNotYetRequestedVehicle != null) {
			setTotalNotYetRequestedVehicle(totalNotYetRequestedVehicle);
		}

		Long totalCancelledVehicle = (Long)attributes.get(
				"totalCancelledVehicle");

		if (totalCancelledVehicle != null) {
			setTotalCancelledVehicle(totalCancelledVehicle);
		}

		Long totalInspectedVehicle = (Long)attributes.get(
				"totalInspectedVehicle");

		if (totalInspectedVehicle != null) {
			setTotalInspectedVehicle(totalInspectedVehicle);
		}

		Long totalResolvedVehicle = (Long)attributes.get("totalResolvedVehicle");

		if (totalResolvedVehicle != null) {
			setTotalResolvedVehicle(totalResolvedVehicle);
		}

		Long totalReexportedVehicle = (Long)attributes.get(
				"totalReexportedVehicle");

		if (totalReexportedVehicle != null) {
			setTotalReexportedVehicle(totalReexportedVehicle);
		}

		Long totalWrongStatusVehicle = (Long)attributes.get(
				"totalWrongStatusVehicle");

		if (totalWrongStatusVehicle != null) {
			setTotalWrongStatusVehicle(totalWrongStatusVehicle);
		}

		Long totalSafeTestSample = (Long)attributes.get("totalSafeTestSample");

		if (totalSafeTestSample != null) {
			setTotalSafeTestSample(totalSafeTestSample);
		}

		Long totalEmissionTestSample = (Long)attributes.get(
				"totalEmissionTestSample");

		if (totalEmissionTestSample != null) {
			setTotalEmissionTestSample(totalEmissionTestSample);
		}

		Long totalControlRequiredVehicle = (Long)attributes.get(
				"totalControlRequiredVehicle");

		if (totalControlRequiredVehicle != null) {
			setTotalControlRequiredVehicle(totalControlRequiredVehicle);
		}

		Long totalCertificate = (Long)attributes.get("totalCertificate");

		if (totalCertificate != null) {
			setTotalCertificate(totalCertificate);
		}

		Long totalViolatedVehicle = (Long)attributes.get("totalViolatedVehicle");

		if (totalViolatedVehicle != null) {
			setTotalViolatedVehicle(totalViolatedVehicle);
		}

		Long totalTechnicalSpec = (Long)attributes.get("totalTechnicalSpec");

		if (totalTechnicalSpec != null) {
			setTotalTechnicalSpec(totalTechnicalSpec);
		}

		Long processingState = (Long)attributes.get("processingState");

		if (processingState != null) {
			setProcessingState(processingState);
		}

		Long processingTiming = (Long)attributes.get("processingTiming");

		if (processingTiming != null) {
			setProcessingTiming(processingTiming);
		}

		Long daysUptoDeadline = (Long)attributes.get("daysUptoDeadline");

		if (daysUptoDeadline != null) {
			setDaysUptoDeadline(daysUptoDeadline);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getRegisteredInspectionId() {
		return _registeredInspectionId;
	}

	@Override
	public void setRegisteredInspectionId(long registeredInspectionId) {
		_columnBitmask |= REGISTEREDINSPECTIONID_COLUMN_BITMASK;

		if (!_setOriginalRegisteredInspectionId) {
			_setOriginalRegisteredInspectionId = true;

			_originalRegisteredInspectionId = _registeredInspectionId;
		}

		_registeredInspectionId = registeredInspectionId;
	}

	public long getOriginalRegisteredInspectionId() {
		return _originalRegisteredInspectionId;
	}

	@JSON
	@Override
	public long getTotalRegisteredVehicle() {
		return _totalRegisteredVehicle;
	}

	@Override
	public void setTotalRegisteredVehicle(long totalRegisteredVehicle) {
		_totalRegisteredVehicle = totalRegisteredVehicle;
	}

	@JSON
	@Override
	public long getTotalRequestedVehicle() {
		return _totalRequestedVehicle;
	}

	@Override
	public void setTotalRequestedVehicle(long totalRequestedVehicle) {
		_totalRequestedVehicle = totalRequestedVehicle;
	}

	@JSON
	@Override
	public long getTotalNotYetRequestedVehicle() {
		return _totalNotYetRequestedVehicle;
	}

	@Override
	public void setTotalNotYetRequestedVehicle(long totalNotYetRequestedVehicle) {
		_totalNotYetRequestedVehicle = totalNotYetRequestedVehicle;
	}

	@JSON
	@Override
	public long getTotalCancelledVehicle() {
		return _totalCancelledVehicle;
	}

	@Override
	public void setTotalCancelledVehicle(long totalCancelledVehicle) {
		_totalCancelledVehicle = totalCancelledVehicle;
	}

	@JSON
	@Override
	public long getTotalInspectedVehicle() {
		return _totalInspectedVehicle;
	}

	@Override
	public void setTotalInspectedVehicle(long totalInspectedVehicle) {
		_totalInspectedVehicle = totalInspectedVehicle;
	}

	@JSON
	@Override
	public long getTotalResolvedVehicle() {
		return _totalResolvedVehicle;
	}

	@Override
	public void setTotalResolvedVehicle(long totalResolvedVehicle) {
		_totalResolvedVehicle = totalResolvedVehicle;
	}

	@JSON
	@Override
	public long getTotalReexportedVehicle() {
		return _totalReexportedVehicle;
	}

	@Override
	public void setTotalReexportedVehicle(long totalReexportedVehicle) {
		_totalReexportedVehicle = totalReexportedVehicle;
	}

	@JSON
	@Override
	public long getTotalWrongStatusVehicle() {
		return _totalWrongStatusVehicle;
	}

	@Override
	public void setTotalWrongStatusVehicle(long totalWrongStatusVehicle) {
		_totalWrongStatusVehicle = totalWrongStatusVehicle;
	}

	@JSON
	@Override
	public long getTotalSafeTestSample() {
		return _totalSafeTestSample;
	}

	@Override
	public void setTotalSafeTestSample(long totalSafeTestSample) {
		_totalSafeTestSample = totalSafeTestSample;
	}

	@JSON
	@Override
	public long getTotalEmissionTestSample() {
		return _totalEmissionTestSample;
	}

	@Override
	public void setTotalEmissionTestSample(long totalEmissionTestSample) {
		_totalEmissionTestSample = totalEmissionTestSample;
	}

	@JSON
	@Override
	public long getTotalControlRequiredVehicle() {
		return _totalControlRequiredVehicle;
	}

	@Override
	public void setTotalControlRequiredVehicle(long totalControlRequiredVehicle) {
		_totalControlRequiredVehicle = totalControlRequiredVehicle;
	}

	@JSON
	@Override
	public long getTotalCertificate() {
		return _totalCertificate;
	}

	@Override
	public void setTotalCertificate(long totalCertificate) {
		_totalCertificate = totalCertificate;
	}

	@JSON
	@Override
	public long getTotalViolatedVehicle() {
		return _totalViolatedVehicle;
	}

	@Override
	public void setTotalViolatedVehicle(long totalViolatedVehicle) {
		_totalViolatedVehicle = totalViolatedVehicle;
	}

	@JSON
	@Override
	public long getTotalTechnicalSpec() {
		return _totalTechnicalSpec;
	}

	@Override
	public void setTotalTechnicalSpec(long totalTechnicalSpec) {
		_totalTechnicalSpec = totalTechnicalSpec;
	}

	@JSON
	@Override
	public long getProcessingState() {
		return _processingState;
	}

	@Override
	public void setProcessingState(long processingState) {
		_processingState = processingState;
	}

	@JSON
	@Override
	public long getProcessingTiming() {
		return _processingTiming;
	}

	@Override
	public void setProcessingTiming(long processingTiming) {
		_processingTiming = processingTiming;
	}

	@JSON
	@Override
	public long getDaysUptoDeadline() {
		return _daysUptoDeadline;
	}

	@Override
	public void setDaysUptoDeadline(long daysUptoDeadline) {
		_daysUptoDeadline = daysUptoDeadline;
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VehicleStatistics.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VehicleStatistics toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VehicleStatistics)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VehicleStatisticsImpl vehicleStatisticsImpl = new VehicleStatisticsImpl();

		vehicleStatisticsImpl.setId(getId());
		vehicleStatisticsImpl.setRegisteredInspectionId(getRegisteredInspectionId());
		vehicleStatisticsImpl.setTotalRegisteredVehicle(getTotalRegisteredVehicle());
		vehicleStatisticsImpl.setTotalRequestedVehicle(getTotalRequestedVehicle());
		vehicleStatisticsImpl.setTotalNotYetRequestedVehicle(getTotalNotYetRequestedVehicle());
		vehicleStatisticsImpl.setTotalCancelledVehicle(getTotalCancelledVehicle());
		vehicleStatisticsImpl.setTotalInspectedVehicle(getTotalInspectedVehicle());
		vehicleStatisticsImpl.setTotalResolvedVehicle(getTotalResolvedVehicle());
		vehicleStatisticsImpl.setTotalReexportedVehicle(getTotalReexportedVehicle());
		vehicleStatisticsImpl.setTotalWrongStatusVehicle(getTotalWrongStatusVehicle());
		vehicleStatisticsImpl.setTotalSafeTestSample(getTotalSafeTestSample());
		vehicleStatisticsImpl.setTotalEmissionTestSample(getTotalEmissionTestSample());
		vehicleStatisticsImpl.setTotalControlRequiredVehicle(getTotalControlRequiredVehicle());
		vehicleStatisticsImpl.setTotalCertificate(getTotalCertificate());
		vehicleStatisticsImpl.setTotalViolatedVehicle(getTotalViolatedVehicle());
		vehicleStatisticsImpl.setTotalTechnicalSpec(getTotalTechnicalSpec());
		vehicleStatisticsImpl.setProcessingState(getProcessingState());
		vehicleStatisticsImpl.setProcessingTiming(getProcessingTiming());
		vehicleStatisticsImpl.setDaysUptoDeadline(getDaysUptoDeadline());
		vehicleStatisticsImpl.setSynchdate(getSynchdate());

		vehicleStatisticsImpl.resetOriginalValues();

		return vehicleStatisticsImpl;
	}

	@Override
	public int compareTo(VehicleStatistics vehicleStatistics) {
		int value = 0;

		if (getId() < vehicleStatistics.getId()) {
			value = -1;
		}
		else if (getId() > vehicleStatistics.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VehicleStatistics)) {
			return false;
		}

		VehicleStatistics vehicleStatistics = (VehicleStatistics)obj;

		long primaryKey = vehicleStatistics.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VehicleStatisticsModelImpl vehicleStatisticsModelImpl = this;

		vehicleStatisticsModelImpl._originalRegisteredInspectionId = vehicleStatisticsModelImpl._registeredInspectionId;

		vehicleStatisticsModelImpl._setOriginalRegisteredInspectionId = false;

		vehicleStatisticsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VehicleStatistics> toCacheModel() {
		VehicleStatisticsCacheModel vehicleStatisticsCacheModel = new VehicleStatisticsCacheModel();

		vehicleStatisticsCacheModel.id = getId();

		vehicleStatisticsCacheModel.registeredInspectionId = getRegisteredInspectionId();

		vehicleStatisticsCacheModel.totalRegisteredVehicle = getTotalRegisteredVehicle();

		vehicleStatisticsCacheModel.totalRequestedVehicle = getTotalRequestedVehicle();

		vehicleStatisticsCacheModel.totalNotYetRequestedVehicle = getTotalNotYetRequestedVehicle();

		vehicleStatisticsCacheModel.totalCancelledVehicle = getTotalCancelledVehicle();

		vehicleStatisticsCacheModel.totalInspectedVehicle = getTotalInspectedVehicle();

		vehicleStatisticsCacheModel.totalResolvedVehicle = getTotalResolvedVehicle();

		vehicleStatisticsCacheModel.totalReexportedVehicle = getTotalReexportedVehicle();

		vehicleStatisticsCacheModel.totalWrongStatusVehicle = getTotalWrongStatusVehicle();

		vehicleStatisticsCacheModel.totalSafeTestSample = getTotalSafeTestSample();

		vehicleStatisticsCacheModel.totalEmissionTestSample = getTotalEmissionTestSample();

		vehicleStatisticsCacheModel.totalControlRequiredVehicle = getTotalControlRequiredVehicle();

		vehicleStatisticsCacheModel.totalCertificate = getTotalCertificate();

		vehicleStatisticsCacheModel.totalViolatedVehicle = getTotalViolatedVehicle();

		vehicleStatisticsCacheModel.totalTechnicalSpec = getTotalTechnicalSpec();

		vehicleStatisticsCacheModel.processingState = getProcessingState();

		vehicleStatisticsCacheModel.processingTiming = getProcessingTiming();

		vehicleStatisticsCacheModel.daysUptoDeadline = getDaysUptoDeadline();

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			vehicleStatisticsCacheModel.synchdate = synchdate.getTime();
		}
		else {
			vehicleStatisticsCacheModel.synchdate = Long.MIN_VALUE;
		}

		return vehicleStatisticsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", registeredInspectionId=");
		sb.append(getRegisteredInspectionId());
		sb.append(", totalRegisteredVehicle=");
		sb.append(getTotalRegisteredVehicle());
		sb.append(", totalRequestedVehicle=");
		sb.append(getTotalRequestedVehicle());
		sb.append(", totalNotYetRequestedVehicle=");
		sb.append(getTotalNotYetRequestedVehicle());
		sb.append(", totalCancelledVehicle=");
		sb.append(getTotalCancelledVehicle());
		sb.append(", totalInspectedVehicle=");
		sb.append(getTotalInspectedVehicle());
		sb.append(", totalResolvedVehicle=");
		sb.append(getTotalResolvedVehicle());
		sb.append(", totalReexportedVehicle=");
		sb.append(getTotalReexportedVehicle());
		sb.append(", totalWrongStatusVehicle=");
		sb.append(getTotalWrongStatusVehicle());
		sb.append(", totalSafeTestSample=");
		sb.append(getTotalSafeTestSample());
		sb.append(", totalEmissionTestSample=");
		sb.append(getTotalEmissionTestSample());
		sb.append(", totalControlRequiredVehicle=");
		sb.append(getTotalControlRequiredVehicle());
		sb.append(", totalCertificate=");
		sb.append(getTotalCertificate());
		sb.append(", totalViolatedVehicle=");
		sb.append(getTotalViolatedVehicle());
		sb.append(", totalTechnicalSpec=");
		sb.append(getTotalTechnicalSpec());
		sb.append(", processingState=");
		sb.append(getProcessingState());
		sb.append(", processingTiming=");
		sb.append(getProcessingTiming());
		sb.append(", daysUptoDeadline=");
		sb.append(getDaysUptoDeadline());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.VehicleStatistics");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredInspectionId</column-name><column-value><![CDATA[");
		sb.append(getRegisteredInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalRegisteredVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalRegisteredVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalRequestedVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalRequestedVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalNotYetRequestedVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalNotYetRequestedVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCancelledVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalCancelledVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalInspectedVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalInspectedVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalResolvedVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalResolvedVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalReexportedVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalReexportedVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalWrongStatusVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalWrongStatusVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalSafeTestSample</column-name><column-value><![CDATA[");
		sb.append(getTotalSafeTestSample());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalEmissionTestSample</column-name><column-value><![CDATA[");
		sb.append(getTotalEmissionTestSample());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalControlRequiredVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalControlRequiredVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCertificate</column-name><column-value><![CDATA[");
		sb.append(getTotalCertificate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalViolatedVehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalViolatedVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalTechnicalSpec</column-name><column-value><![CDATA[");
		sb.append(getTotalTechnicalSpec());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processingState</column-name><column-value><![CDATA[");
		sb.append(getProcessingState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processingTiming</column-name><column-value><![CDATA[");
		sb.append(getProcessingTiming());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>daysUptoDeadline</column-name><column-value><![CDATA[");
		sb.append(getDaysUptoDeadline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VehicleStatistics.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VehicleStatistics.class
		};
	private long _id;
	private long _registeredInspectionId;
	private long _originalRegisteredInspectionId;
	private boolean _setOriginalRegisteredInspectionId;
	private long _totalRegisteredVehicle;
	private long _totalRequestedVehicle;
	private long _totalNotYetRequestedVehicle;
	private long _totalCancelledVehicle;
	private long _totalInspectedVehicle;
	private long _totalResolvedVehicle;
	private long _totalReexportedVehicle;
	private long _totalWrongStatusVehicle;
	private long _totalSafeTestSample;
	private long _totalEmissionTestSample;
	private long _totalControlRequiredVehicle;
	private long _totalCertificate;
	private long _totalViolatedVehicle;
	private long _totalTechnicalSpec;
	private long _processingState;
	private long _processingTiming;
	private long _daysUptoDeadline;
	private Date _synchdate;
	private long _columnBitmask;
	private VehicleStatistics _escapedModel;
}