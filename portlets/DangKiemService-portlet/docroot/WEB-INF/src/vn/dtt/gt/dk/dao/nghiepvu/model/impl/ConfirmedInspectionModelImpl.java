/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspection;
import vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspectionModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspectionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ConfirmedInspection service. Represents a row in the &quot;vr_confirmedinspection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConfirmedInspectionImpl}.
 * </p>
 *
 * @author huymq
 * @see ConfirmedInspectionImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspection
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspectionModel
 * @generated
 */
@JSON(strict = true)
public class ConfirmedInspectionModelImpl extends BaseModelImpl<ConfirmedInspection>
	implements ConfirmedInspectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a confirmed inspection model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspection} interface instead.
	 */
	public static final String TABLE_NAME = "vr_confirmedinspection";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "registeredinspectionid", Types.BIGINT },
			{ "customsdeclarationid", Types.BIGINT },
			{ "confirmationcode", Types.BIGINT },
			{ "attachedfile", Types.BIGINT },
			{ "inspectiondate", Types.TIMESTAMP },
			{ "inspectionsite", Types.VARCHAR },
			{ "inspectiondistrictcode", Types.VARCHAR },
			{ "inspectionprovincecode", Types.VARCHAR },
			{ "customsregion", Types.BIGINT },
			{ "markaschangedsite", Types.BIGINT },
			{ "contactname", Types.VARCHAR },
			{ "contactphone", Types.VARCHAR },
			{ "contactemail", Types.VARCHAR },
			{ "signname", Types.VARCHAR },
			{ "signtitle", Types.VARCHAR },
			{ "signplace", Types.VARCHAR },
			{ "signdate", Types.TIMESTAMP },
			{ "remarks", Types.VARCHAR },
			{ "corporationid", Types.VARCHAR },
			{ "inspectorid", Types.BIGINT },
			{ "phieuxulyphuid", Types.BIGINT },
			{ "hosothutucid", Types.BIGINT },
			{ "datefrom", Types.TIMESTAMP },
			{ "dateto", Types.TIMESTAMP },
			{ "leader", Types.INTEGER },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_confirmedinspection (id LONG not null primary key,registeredinspectionid LONG,customsdeclarationid LONG,confirmationcode LONG,attachedfile LONG,inspectiondate DATE null,inspectionsite VARCHAR(75) null,inspectiondistrictcode VARCHAR(75) null,inspectionprovincecode VARCHAR(75) null,customsregion LONG,markaschangedsite LONG,contactname VARCHAR(75) null,contactphone VARCHAR(75) null,contactemail VARCHAR(75) null,signname VARCHAR(75) null,signtitle VARCHAR(75) null,signplace VARCHAR(75) null,signdate DATE null,remarks VARCHAR(75) null,corporationid VARCHAR(75) null,inspectorid LONG,phieuxulyphuid LONG,hosothutucid LONG,datefrom DATE null,dateto DATE null,leader INTEGER,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_confirmedinspection";
	public static final String ORDER_BY_JPQL = " ORDER BY confirmedInspection.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_confirmedinspection.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspection"),
			true);
	public static long CONFIRMATIONCODE_COLUMN_BITMASK = 1L;
	public static long CORPORATIONID_COLUMN_BITMASK = 2L;
	public static long CUSTOMSDECLARATIONID_COLUMN_BITMASK = 4L;
	public static long HOSOTHUTUCID_COLUMN_BITMASK = 8L;
	public static long INSPECTORID_COLUMN_BITMASK = 16L;
	public static long PHIEUXULYPHUID_COLUMN_BITMASK = 32L;
	public static long REGISTEREDINSPECTIONID_COLUMN_BITMASK = 64L;
	public static long ID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ConfirmedInspection toModel(ConfirmedInspectionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ConfirmedInspection model = new ConfirmedInspectionImpl();

		model.setId(soapModel.getId());
		model.setRegisteredInspectionId(soapModel.getRegisteredInspectionId());
		model.setCustomsDeclarationId(soapModel.getCustomsDeclarationId());
		model.setConfirmationCode(soapModel.getConfirmationCode());
		model.setAttachedFile(soapModel.getAttachedFile());
		model.setInspectionDate(soapModel.getInspectionDate());
		model.setInspectionSite(soapModel.getInspectionSite());
		model.setInspectionDistrictCode(soapModel.getInspectionDistrictCode());
		model.setInspectionProvincecode(soapModel.getInspectionProvincecode());
		model.setCustomsRegion(soapModel.getCustomsRegion());
		model.setMarkasChangedSite(soapModel.getMarkasChangedSite());
		model.setContactName(soapModel.getContactName());
		model.setContactPhone(soapModel.getContactPhone());
		model.setContactEmail(soapModel.getContactEmail());
		model.setSignName(soapModel.getSignName());
		model.setSignTitle(soapModel.getSignTitle());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setRemarks(soapModel.getRemarks());
		model.setCorporationId(soapModel.getCorporationId());
		model.setInspectorId(soapModel.getInspectorId());
		model.setPhieuXuLyPhuId(soapModel.getPhieuXuLyPhuId());
		model.setHoSoThuTucId(soapModel.getHoSoThuTucId());
		model.setDateFrom(soapModel.getDateFrom());
		model.setDateTo(soapModel.getDateTo());
		model.setLeader(soapModel.getLeader());
		model.setSynchdate(soapModel.getSynchdate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ConfirmedInspection> toModels(
		ConfirmedInspectionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ConfirmedInspection> models = new ArrayList<ConfirmedInspection>(soapModels.length);

		for (ConfirmedInspectionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspection"));

	public ConfirmedInspectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConfirmedInspection.class;
	}

	@Override
	public String getModelClassName() {
		return ConfirmedInspection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("registeredInspectionId", getRegisteredInspectionId());
		attributes.put("customsDeclarationId", getCustomsDeclarationId());
		attributes.put("confirmationCode", getConfirmationCode());
		attributes.put("attachedFile", getAttachedFile());
		attributes.put("inspectionDate", getInspectionDate());
		attributes.put("inspectionSite", getInspectionSite());
		attributes.put("inspectionDistrictCode", getInspectionDistrictCode());
		attributes.put("inspectionProvincecode", getInspectionProvincecode());
		attributes.put("customsRegion", getCustomsRegion());
		attributes.put("markasChangedSite", getMarkasChangedSite());
		attributes.put("contactName", getContactName());
		attributes.put("contactPhone", getContactPhone());
		attributes.put("contactEmail", getContactEmail());
		attributes.put("signName", getSignName());
		attributes.put("signTitle", getSignTitle());
		attributes.put("signPlace", getSignPlace());
		attributes.put("signDate", getSignDate());
		attributes.put("remarks", getRemarks());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("phieuXuLyPhuId", getPhieuXuLyPhuId());
		attributes.put("hoSoThuTucId", getHoSoThuTucId());
		attributes.put("dateFrom", getDateFrom());
		attributes.put("dateTo", getDateTo());
		attributes.put("leader", getLeader());
		attributes.put("synchdate", getSynchdate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long registeredInspectionId = (Long)attributes.get(
				"registeredInspectionId");

		if (registeredInspectionId != null) {
			setRegisteredInspectionId(registeredInspectionId);
		}

		Long customsDeclarationId = (Long)attributes.get("customsDeclarationId");

		if (customsDeclarationId != null) {
			setCustomsDeclarationId(customsDeclarationId);
		}

		Long confirmationCode = (Long)attributes.get("confirmationCode");

		if (confirmationCode != null) {
			setConfirmationCode(confirmationCode);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}

		Date inspectionDate = (Date)attributes.get("inspectionDate");

		if (inspectionDate != null) {
			setInspectionDate(inspectionDate);
		}

		String inspectionSite = (String)attributes.get("inspectionSite");

		if (inspectionSite != null) {
			setInspectionSite(inspectionSite);
		}

		String inspectionDistrictCode = (String)attributes.get(
				"inspectionDistrictCode");

		if (inspectionDistrictCode != null) {
			setInspectionDistrictCode(inspectionDistrictCode);
		}

		String inspectionProvincecode = (String)attributes.get(
				"inspectionProvincecode");

		if (inspectionProvincecode != null) {
			setInspectionProvincecode(inspectionProvincecode);
		}

		Long customsRegion = (Long)attributes.get("customsRegion");

		if (customsRegion != null) {
			setCustomsRegion(customsRegion);
		}

		Long markasChangedSite = (Long)attributes.get("markasChangedSite");

		if (markasChangedSite != null) {
			setMarkasChangedSite(markasChangedSite);
		}

		String contactName = (String)attributes.get("contactName");

		if (contactName != null) {
			setContactName(contactName);
		}

		String contactPhone = (String)attributes.get("contactPhone");

		if (contactPhone != null) {
			setContactPhone(contactPhone);
		}

		String contactEmail = (String)attributes.get("contactEmail");

		if (contactEmail != null) {
			setContactEmail(contactEmail);
		}

		String signName = (String)attributes.get("signName");

		if (signName != null) {
			setSignName(signName);
		}

		String signTitle = (String)attributes.get("signTitle");

		if (signTitle != null) {
			setSignTitle(signTitle);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		Long phieuXuLyPhuId = (Long)attributes.get("phieuXuLyPhuId");

		if (phieuXuLyPhuId != null) {
			setPhieuXuLyPhuId(phieuXuLyPhuId);
		}

		Long hoSoThuTucId = (Long)attributes.get("hoSoThuTucId");

		if (hoSoThuTucId != null) {
			setHoSoThuTucId(hoSoThuTucId);
		}

		Date dateFrom = (Date)attributes.get("dateFrom");

		if (dateFrom != null) {
			setDateFrom(dateFrom);
		}

		Date dateTo = (Date)attributes.get("dateTo");

		if (dateTo != null) {
			setDateTo(dateTo);
		}

		Integer leader = (Integer)attributes.get("leader");

		if (leader != null) {
			setLeader(leader);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getRegisteredInspectionId() {
		return _registeredInspectionId;
	}

	@Override
	public void setRegisteredInspectionId(long registeredInspectionId) {
		_columnBitmask |= REGISTEREDINSPECTIONID_COLUMN_BITMASK;

		if (!_setOriginalRegisteredInspectionId) {
			_setOriginalRegisteredInspectionId = true;

			_originalRegisteredInspectionId = _registeredInspectionId;
		}

		_registeredInspectionId = registeredInspectionId;
	}

	public long getOriginalRegisteredInspectionId() {
		return _originalRegisteredInspectionId;
	}

	@JSON
	@Override
	public long getCustomsDeclarationId() {
		return _customsDeclarationId;
	}

	@Override
	public void setCustomsDeclarationId(long customsDeclarationId) {
		_columnBitmask |= CUSTOMSDECLARATIONID_COLUMN_BITMASK;

		if (!_setOriginalCustomsDeclarationId) {
			_setOriginalCustomsDeclarationId = true;

			_originalCustomsDeclarationId = _customsDeclarationId;
		}

		_customsDeclarationId = customsDeclarationId;
	}

	public long getOriginalCustomsDeclarationId() {
		return _originalCustomsDeclarationId;
	}

	@JSON
	@Override
	public long getConfirmationCode() {
		return _confirmationCode;
	}

	@Override
	public void setConfirmationCode(long confirmationCode) {
		_columnBitmask |= CONFIRMATIONCODE_COLUMN_BITMASK;

		if (!_setOriginalConfirmationCode) {
			_setOriginalConfirmationCode = true;

			_originalConfirmationCode = _confirmationCode;
		}

		_confirmationCode = confirmationCode;
	}

	public long getOriginalConfirmationCode() {
		return _originalConfirmationCode;
	}

	@JSON
	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	@JSON
	@Override
	public Date getInspectionDate() {
		return _inspectionDate;
	}

	@Override
	public void setInspectionDate(Date inspectionDate) {
		_inspectionDate = inspectionDate;
	}

	@JSON
	@Override
	public String getInspectionSite() {
		if (_inspectionSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionSite;
		}
	}

	@Override
	public void setInspectionSite(String inspectionSite) {
		_inspectionSite = inspectionSite;
	}

	@JSON
	@Override
	public String getInspectionDistrictCode() {
		if (_inspectionDistrictCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionDistrictCode;
		}
	}

	@Override
	public void setInspectionDistrictCode(String inspectionDistrictCode) {
		_inspectionDistrictCode = inspectionDistrictCode;
	}

	@JSON
	@Override
	public String getInspectionProvincecode() {
		if (_inspectionProvincecode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionProvincecode;
		}
	}

	@Override
	public void setInspectionProvincecode(String inspectionProvincecode) {
		_inspectionProvincecode = inspectionProvincecode;
	}

	@JSON
	@Override
	public long getCustomsRegion() {
		return _customsRegion;
	}

	@Override
	public void setCustomsRegion(long customsRegion) {
		_customsRegion = customsRegion;
	}

	@JSON
	@Override
	public long getMarkasChangedSite() {
		return _markasChangedSite;
	}

	@Override
	public void setMarkasChangedSite(long markasChangedSite) {
		_markasChangedSite = markasChangedSite;
	}

	@JSON
	@Override
	public String getContactName() {
		if (_contactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactName;
		}
	}

	@Override
	public void setContactName(String contactName) {
		_contactName = contactName;
	}

	@JSON
	@Override
	public String getContactPhone() {
		if (_contactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactPhone;
		}
	}

	@Override
	public void setContactPhone(String contactPhone) {
		_contactPhone = contactPhone;
	}

	@JSON
	@Override
	public String getContactEmail() {
		if (_contactEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactEmail;
		}
	}

	@Override
	public void setContactEmail(String contactEmail) {
		_contactEmail = contactEmail;
	}

	@JSON
	@Override
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	@Override
	public void setSignName(String signName) {
		_signName = signName;
	}

	@JSON
	@Override
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	@Override
	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@JSON
	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (_originalCorporationId == null) {
			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public String getOriginalCorporationId() {
		return GetterUtil.getString(_originalCorporationId);
	}

	@JSON
	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_columnBitmask |= INSPECTORID_COLUMN_BITMASK;

		if (!_setOriginalInspectorId) {
			_setOriginalInspectorId = true;

			_originalInspectorId = _inspectorId;
		}

		_inspectorId = inspectorId;
	}

	public long getOriginalInspectorId() {
		return _originalInspectorId;
	}

	@JSON
	@Override
	public long getPhieuXuLyPhuId() {
		return _phieuXuLyPhuId;
	}

	@Override
	public void setPhieuXuLyPhuId(long phieuXuLyPhuId) {
		_columnBitmask |= PHIEUXULYPHUID_COLUMN_BITMASK;

		if (!_setOriginalPhieuXuLyPhuId) {
			_setOriginalPhieuXuLyPhuId = true;

			_originalPhieuXuLyPhuId = _phieuXuLyPhuId;
		}

		_phieuXuLyPhuId = phieuXuLyPhuId;
	}

	public long getOriginalPhieuXuLyPhuId() {
		return _originalPhieuXuLyPhuId;
	}

	@JSON
	@Override
	public long getHoSoThuTucId() {
		return _hoSoThuTucId;
	}

	@Override
	public void setHoSoThuTucId(long hoSoThuTucId) {
		_columnBitmask |= HOSOTHUTUCID_COLUMN_BITMASK;

		if (!_setOriginalHoSoThuTucId) {
			_setOriginalHoSoThuTucId = true;

			_originalHoSoThuTucId = _hoSoThuTucId;
		}

		_hoSoThuTucId = hoSoThuTucId;
	}

	public long getOriginalHoSoThuTucId() {
		return _originalHoSoThuTucId;
	}

	@JSON
	@Override
	public Date getDateFrom() {
		return _dateFrom;
	}

	@Override
	public void setDateFrom(Date dateFrom) {
		_dateFrom = dateFrom;
	}

	@JSON
	@Override
	public Date getDateTo() {
		return _dateTo;
	}

	@Override
	public void setDateTo(Date dateTo) {
		_dateTo = dateTo;
	}

	@JSON
	@Override
	public int getLeader() {
		return _leader;
	}

	@Override
	public void setLeader(int leader) {
		_leader = leader;
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ConfirmedInspection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConfirmedInspection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConfirmedInspection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConfirmedInspectionImpl confirmedInspectionImpl = new ConfirmedInspectionImpl();

		confirmedInspectionImpl.setId(getId());
		confirmedInspectionImpl.setRegisteredInspectionId(getRegisteredInspectionId());
		confirmedInspectionImpl.setCustomsDeclarationId(getCustomsDeclarationId());
		confirmedInspectionImpl.setConfirmationCode(getConfirmationCode());
		confirmedInspectionImpl.setAttachedFile(getAttachedFile());
		confirmedInspectionImpl.setInspectionDate(getInspectionDate());
		confirmedInspectionImpl.setInspectionSite(getInspectionSite());
		confirmedInspectionImpl.setInspectionDistrictCode(getInspectionDistrictCode());
		confirmedInspectionImpl.setInspectionProvincecode(getInspectionProvincecode());
		confirmedInspectionImpl.setCustomsRegion(getCustomsRegion());
		confirmedInspectionImpl.setMarkasChangedSite(getMarkasChangedSite());
		confirmedInspectionImpl.setContactName(getContactName());
		confirmedInspectionImpl.setContactPhone(getContactPhone());
		confirmedInspectionImpl.setContactEmail(getContactEmail());
		confirmedInspectionImpl.setSignName(getSignName());
		confirmedInspectionImpl.setSignTitle(getSignTitle());
		confirmedInspectionImpl.setSignPlace(getSignPlace());
		confirmedInspectionImpl.setSignDate(getSignDate());
		confirmedInspectionImpl.setRemarks(getRemarks());
		confirmedInspectionImpl.setCorporationId(getCorporationId());
		confirmedInspectionImpl.setInspectorId(getInspectorId());
		confirmedInspectionImpl.setPhieuXuLyPhuId(getPhieuXuLyPhuId());
		confirmedInspectionImpl.setHoSoThuTucId(getHoSoThuTucId());
		confirmedInspectionImpl.setDateFrom(getDateFrom());
		confirmedInspectionImpl.setDateTo(getDateTo());
		confirmedInspectionImpl.setLeader(getLeader());
		confirmedInspectionImpl.setSynchdate(getSynchdate());

		confirmedInspectionImpl.resetOriginalValues();

		return confirmedInspectionImpl;
	}

	@Override
	public int compareTo(ConfirmedInspection confirmedInspection) {
		int value = 0;

		if (getId() < confirmedInspection.getId()) {
			value = -1;
		}
		else if (getId() > confirmedInspection.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConfirmedInspection)) {
			return false;
		}

		ConfirmedInspection confirmedInspection = (ConfirmedInspection)obj;

		long primaryKey = confirmedInspection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConfirmedInspectionModelImpl confirmedInspectionModelImpl = this;

		confirmedInspectionModelImpl._originalRegisteredInspectionId = confirmedInspectionModelImpl._registeredInspectionId;

		confirmedInspectionModelImpl._setOriginalRegisteredInspectionId = false;

		confirmedInspectionModelImpl._originalCustomsDeclarationId = confirmedInspectionModelImpl._customsDeclarationId;

		confirmedInspectionModelImpl._setOriginalCustomsDeclarationId = false;

		confirmedInspectionModelImpl._originalConfirmationCode = confirmedInspectionModelImpl._confirmationCode;

		confirmedInspectionModelImpl._setOriginalConfirmationCode = false;

		confirmedInspectionModelImpl._originalCorporationId = confirmedInspectionModelImpl._corporationId;

		confirmedInspectionModelImpl._originalInspectorId = confirmedInspectionModelImpl._inspectorId;

		confirmedInspectionModelImpl._setOriginalInspectorId = false;

		confirmedInspectionModelImpl._originalPhieuXuLyPhuId = confirmedInspectionModelImpl._phieuXuLyPhuId;

		confirmedInspectionModelImpl._setOriginalPhieuXuLyPhuId = false;

		confirmedInspectionModelImpl._originalHoSoThuTucId = confirmedInspectionModelImpl._hoSoThuTucId;

		confirmedInspectionModelImpl._setOriginalHoSoThuTucId = false;

		confirmedInspectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ConfirmedInspection> toCacheModel() {
		ConfirmedInspectionCacheModel confirmedInspectionCacheModel = new ConfirmedInspectionCacheModel();

		confirmedInspectionCacheModel.id = getId();

		confirmedInspectionCacheModel.registeredInspectionId = getRegisteredInspectionId();

		confirmedInspectionCacheModel.customsDeclarationId = getCustomsDeclarationId();

		confirmedInspectionCacheModel.confirmationCode = getConfirmationCode();

		confirmedInspectionCacheModel.attachedFile = getAttachedFile();

		Date inspectionDate = getInspectionDate();

		if (inspectionDate != null) {
			confirmedInspectionCacheModel.inspectionDate = inspectionDate.getTime();
		}
		else {
			confirmedInspectionCacheModel.inspectionDate = Long.MIN_VALUE;
		}

		confirmedInspectionCacheModel.inspectionSite = getInspectionSite();

		String inspectionSite = confirmedInspectionCacheModel.inspectionSite;

		if ((inspectionSite != null) && (inspectionSite.length() == 0)) {
			confirmedInspectionCacheModel.inspectionSite = null;
		}

		confirmedInspectionCacheModel.inspectionDistrictCode = getInspectionDistrictCode();

		String inspectionDistrictCode = confirmedInspectionCacheModel.inspectionDistrictCode;

		if ((inspectionDistrictCode != null) &&
				(inspectionDistrictCode.length() == 0)) {
			confirmedInspectionCacheModel.inspectionDistrictCode = null;
		}

		confirmedInspectionCacheModel.inspectionProvincecode = getInspectionProvincecode();

		String inspectionProvincecode = confirmedInspectionCacheModel.inspectionProvincecode;

		if ((inspectionProvincecode != null) &&
				(inspectionProvincecode.length() == 0)) {
			confirmedInspectionCacheModel.inspectionProvincecode = null;
		}

		confirmedInspectionCacheModel.customsRegion = getCustomsRegion();

		confirmedInspectionCacheModel.markasChangedSite = getMarkasChangedSite();

		confirmedInspectionCacheModel.contactName = getContactName();

		String contactName = confirmedInspectionCacheModel.contactName;

		if ((contactName != null) && (contactName.length() == 0)) {
			confirmedInspectionCacheModel.contactName = null;
		}

		confirmedInspectionCacheModel.contactPhone = getContactPhone();

		String contactPhone = confirmedInspectionCacheModel.contactPhone;

		if ((contactPhone != null) && (contactPhone.length() == 0)) {
			confirmedInspectionCacheModel.contactPhone = null;
		}

		confirmedInspectionCacheModel.contactEmail = getContactEmail();

		String contactEmail = confirmedInspectionCacheModel.contactEmail;

		if ((contactEmail != null) && (contactEmail.length() == 0)) {
			confirmedInspectionCacheModel.contactEmail = null;
		}

		confirmedInspectionCacheModel.signName = getSignName();

		String signName = confirmedInspectionCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			confirmedInspectionCacheModel.signName = null;
		}

		confirmedInspectionCacheModel.signTitle = getSignTitle();

		String signTitle = confirmedInspectionCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			confirmedInspectionCacheModel.signTitle = null;
		}

		confirmedInspectionCacheModel.signPlace = getSignPlace();

		String signPlace = confirmedInspectionCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			confirmedInspectionCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			confirmedInspectionCacheModel.signDate = signDate.getTime();
		}
		else {
			confirmedInspectionCacheModel.signDate = Long.MIN_VALUE;
		}

		confirmedInspectionCacheModel.remarks = getRemarks();

		String remarks = confirmedInspectionCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			confirmedInspectionCacheModel.remarks = null;
		}

		confirmedInspectionCacheModel.corporationId = getCorporationId();

		String corporationId = confirmedInspectionCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			confirmedInspectionCacheModel.corporationId = null;
		}

		confirmedInspectionCacheModel.inspectorId = getInspectorId();

		confirmedInspectionCacheModel.phieuXuLyPhuId = getPhieuXuLyPhuId();

		confirmedInspectionCacheModel.hoSoThuTucId = getHoSoThuTucId();

		Date dateFrom = getDateFrom();

		if (dateFrom != null) {
			confirmedInspectionCacheModel.dateFrom = dateFrom.getTime();
		}
		else {
			confirmedInspectionCacheModel.dateFrom = Long.MIN_VALUE;
		}

		Date dateTo = getDateTo();

		if (dateTo != null) {
			confirmedInspectionCacheModel.dateTo = dateTo.getTime();
		}
		else {
			confirmedInspectionCacheModel.dateTo = Long.MIN_VALUE;
		}

		confirmedInspectionCacheModel.leader = getLeader();

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			confirmedInspectionCacheModel.synchdate = synchdate.getTime();
		}
		else {
			confirmedInspectionCacheModel.synchdate = Long.MIN_VALUE;
		}

		return confirmedInspectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(55);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", registeredInspectionId=");
		sb.append(getRegisteredInspectionId());
		sb.append(", customsDeclarationId=");
		sb.append(getCustomsDeclarationId());
		sb.append(", confirmationCode=");
		sb.append(getConfirmationCode());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append(", inspectionDate=");
		sb.append(getInspectionDate());
		sb.append(", inspectionSite=");
		sb.append(getInspectionSite());
		sb.append(", inspectionDistrictCode=");
		sb.append(getInspectionDistrictCode());
		sb.append(", inspectionProvincecode=");
		sb.append(getInspectionProvincecode());
		sb.append(", customsRegion=");
		sb.append(getCustomsRegion());
		sb.append(", markasChangedSite=");
		sb.append(getMarkasChangedSite());
		sb.append(", contactName=");
		sb.append(getContactName());
		sb.append(", contactPhone=");
		sb.append(getContactPhone());
		sb.append(", contactEmail=");
		sb.append(getContactEmail());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", phieuXuLyPhuId=");
		sb.append(getPhieuXuLyPhuId());
		sb.append(", hoSoThuTucId=");
		sb.append(getHoSoThuTucId());
		sb.append(", dateFrom=");
		sb.append(getDateFrom());
		sb.append(", dateTo=");
		sb.append(getDateTo());
		sb.append(", leader=");
		sb.append(getLeader());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(85);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.ConfirmedInspection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredInspectionId</column-name><column-value><![CDATA[");
		sb.append(getRegisteredInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customsDeclarationId</column-name><column-value><![CDATA[");
		sb.append(getCustomsDeclarationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmationCode</column-name><column-value><![CDATA[");
		sb.append(getConfirmationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionSite</column-name><column-value><![CDATA[");
		sb.append(getInspectionSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDistrictCode</column-name><column-value><![CDATA[");
		sb.append(getInspectionDistrictCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionProvincecode</column-name><column-value><![CDATA[");
		sb.append(getInspectionProvincecode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customsRegion</column-name><column-value><![CDATA[");
		sb.append(getCustomsRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markasChangedSite</column-name><column-value><![CDATA[");
		sb.append(getMarkasChangedSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactName</column-name><column-value><![CDATA[");
		sb.append(getContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPhone</column-name><column-value><![CDATA[");
		sb.append(getContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactEmail</column-name><column-value><![CDATA[");
		sb.append(getContactEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phieuXuLyPhuId</column-name><column-value><![CDATA[");
		sb.append(getPhieuXuLyPhuId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoSoThuTucId</column-name><column-value><![CDATA[");
		sb.append(getHoSoThuTucId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateFrom</column-name><column-value><![CDATA[");
		sb.append(getDateFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateTo</column-name><column-value><![CDATA[");
		sb.append(getDateTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leader</column-name><column-value><![CDATA[");
		sb.append(getLeader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ConfirmedInspection.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ConfirmedInspection.class
		};
	private long _id;
	private long _registeredInspectionId;
	private long _originalRegisteredInspectionId;
	private boolean _setOriginalRegisteredInspectionId;
	private long _customsDeclarationId;
	private long _originalCustomsDeclarationId;
	private boolean _setOriginalCustomsDeclarationId;
	private long _confirmationCode;
	private long _originalConfirmationCode;
	private boolean _setOriginalConfirmationCode;
	private long _attachedFile;
	private Date _inspectionDate;
	private String _inspectionSite;
	private String _inspectionDistrictCode;
	private String _inspectionProvincecode;
	private long _customsRegion;
	private long _markasChangedSite;
	private String _contactName;
	private String _contactPhone;
	private String _contactEmail;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private Date _signDate;
	private String _remarks;
	private String _corporationId;
	private String _originalCorporationId;
	private long _inspectorId;
	private long _originalInspectorId;
	private boolean _setOriginalInspectorId;
	private long _phieuXuLyPhuId;
	private long _originalPhieuXuLyPhuId;
	private boolean _setOriginalPhieuXuLyPhuId;
	private long _hoSoThuTucId;
	private long _originalHoSoThuTucId;
	private boolean _setOriginalHoSoThuTucId;
	private Date _dateFrom;
	private Date _dateTo;
	private int _leader;
	private Date _synchdate;
	private long _columnBitmask;
	private ConfirmedInspection _escapedModel;
}