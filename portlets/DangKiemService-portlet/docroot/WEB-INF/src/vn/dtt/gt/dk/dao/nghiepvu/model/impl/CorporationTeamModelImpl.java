/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeam;
import vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeamModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CorporationTeam service. Represents a row in the &quot;vr_corporation_team&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CorporationTeamImpl}.
 * </p>
 *
 * @author huymq
 * @see CorporationTeamImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeam
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeamModel
 * @generated
 */
public class CorporationTeamModelImpl extends BaseModelImpl<CorporationTeam>
	implements CorporationTeamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a corporation team model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeam} interface instead.
	 */
	public static final String TABLE_NAME = "vr_corporation_team";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "corporationid", Types.VARCHAR },
			{ "TEAMNAME", Types.VARCHAR },
			{ "markupdelete", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_corporation_team (id LONG not null primary key,corporationid VARCHAR(75) null,TEAMNAME VARCHAR(75) null,markupdelete INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table vr_corporation_team";
	public static final String ORDER_BY_JPQL = " ORDER BY corporationTeam.markUpDelete ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_corporation_team.markupdelete ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeam"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeam"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeam"),
			true);
	public static long CORPORATIONID_COLUMN_BITMASK = 1L;
	public static long MARKUPDELETE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeam"));

	public CorporationTeamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CorporationTeam.class;
	}

	@Override
	public String getModelClassName() {
		return CorporationTeam.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("corporationId", getCorporationId());
		attributes.put("teamName", getTeamName());
		attributes.put("markUpDelete", getMarkUpDelete());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		String teamName = (String)attributes.get("teamName");

		if (teamName != null) {
			setTeamName(teamName);
		}

		Integer markUpDelete = (Integer)attributes.get("markUpDelete");

		if (markUpDelete != null) {
			setMarkUpDelete(markUpDelete);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_columnBitmask |= CORPORATIONID_COLUMN_BITMASK;

		if (_originalCorporationId == null) {
			_originalCorporationId = _corporationId;
		}

		_corporationId = corporationId;
	}

	public String getOriginalCorporationId() {
		return GetterUtil.getString(_originalCorporationId);
	}

	@Override
	public String getTeamName() {
		if (_teamName == null) {
			return StringPool.BLANK;
		}
		else {
			return _teamName;
		}
	}

	@Override
	public void setTeamName(String teamName) {
		_teamName = teamName;
	}

	@Override
	public int getMarkUpDelete() {
		return _markUpDelete;
	}

	@Override
	public void setMarkUpDelete(int markUpDelete) {
		_columnBitmask = -1L;

		if (!_setOriginalMarkUpDelete) {
			_setOriginalMarkUpDelete = true;

			_originalMarkUpDelete = _markUpDelete;
		}

		_markUpDelete = markUpDelete;
	}

	public int getOriginalMarkUpDelete() {
		return _originalMarkUpDelete;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CorporationTeam.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CorporationTeam toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CorporationTeam)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CorporationTeamImpl corporationTeamImpl = new CorporationTeamImpl();

		corporationTeamImpl.setId(getId());
		corporationTeamImpl.setCorporationId(getCorporationId());
		corporationTeamImpl.setTeamName(getTeamName());
		corporationTeamImpl.setMarkUpDelete(getMarkUpDelete());

		corporationTeamImpl.resetOriginalValues();

		return corporationTeamImpl;
	}

	@Override
	public int compareTo(CorporationTeam corporationTeam) {
		int value = 0;

		if (getMarkUpDelete() < corporationTeam.getMarkUpDelete()) {
			value = -1;
		}
		else if (getMarkUpDelete() > corporationTeam.getMarkUpDelete()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CorporationTeam)) {
			return false;
		}

		CorporationTeam corporationTeam = (CorporationTeam)obj;

		long primaryKey = corporationTeam.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CorporationTeamModelImpl corporationTeamModelImpl = this;

		corporationTeamModelImpl._originalCorporationId = corporationTeamModelImpl._corporationId;

		corporationTeamModelImpl._originalMarkUpDelete = corporationTeamModelImpl._markUpDelete;

		corporationTeamModelImpl._setOriginalMarkUpDelete = false;

		corporationTeamModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CorporationTeam> toCacheModel() {
		CorporationTeamCacheModel corporationTeamCacheModel = new CorporationTeamCacheModel();

		corporationTeamCacheModel.id = getId();

		corporationTeamCacheModel.corporationId = getCorporationId();

		String corporationId = corporationTeamCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			corporationTeamCacheModel.corporationId = null;
		}

		corporationTeamCacheModel.teamName = getTeamName();

		String teamName = corporationTeamCacheModel.teamName;

		if ((teamName != null) && (teamName.length() == 0)) {
			corporationTeamCacheModel.teamName = null;
		}

		corporationTeamCacheModel.markUpDelete = getMarkUpDelete();

		return corporationTeamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", teamName=");
		sb.append(getTeamName());
		sb.append(", markUpDelete=");
		sb.append(getMarkUpDelete());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.CorporationTeam");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teamName</column-name><column-value><![CDATA[");
		sb.append(getTeamName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markUpDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkUpDelete());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CorporationTeam.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CorporationTeam.class
		};
	private long _id;
	private String _corporationId;
	private String _originalCorporationId;
	private String _teamName;
	private int _markUpDelete;
	private int _originalMarkUpDelete;
	private boolean _setOriginalMarkUpDelete;
	private long _columnBitmask;
	private CorporationTeam _escapedModel;
}