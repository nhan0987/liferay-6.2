/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.common.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.common.model.DmMetaData;
import vn.dtt.gt.dk.dao.common.model.DmMetaDataModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DmMetaData service. Represents a row in the &quot;dm_metadata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.common.model.DmMetaDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmMetaDataImpl}.
 * </p>
 *
 * @author win_64
 * @see DmMetaDataImpl
 * @see vn.dtt.gt.dk.dao.common.model.DmMetaData
 * @see vn.dtt.gt.dk.dao.common.model.DmMetaDataModel
 * @generated
 */
public class DmMetaDataModelImpl extends BaseModelImpl<DmMetaData>
	implements DmMetaDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm meta data model instance should use the {@link vn.dtt.gt.dk.dao.common.model.DmMetaData} interface instead.
	 */
	public static final String TABLE_NAME = "dm_metadata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "entity", Types.VARCHAR },
			{ "fieldcode", Types.VARCHAR },
			{ "fieldname", Types.VARCHAR },
			{ "fieldaltername", Types.VARCHAR },
			{ "fielddescription", Types.VARCHAR },
			{ "fielddataset", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table dm_metadata (id LONG not null primary key,entity VARCHAR(75) null,fieldcode VARCHAR(75) null,fieldname VARCHAR(75) null,fieldaltername VARCHAR(75) null,fielddescription VARCHAR(75) null,fielddataset VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table dm_metadata";
	public static final String ORDER_BY_JPQL = " ORDER BY dmMetaData.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dm_metadata.id ASC";
	public static final String DATA_SOURCE = "tthcDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.common.model.DmMetaData"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.common.model.DmMetaData"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.common.model.DmMetaData"));

	public DmMetaDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DmMetaData.class;
	}

	@Override
	public String getModelClassName() {
		return DmMetaData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("Entity", getEntity());
		attributes.put("FieldCode", getFieldCode());
		attributes.put("FieldName", getFieldName());
		attributes.put("FieldAlterName", getFieldAlterName());
		attributes.put("FieldDescription", getFieldDescription());
		attributes.put("FieldDataSet", getFieldDataSet());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		String Entity = (String)attributes.get("Entity");

		if (Entity != null) {
			setEntity(Entity);
		}

		String FieldCode = (String)attributes.get("FieldCode");

		if (FieldCode != null) {
			setFieldCode(FieldCode);
		}

		String FieldName = (String)attributes.get("FieldName");

		if (FieldName != null) {
			setFieldName(FieldName);
		}

		String FieldAlterName = (String)attributes.get("FieldAlterName");

		if (FieldAlterName != null) {
			setFieldAlterName(FieldAlterName);
		}

		String FieldDescription = (String)attributes.get("FieldDescription");

		if (FieldDescription != null) {
			setFieldDescription(FieldDescription);
		}

		String FieldDataSet = (String)attributes.get("FieldDataSet");

		if (FieldDataSet != null) {
			setFieldDataSet(FieldDataSet);
		}
	}

	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@Override
	public String getEntity() {
		if (_Entity == null) {
			return StringPool.BLANK;
		}
		else {
			return _Entity;
		}
	}

	@Override
	public void setEntity(String Entity) {
		_Entity = Entity;
	}

	@Override
	public String getFieldCode() {
		if (_FieldCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _FieldCode;
		}
	}

	@Override
	public void setFieldCode(String FieldCode) {
		_FieldCode = FieldCode;
	}

	@Override
	public String getFieldName() {
		if (_FieldName == null) {
			return StringPool.BLANK;
		}
		else {
			return _FieldName;
		}
	}

	@Override
	public void setFieldName(String FieldName) {
		_FieldName = FieldName;
	}

	@Override
	public String getFieldAlterName() {
		if (_FieldAlterName == null) {
			return StringPool.BLANK;
		}
		else {
			return _FieldAlterName;
		}
	}

	@Override
	public void setFieldAlterName(String FieldAlterName) {
		_FieldAlterName = FieldAlterName;
	}

	@Override
	public String getFieldDescription() {
		if (_FieldDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _FieldDescription;
		}
	}

	@Override
	public void setFieldDescription(String FieldDescription) {
		_FieldDescription = FieldDescription;
	}

	@Override
	public String getFieldDataSet() {
		if (_FieldDataSet == null) {
			return StringPool.BLANK;
		}
		else {
			return _FieldDataSet;
		}
	}

	@Override
	public void setFieldDataSet(String FieldDataSet) {
		_FieldDataSet = FieldDataSet;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DmMetaData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DmMetaData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DmMetaData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DmMetaDataImpl dmMetaDataImpl = new DmMetaDataImpl();

		dmMetaDataImpl.setId(getId());
		dmMetaDataImpl.setEntity(getEntity());
		dmMetaDataImpl.setFieldCode(getFieldCode());
		dmMetaDataImpl.setFieldName(getFieldName());
		dmMetaDataImpl.setFieldAlterName(getFieldAlterName());
		dmMetaDataImpl.setFieldDescription(getFieldDescription());
		dmMetaDataImpl.setFieldDataSet(getFieldDataSet());

		dmMetaDataImpl.resetOriginalValues();

		return dmMetaDataImpl;
	}

	@Override
	public int compareTo(DmMetaData dmMetaData) {
		int value = 0;

		if (getId() < dmMetaData.getId()) {
			value = -1;
		}
		else if (getId() > dmMetaData.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DmMetaData)) {
			return false;
		}

		DmMetaData dmMetaData = (DmMetaData)obj;

		long primaryKey = dmMetaData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DmMetaData> toCacheModel() {
		DmMetaDataCacheModel dmMetaDataCacheModel = new DmMetaDataCacheModel();

		dmMetaDataCacheModel.Id = getId();

		dmMetaDataCacheModel.Entity = getEntity();

		String Entity = dmMetaDataCacheModel.Entity;

		if ((Entity != null) && (Entity.length() == 0)) {
			dmMetaDataCacheModel.Entity = null;
		}

		dmMetaDataCacheModel.FieldCode = getFieldCode();

		String FieldCode = dmMetaDataCacheModel.FieldCode;

		if ((FieldCode != null) && (FieldCode.length() == 0)) {
			dmMetaDataCacheModel.FieldCode = null;
		}

		dmMetaDataCacheModel.FieldName = getFieldName();

		String FieldName = dmMetaDataCacheModel.FieldName;

		if ((FieldName != null) && (FieldName.length() == 0)) {
			dmMetaDataCacheModel.FieldName = null;
		}

		dmMetaDataCacheModel.FieldAlterName = getFieldAlterName();

		String FieldAlterName = dmMetaDataCacheModel.FieldAlterName;

		if ((FieldAlterName != null) && (FieldAlterName.length() == 0)) {
			dmMetaDataCacheModel.FieldAlterName = null;
		}

		dmMetaDataCacheModel.FieldDescription = getFieldDescription();

		String FieldDescription = dmMetaDataCacheModel.FieldDescription;

		if ((FieldDescription != null) && (FieldDescription.length() == 0)) {
			dmMetaDataCacheModel.FieldDescription = null;
		}

		dmMetaDataCacheModel.FieldDataSet = getFieldDataSet();

		String FieldDataSet = dmMetaDataCacheModel.FieldDataSet;

		if ((FieldDataSet != null) && (FieldDataSet.length() == 0)) {
			dmMetaDataCacheModel.FieldDataSet = null;
		}

		return dmMetaDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", Entity=");
		sb.append(getEntity());
		sb.append(", FieldCode=");
		sb.append(getFieldCode());
		sb.append(", FieldName=");
		sb.append(getFieldName());
		sb.append(", FieldAlterName=");
		sb.append(getFieldAlterName());
		sb.append(", FieldDescription=");
		sb.append(getFieldDescription());
		sb.append(", FieldDataSet=");
		sb.append(getFieldDataSet());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.common.model.DmMetaData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Entity</column-name><column-value><![CDATA[");
		sb.append(getEntity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FieldCode</column-name><column-value><![CDATA[");
		sb.append(getFieldCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FieldName</column-name><column-value><![CDATA[");
		sb.append(getFieldName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FieldAlterName</column-name><column-value><![CDATA[");
		sb.append(getFieldAlterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FieldDescription</column-name><column-value><![CDATA[");
		sb.append(getFieldDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FieldDataSet</column-name><column-value><![CDATA[");
		sb.append(getFieldDataSet());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmMetaData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DmMetaData.class
		};
	private long _Id;
	private String _Entity;
	private String _FieldCode;
	private String _FieldName;
	private String _FieldAlterName;
	private String _FieldDescription;
	private String _FieldDataSet;
	private DmMetaData _escapedModel;
}