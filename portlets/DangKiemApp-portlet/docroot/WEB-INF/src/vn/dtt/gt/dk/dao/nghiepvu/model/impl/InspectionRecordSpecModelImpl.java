/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpec;
import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpecModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpecSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InspectionRecordSpec service. Represents a row in the &quot;vr_inspectionrecordspec&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpecModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InspectionRecordSpecImpl}.
 * </p>
 *
 * @author win_64
 * @see InspectionRecordSpecImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpec
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpecModel
 * @generated
 */
@JSON(strict = true)
public class InspectionRecordSpecModelImpl extends BaseModelImpl<InspectionRecordSpec>
	implements InspectionRecordSpecModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a inspection record spec model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpec} interface instead.
	 */
	public static final String TABLE_NAME = "vr_inspectionrecordspec";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "inspectionrecordid", Types.BIGINT },
			{ "specificationcode", Types.VARCHAR },
			{ "specificationname", Types.VARCHAR },
			{ "specificationvalue", Types.VARCHAR },
			{ "evaluationresult", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_inspectionrecordspec (id LONG not null primary key,inspectionrecordid LONG,specificationcode VARCHAR(75) null,specificationname VARCHAR(75) null,specificationvalue VARCHAR(75) null,evaluationresult LONG)";
	public static final String TABLE_SQL_DROP = "drop table vr_inspectionrecordspec";
	public static final String ORDER_BY_JPQL = " ORDER BY inspectionRecordSpec.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_inspectionrecordspec.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpec"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpec"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpec"),
			true);
	public static long INSPECTIONRECORDID_COLUMN_BITMASK = 1L;
	public static long SPECIFICATIONCODE_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InspectionRecordSpec toModel(
		InspectionRecordSpecSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InspectionRecordSpec model = new InspectionRecordSpecImpl();

		model.setId(soapModel.getId());
		model.setInspectionRecordid(soapModel.getInspectionRecordid());
		model.setSpecificationCode(soapModel.getSpecificationCode());
		model.setSpecificationName(soapModel.getSpecificationName());
		model.setSpecificationValue(soapModel.getSpecificationValue());
		model.setEvaluationResult(soapModel.getEvaluationResult());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InspectionRecordSpec> toModels(
		InspectionRecordSpecSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InspectionRecordSpec> models = new ArrayList<InspectionRecordSpec>(soapModels.length);

		for (InspectionRecordSpecSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpec"));

	public InspectionRecordSpecModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InspectionRecordSpec.class;
	}

	@Override
	public String getModelClassName() {
		return InspectionRecordSpec.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("inspectionRecordid", getInspectionRecordid());
		attributes.put("specificationCode", getSpecificationCode());
		attributes.put("specificationName", getSpecificationName());
		attributes.put("specificationValue", getSpecificationValue());
		attributes.put("evaluationResult", getEvaluationResult());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long inspectionRecordid = (Long)attributes.get("inspectionRecordid");

		if (inspectionRecordid != null) {
			setInspectionRecordid(inspectionRecordid);
		}

		String specificationCode = (String)attributes.get("specificationCode");

		if (specificationCode != null) {
			setSpecificationCode(specificationCode);
		}

		String specificationName = (String)attributes.get("specificationName");

		if (specificationName != null) {
			setSpecificationName(specificationName);
		}

		String specificationValue = (String)attributes.get("specificationValue");

		if (specificationValue != null) {
			setSpecificationValue(specificationValue);
		}

		Long evaluationResult = (Long)attributes.get("evaluationResult");

		if (evaluationResult != null) {
			setEvaluationResult(evaluationResult);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getInspectionRecordid() {
		return _inspectionRecordid;
	}

	@Override
	public void setInspectionRecordid(long inspectionRecordid) {
		_columnBitmask |= INSPECTIONRECORDID_COLUMN_BITMASK;

		if (!_setOriginalInspectionRecordid) {
			_setOriginalInspectionRecordid = true;

			_originalInspectionRecordid = _inspectionRecordid;
		}

		_inspectionRecordid = inspectionRecordid;
	}

	public long getOriginalInspectionRecordid() {
		return _originalInspectionRecordid;
	}

	@JSON
	@Override
	public String getSpecificationCode() {
		if (_specificationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationCode;
		}
	}

	@Override
	public void setSpecificationCode(String specificationCode) {
		_columnBitmask |= SPECIFICATIONCODE_COLUMN_BITMASK;

		if (_originalSpecificationCode == null) {
			_originalSpecificationCode = _specificationCode;
		}

		_specificationCode = specificationCode;
	}

	public String getOriginalSpecificationCode() {
		return GetterUtil.getString(_originalSpecificationCode);
	}

	@JSON
	@Override
	public String getSpecificationName() {
		if (_specificationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationName;
		}
	}

	@Override
	public void setSpecificationName(String specificationName) {
		_specificationName = specificationName;
	}

	@JSON
	@Override
	public String getSpecificationValue() {
		if (_specificationValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _specificationValue;
		}
	}

	@Override
	public void setSpecificationValue(String specificationValue) {
		_specificationValue = specificationValue;
	}

	@JSON
	@Override
	public long getEvaluationResult() {
		return _evaluationResult;
	}

	@Override
	public void setEvaluationResult(long evaluationResult) {
		_evaluationResult = evaluationResult;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			InspectionRecordSpec.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InspectionRecordSpec toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InspectionRecordSpec)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InspectionRecordSpecImpl inspectionRecordSpecImpl = new InspectionRecordSpecImpl();

		inspectionRecordSpecImpl.setId(getId());
		inspectionRecordSpecImpl.setInspectionRecordid(getInspectionRecordid());
		inspectionRecordSpecImpl.setSpecificationCode(getSpecificationCode());
		inspectionRecordSpecImpl.setSpecificationName(getSpecificationName());
		inspectionRecordSpecImpl.setSpecificationValue(getSpecificationValue());
		inspectionRecordSpecImpl.setEvaluationResult(getEvaluationResult());

		inspectionRecordSpecImpl.resetOriginalValues();

		return inspectionRecordSpecImpl;
	}

	@Override
	public int compareTo(InspectionRecordSpec inspectionRecordSpec) {
		int value = 0;

		if (getId() < inspectionRecordSpec.getId()) {
			value = -1;
		}
		else if (getId() > inspectionRecordSpec.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InspectionRecordSpec)) {
			return false;
		}

		InspectionRecordSpec inspectionRecordSpec = (InspectionRecordSpec)obj;

		long primaryKey = inspectionRecordSpec.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		InspectionRecordSpecModelImpl inspectionRecordSpecModelImpl = this;

		inspectionRecordSpecModelImpl._originalInspectionRecordid = inspectionRecordSpecModelImpl._inspectionRecordid;

		inspectionRecordSpecModelImpl._setOriginalInspectionRecordid = false;

		inspectionRecordSpecModelImpl._originalSpecificationCode = inspectionRecordSpecModelImpl._specificationCode;

		inspectionRecordSpecModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<InspectionRecordSpec> toCacheModel() {
		InspectionRecordSpecCacheModel inspectionRecordSpecCacheModel = new InspectionRecordSpecCacheModel();

		inspectionRecordSpecCacheModel.id = getId();

		inspectionRecordSpecCacheModel.inspectionRecordid = getInspectionRecordid();

		inspectionRecordSpecCacheModel.specificationCode = getSpecificationCode();

		String specificationCode = inspectionRecordSpecCacheModel.specificationCode;

		if ((specificationCode != null) && (specificationCode.length() == 0)) {
			inspectionRecordSpecCacheModel.specificationCode = null;
		}

		inspectionRecordSpecCacheModel.specificationName = getSpecificationName();

		String specificationName = inspectionRecordSpecCacheModel.specificationName;

		if ((specificationName != null) && (specificationName.length() == 0)) {
			inspectionRecordSpecCacheModel.specificationName = null;
		}

		inspectionRecordSpecCacheModel.specificationValue = getSpecificationValue();

		String specificationValue = inspectionRecordSpecCacheModel.specificationValue;

		if ((specificationValue != null) && (specificationValue.length() == 0)) {
			inspectionRecordSpecCacheModel.specificationValue = null;
		}

		inspectionRecordSpecCacheModel.evaluationResult = getEvaluationResult();

		return inspectionRecordSpecCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", inspectionRecordid=");
		sb.append(getInspectionRecordid());
		sb.append(", specificationCode=");
		sb.append(getSpecificationCode());
		sb.append(", specificationName=");
		sb.append(getSpecificationName());
		sb.append(", specificationValue=");
		sb.append(getSpecificationValue());
		sb.append(", evaluationResult=");
		sb.append(getEvaluationResult());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSpec");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordid</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationCode</column-name><column-value><![CDATA[");
		sb.append(getSpecificationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationName</column-name><column-value><![CDATA[");
		sb.append(getSpecificationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>specificationValue</column-name><column-value><![CDATA[");
		sb.append(getSpecificationValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationResult</column-name><column-value><![CDATA[");
		sb.append(getEvaluationResult());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = InspectionRecordSpec.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			InspectionRecordSpec.class
		};
	private long _id;
	private long _inspectionRecordid;
	private long _originalInspectionRecordid;
	private boolean _setOriginalInspectionRecordid;
	private String _specificationCode;
	private String _originalSpecificationCode;
	private String _specificationName;
	private String _specificationValue;
	private long _evaluationResult;
	private long _columnBitmask;
	private InspectionRecordSpec _escapedModel;
}