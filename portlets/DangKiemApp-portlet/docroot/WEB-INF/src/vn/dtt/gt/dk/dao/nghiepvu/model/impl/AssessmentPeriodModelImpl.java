/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriod;
import vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriodModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriodSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AssessmentPeriod service. Represents a row in the &quot;vr_assessmentperiod&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriodModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssessmentPeriodImpl}.
 * </p>
 *
 * @author win_64
 * @see AssessmentPeriodImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriod
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriodModel
 * @generated
 */
@JSON(strict = true)
public class AssessmentPeriodModelImpl extends BaseModelImpl<AssessmentPeriod>
	implements AssessmentPeriodModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a assessment period model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriod} interface instead.
	 */
	public static final String TABLE_NAME = "vr_assessmentperiod";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "assessmentid", Types.VARCHAR },
			{ "assessmentyear", Types.VARCHAR },
			{ "evaluationperiod", Types.VARCHAR },
			{ "importerchecked", Types.INTEGER },
			{ "inspectorchecked", Types.INTEGER },
			{ "productionchecked", Types.INTEGER },
			{ "synchdate", Types.TIMESTAMP },
			{ "previousassessmentid", Types.VARCHAR },
			{ "previousassessmentyear", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_assessmentperiod (id LONG not null primary key,assessmentid VARCHAR(75) null,assessmentyear VARCHAR(75) null,evaluationperiod VARCHAR(75) null,importerchecked INTEGER,inspectorchecked INTEGER,productionchecked INTEGER,synchdate DATE null,previousassessmentid VARCHAR(75) null,previousassessmentyear VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_assessmentperiod";
	public static final String ORDER_BY_JPQL = " ORDER BY assessmentPeriod.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_assessmentperiod.id DESC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriod"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriod"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriod"),
			true);
	public static long ASSESSMENTID_COLUMN_BITMASK = 1L;
	public static long ASSESSMENTYEAR_COLUMN_BITMASK = 2L;
	public static long IMPORTERCHECKED_COLUMN_BITMASK = 4L;
	public static long INSPECTORCHECKED_COLUMN_BITMASK = 8L;
	public static long PREVIOUSASSESSMENTID_COLUMN_BITMASK = 16L;
	public static long PREVIOUSASSESSMENTYEAR_COLUMN_BITMASK = 32L;
	public static long PRODUCTIONCHECKED_COLUMN_BITMASK = 64L;
	public static long ID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AssessmentPeriod toModel(AssessmentPeriodSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AssessmentPeriod model = new AssessmentPeriodImpl();

		model.setId(soapModel.getId());
		model.setAssessmentid(soapModel.getAssessmentid());
		model.setAssessmentyear(soapModel.getAssessmentyear());
		model.setEvaluationperiod(soapModel.getEvaluationperiod());
		model.setImporterchecked(soapModel.getImporterchecked());
		model.setInspectorchecked(soapModel.getInspectorchecked());
		model.setProductionchecked(soapModel.getProductionchecked());
		model.setSynchdate(soapModel.getSynchdate());
		model.setPreviousassessmentid(soapModel.getPreviousassessmentid());
		model.setPreviousassessmentyear(soapModel.getPreviousassessmentyear());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AssessmentPeriod> toModels(
		AssessmentPeriodSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AssessmentPeriod> models = new ArrayList<AssessmentPeriod>(soapModels.length);

		for (AssessmentPeriodSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriod"));

	public AssessmentPeriodModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssessmentPeriod.class;
	}

	@Override
	public String getModelClassName() {
		return AssessmentPeriod.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("assessmentid", getAssessmentid());
		attributes.put("assessmentyear", getAssessmentyear());
		attributes.put("evaluationperiod", getEvaluationperiod());
		attributes.put("importerchecked", getImporterchecked());
		attributes.put("inspectorchecked", getInspectorchecked());
		attributes.put("productionchecked", getProductionchecked());
		attributes.put("synchdate", getSynchdate());
		attributes.put("previousassessmentid", getPreviousassessmentid());
		attributes.put("previousassessmentyear", getPreviousassessmentyear());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String assessmentid = (String)attributes.get("assessmentid");

		if (assessmentid != null) {
			setAssessmentid(assessmentid);
		}

		String assessmentyear = (String)attributes.get("assessmentyear");

		if (assessmentyear != null) {
			setAssessmentyear(assessmentyear);
		}

		String evaluationperiod = (String)attributes.get("evaluationperiod");

		if (evaluationperiod != null) {
			setEvaluationperiod(evaluationperiod);
		}

		Integer importerchecked = (Integer)attributes.get("importerchecked");

		if (importerchecked != null) {
			setImporterchecked(importerchecked);
		}

		Integer inspectorchecked = (Integer)attributes.get("inspectorchecked");

		if (inspectorchecked != null) {
			setInspectorchecked(inspectorchecked);
		}

		Integer productionchecked = (Integer)attributes.get("productionchecked");

		if (productionchecked != null) {
			setProductionchecked(productionchecked);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}

		String previousassessmentid = (String)attributes.get(
				"previousassessmentid");

		if (previousassessmentid != null) {
			setPreviousassessmentid(previousassessmentid);
		}

		String previousassessmentyear = (String)attributes.get(
				"previousassessmentyear");

		if (previousassessmentyear != null) {
			setPreviousassessmentyear(previousassessmentyear);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getAssessmentid() {
		if (_assessmentid == null) {
			return StringPool.BLANK;
		}
		else {
			return _assessmentid;
		}
	}

	@Override
	public void setAssessmentid(String assessmentid) {
		_columnBitmask |= ASSESSMENTID_COLUMN_BITMASK;

		if (_originalAssessmentid == null) {
			_originalAssessmentid = _assessmentid;
		}

		_assessmentid = assessmentid;
	}

	public String getOriginalAssessmentid() {
		return GetterUtil.getString(_originalAssessmentid);
	}

	@JSON
	@Override
	public String getAssessmentyear() {
		if (_assessmentyear == null) {
			return StringPool.BLANK;
		}
		else {
			return _assessmentyear;
		}
	}

	@Override
	public void setAssessmentyear(String assessmentyear) {
		_columnBitmask |= ASSESSMENTYEAR_COLUMN_BITMASK;

		if (_originalAssessmentyear == null) {
			_originalAssessmentyear = _assessmentyear;
		}

		_assessmentyear = assessmentyear;
	}

	public String getOriginalAssessmentyear() {
		return GetterUtil.getString(_originalAssessmentyear);
	}

	@JSON
	@Override
	public String getEvaluationperiod() {
		if (_evaluationperiod == null) {
			return StringPool.BLANK;
		}
		else {
			return _evaluationperiod;
		}
	}

	@Override
	public void setEvaluationperiod(String evaluationperiod) {
		_evaluationperiod = evaluationperiod;
	}

	@JSON
	@Override
	public int getImporterchecked() {
		return _importerchecked;
	}

	@Override
	public void setImporterchecked(int importerchecked) {
		_columnBitmask |= IMPORTERCHECKED_COLUMN_BITMASK;

		if (!_setOriginalImporterchecked) {
			_setOriginalImporterchecked = true;

			_originalImporterchecked = _importerchecked;
		}

		_importerchecked = importerchecked;
	}

	public int getOriginalImporterchecked() {
		return _originalImporterchecked;
	}

	@JSON
	@Override
	public int getInspectorchecked() {
		return _inspectorchecked;
	}

	@Override
	public void setInspectorchecked(int inspectorchecked) {
		_columnBitmask |= INSPECTORCHECKED_COLUMN_BITMASK;

		if (!_setOriginalInspectorchecked) {
			_setOriginalInspectorchecked = true;

			_originalInspectorchecked = _inspectorchecked;
		}

		_inspectorchecked = inspectorchecked;
	}

	public int getOriginalInspectorchecked() {
		return _originalInspectorchecked;
	}

	@JSON
	@Override
	public int getProductionchecked() {
		return _productionchecked;
	}

	@Override
	public void setProductionchecked(int productionchecked) {
		_columnBitmask |= PRODUCTIONCHECKED_COLUMN_BITMASK;

		if (!_setOriginalProductionchecked) {
			_setOriginalProductionchecked = true;

			_originalProductionchecked = _productionchecked;
		}

		_productionchecked = productionchecked;
	}

	public int getOriginalProductionchecked() {
		return _originalProductionchecked;
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	@JSON
	@Override
	public String getPreviousassessmentid() {
		if (_previousassessmentid == null) {
			return StringPool.BLANK;
		}
		else {
			return _previousassessmentid;
		}
	}

	@Override
	public void setPreviousassessmentid(String previousassessmentid) {
		_columnBitmask |= PREVIOUSASSESSMENTID_COLUMN_BITMASK;

		if (_originalPreviousassessmentid == null) {
			_originalPreviousassessmentid = _previousassessmentid;
		}

		_previousassessmentid = previousassessmentid;
	}

	public String getOriginalPreviousassessmentid() {
		return GetterUtil.getString(_originalPreviousassessmentid);
	}

	@JSON
	@Override
	public String getPreviousassessmentyear() {
		if (_previousassessmentyear == null) {
			return StringPool.BLANK;
		}
		else {
			return _previousassessmentyear;
		}
	}

	@Override
	public void setPreviousassessmentyear(String previousassessmentyear) {
		_columnBitmask |= PREVIOUSASSESSMENTYEAR_COLUMN_BITMASK;

		if (_originalPreviousassessmentyear == null) {
			_originalPreviousassessmentyear = _previousassessmentyear;
		}

		_previousassessmentyear = previousassessmentyear;
	}

	public String getOriginalPreviousassessmentyear() {
		return GetterUtil.getString(_originalPreviousassessmentyear);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AssessmentPeriod.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssessmentPeriod toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssessmentPeriod)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssessmentPeriodImpl assessmentPeriodImpl = new AssessmentPeriodImpl();

		assessmentPeriodImpl.setId(getId());
		assessmentPeriodImpl.setAssessmentid(getAssessmentid());
		assessmentPeriodImpl.setAssessmentyear(getAssessmentyear());
		assessmentPeriodImpl.setEvaluationperiod(getEvaluationperiod());
		assessmentPeriodImpl.setImporterchecked(getImporterchecked());
		assessmentPeriodImpl.setInspectorchecked(getInspectorchecked());
		assessmentPeriodImpl.setProductionchecked(getProductionchecked());
		assessmentPeriodImpl.setSynchdate(getSynchdate());
		assessmentPeriodImpl.setPreviousassessmentid(getPreviousassessmentid());
		assessmentPeriodImpl.setPreviousassessmentyear(getPreviousassessmentyear());

		assessmentPeriodImpl.resetOriginalValues();

		return assessmentPeriodImpl;
	}

	@Override
	public int compareTo(AssessmentPeriod assessmentPeriod) {
		int value = 0;

		if (getId() < assessmentPeriod.getId()) {
			value = -1;
		}
		else if (getId() > assessmentPeriod.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssessmentPeriod)) {
			return false;
		}

		AssessmentPeriod assessmentPeriod = (AssessmentPeriod)obj;

		long primaryKey = assessmentPeriod.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AssessmentPeriodModelImpl assessmentPeriodModelImpl = this;

		assessmentPeriodModelImpl._originalAssessmentid = assessmentPeriodModelImpl._assessmentid;

		assessmentPeriodModelImpl._originalAssessmentyear = assessmentPeriodModelImpl._assessmentyear;

		assessmentPeriodModelImpl._originalImporterchecked = assessmentPeriodModelImpl._importerchecked;

		assessmentPeriodModelImpl._setOriginalImporterchecked = false;

		assessmentPeriodModelImpl._originalInspectorchecked = assessmentPeriodModelImpl._inspectorchecked;

		assessmentPeriodModelImpl._setOriginalInspectorchecked = false;

		assessmentPeriodModelImpl._originalProductionchecked = assessmentPeriodModelImpl._productionchecked;

		assessmentPeriodModelImpl._setOriginalProductionchecked = false;

		assessmentPeriodModelImpl._originalPreviousassessmentid = assessmentPeriodModelImpl._previousassessmentid;

		assessmentPeriodModelImpl._originalPreviousassessmentyear = assessmentPeriodModelImpl._previousassessmentyear;

		assessmentPeriodModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssessmentPeriod> toCacheModel() {
		AssessmentPeriodCacheModel assessmentPeriodCacheModel = new AssessmentPeriodCacheModel();

		assessmentPeriodCacheModel.id = getId();

		assessmentPeriodCacheModel.assessmentid = getAssessmentid();

		String assessmentid = assessmentPeriodCacheModel.assessmentid;

		if ((assessmentid != null) && (assessmentid.length() == 0)) {
			assessmentPeriodCacheModel.assessmentid = null;
		}

		assessmentPeriodCacheModel.assessmentyear = getAssessmentyear();

		String assessmentyear = assessmentPeriodCacheModel.assessmentyear;

		if ((assessmentyear != null) && (assessmentyear.length() == 0)) {
			assessmentPeriodCacheModel.assessmentyear = null;
		}

		assessmentPeriodCacheModel.evaluationperiod = getEvaluationperiod();

		String evaluationperiod = assessmentPeriodCacheModel.evaluationperiod;

		if ((evaluationperiod != null) && (evaluationperiod.length() == 0)) {
			assessmentPeriodCacheModel.evaluationperiod = null;
		}

		assessmentPeriodCacheModel.importerchecked = getImporterchecked();

		assessmentPeriodCacheModel.inspectorchecked = getInspectorchecked();

		assessmentPeriodCacheModel.productionchecked = getProductionchecked();

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			assessmentPeriodCacheModel.synchdate = synchdate.getTime();
		}
		else {
			assessmentPeriodCacheModel.synchdate = Long.MIN_VALUE;
		}

		assessmentPeriodCacheModel.previousassessmentid = getPreviousassessmentid();

		String previousassessmentid = assessmentPeriodCacheModel.previousassessmentid;

		if ((previousassessmentid != null) &&
				(previousassessmentid.length() == 0)) {
			assessmentPeriodCacheModel.previousassessmentid = null;
		}

		assessmentPeriodCacheModel.previousassessmentyear = getPreviousassessmentyear();

		String previousassessmentyear = assessmentPeriodCacheModel.previousassessmentyear;

		if ((previousassessmentyear != null) &&
				(previousassessmentyear.length() == 0)) {
			assessmentPeriodCacheModel.previousassessmentyear = null;
		}

		return assessmentPeriodCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", assessmentid=");
		sb.append(getAssessmentid());
		sb.append(", assessmentyear=");
		sb.append(getAssessmentyear());
		sb.append(", evaluationperiod=");
		sb.append(getEvaluationperiod());
		sb.append(", importerchecked=");
		sb.append(getImporterchecked());
		sb.append(", inspectorchecked=");
		sb.append(getInspectorchecked());
		sb.append(", productionchecked=");
		sb.append(getProductionchecked());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append(", previousassessmentid=");
		sb.append(getPreviousassessmentid());
		sb.append(", previousassessmentyear=");
		sb.append(getPreviousassessmentyear());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentPeriod");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assessmentid</column-name><column-value><![CDATA[");
		sb.append(getAssessmentid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assessmentyear</column-name><column-value><![CDATA[");
		sb.append(getAssessmentyear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationperiod</column-name><column-value><![CDATA[");
		sb.append(getEvaluationperiod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerchecked</column-name><column-value><![CDATA[");
		sb.append(getImporterchecked());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorchecked</column-name><column-value><![CDATA[");
		sb.append(getInspectorchecked());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionchecked</column-name><column-value><![CDATA[");
		sb.append(getProductionchecked());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousassessmentid</column-name><column-value><![CDATA[");
		sb.append(getPreviousassessmentid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousassessmentyear</column-name><column-value><![CDATA[");
		sb.append(getPreviousassessmentyear());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AssessmentPeriod.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AssessmentPeriod.class
		};
	private long _id;
	private String _assessmentid;
	private String _originalAssessmentid;
	private String _assessmentyear;
	private String _originalAssessmentyear;
	private String _evaluationperiod;
	private int _importerchecked;
	private int _originalImporterchecked;
	private boolean _setOriginalImporterchecked;
	private int _inspectorchecked;
	private int _originalInspectorchecked;
	private boolean _setOriginalInspectorchecked;
	private int _productionchecked;
	private int _originalProductionchecked;
	private boolean _setOriginalProductionchecked;
	private Date _synchdate;
	private String _previousassessmentid;
	private String _originalPreviousassessmentid;
	private String _previousassessmentyear;
	private String _originalPreviousassessmentyear;
	private long _columnBitmask;
	private AssessmentPeriod _escapedModel;
}