/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificate;
import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificateModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VehicleCertificate service. Represents a row in the &quot;vr_vehicle_certificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VehicleCertificateImpl}.
 * </p>
 *
 * @author win_64
 * @see VehicleCertificateImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificate
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificateModel
 * @generated
 */
@JSON(strict = true)
public class VehicleCertificateModelImpl extends BaseModelImpl<VehicleCertificate>
	implements VehicleCertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vehicle certificate model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificate} interface instead.
	 */
	public static final String TABLE_NAME = "vr_vehicle_certificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mtGateway", Types.BIGINT },
			{ "hoSoThuTucId", Types.BIGINT },
			{ "sequenceNo", Types.BIGINT },
			{ "vehicleRecordid", Types.BIGINT },
			{ "draftCertificateid", Types.BIGINT },
			{ "certificateRecordid", Types.BIGINT },
			{ "debitNoteId", Types.BIGINT },
			{ "vehicleGroupId", Types.BIGINT },
			{ "vehicleClass", Types.VARCHAR },
			{ "technicalSpecCode", Types.VARCHAR },
			{ "referenceCertificateNo", Types.VARCHAR },
			{ "safetytestreportNo", Types.VARCHAR },
			{ "emissiontestreportNo", Types.VARCHAR },
			{ "copreportNo", Types.VARCHAR },
			{ "controlreportNo", Types.VARCHAR },
			{ "vehicletypeDescription", Types.VARCHAR },
			{ "vehicleType", Types.VARCHAR },
			{ "enginetypeDescription", Types.VARCHAR },
			{ "engineType", Types.VARCHAR },
			{ "markAsVehicle", Types.INTEGER },
			{ "trademarkDescription", Types.VARCHAR },
			{ "tradeMark", Types.VARCHAR },
			{ "commercialName", Types.VARCHAR },
			{ "modelCode", Types.VARCHAR },
			{ "productionPlant", Types.VARCHAR },
			{ "addressOfProductionPlant", Types.VARCHAR },
			{ "emissionStandard", Types.VARCHAR },
			{ "codeNumber", Types.BIGINT },
			{ "chassisNumber", Types.VARCHAR },
			{ "engineNumber", Types.VARCHAR },
			{ "productionYear", Types.VARCHAR },
			{ "countryCode", Types.VARCHAR },
			{ "countryName", Types.VARCHAR },
			{ "currentStatus", Types.VARCHAR },
			{ "vehicleEngineUsage", Types.VARCHAR },
			{ "vehicleColor", Types.VARCHAR },
			{ "unitPrice", Types.DOUBLE },
			{ "currency", Types.VARCHAR },
			{ "remarks", Types.VARCHAR },
			{ "markUpStatus", Types.BIGINT },
			{ "markAsSample", Types.INTEGER },
			{ "vehicleengineStatus", Types.BIGINT },
			{ "vehicleengineFolder", Types.BIGINT },
			{ "vehicleGroupInitialId", Types.BIGINT },
			{ "registeredInspectionId", Types.BIGINT },
			{ "registeredNumber", Types.VARCHAR },
			{ "importerCode", Types.VARCHAR },
			{ "importerName", Types.VARCHAR },
			{ "importerAddress", Types.VARCHAR },
			{ "representative", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "fax", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "inspectionDate", Types.TIMESTAMP },
			{ "inspectionSite", Types.VARCHAR },
			{ "inspectionDistrictCode", Types.VARCHAR },
			{ "inspectionProvinceCode", Types.VARCHAR },
			{ "inspectionDistrict", Types.VARCHAR },
			{ "inspectionProvince", Types.VARCHAR },
			{ "confirmedInspectionId", Types.BIGINT },
			{ "inspectionRecordId", Types.BIGINT },
			{ "inspectionRecordNo", Types.VARCHAR },
			{ "inspectionDateFrom", Types.TIMESTAMP },
			{ "inspectionDateTo", Types.TIMESTAMP },
			{ "inspectionMode", Types.BIGINT },
			{ "inspectionModeDescription", Types.VARCHAR },
			{ "confirmedResult", Types.BIGINT },
			{ "confirmedResultDescription", Types.VARCHAR },
			{ "importCustomDeclareDate", Types.TIMESTAMP },
			{ "importCustomDeclareNo", Types.VARCHAR },
			{ "corporationCode", Types.VARCHAR },
			{ "corporationName", Types.VARCHAR },
			{ "inspectorContactCode", Types.VARCHAR },
			{ "inspectorName", Types.VARCHAR },
			{ "certificateType", Types.BIGINT },
			{ "certificateNumber", Types.VARCHAR },
			{ "oldcertificateNumber", Types.VARCHAR },
			{ "signDate", Types.TIMESTAMP },
			{ "stampStatus", Types.BIGINT },
			{ "certificateStatus", Types.VARCHAR },
			{ "digitalIssued", Types.BIGINT },
			{ "markupSafeTest", Types.BIGINT },
			{ "markupEmissionTest", Types.BIGINT },
			{ "markupControl", Types.BIGINT },
			{ "attachedFile", Types.BIGINT },
			{ "inspectorOrganization", Types.VARCHAR },
			{ "inspectorDivision", Types.VARCHAR },
			{ "inspectorSignName", Types.VARCHAR },
			{ "inspectorSignTitle", Types.VARCHAR },
			{ "inspectorSignPlace", Types.VARCHAR },
			{ "inspectorSignDate", Types.TIMESTAMP },
			{ "dossierDate", Types.TIMESTAMP },
			{ "filedangkykiemtraId", Types.BIGINT },
			{ "filebienbankiemtraId", Types.BIGINT },
			{ "filechungchiId", Types.BIGINT },
			{ "filebaocaotnantoanId", Types.BIGINT },
			{ "filebaocaotnkhithaiId", Types.BIGINT },
			{ "fileketluangiamdinhId", Types.BIGINT },
			{ "SynchDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_vehicle_certificate (id LONG not null primary key,mtGateway LONG,hoSoThuTucId LONG,sequenceNo LONG,vehicleRecordid LONG,draftCertificateid LONG,certificateRecordid LONG,debitNoteId LONG,vehicleGroupId LONG,vehicleClass VARCHAR(75) null,technicalSpecCode VARCHAR(75) null,referenceCertificateNo VARCHAR(75) null,safetytestreportNo VARCHAR(75) null,emissiontestreportNo VARCHAR(75) null,copreportNo VARCHAR(75) null,controlreportNo VARCHAR(75) null,vehicletypeDescription VARCHAR(75) null,vehicleType VARCHAR(75) null,enginetypeDescription VARCHAR(75) null,engineType VARCHAR(75) null,markAsVehicle INTEGER,trademarkDescription VARCHAR(75) null,tradeMark VARCHAR(75) null,commercialName VARCHAR(75) null,modelCode VARCHAR(75) null,productionPlant VARCHAR(75) null,addressOfProductionPlant VARCHAR(75) null,emissionStandard VARCHAR(75) null,codeNumber LONG,chassisNumber VARCHAR(75) null,engineNumber VARCHAR(75) null,productionYear VARCHAR(75) null,countryCode VARCHAR(75) null,countryName VARCHAR(75) null,currentStatus VARCHAR(75) null,vehicleEngineUsage VARCHAR(75) null,vehicleColor VARCHAR(75) null,unitPrice DOUBLE,currency VARCHAR(75) null,remarks VARCHAR(75) null,markUpStatus LONG,markAsSample INTEGER,vehicleengineStatus LONG,vehicleengineFolder LONG,vehicleGroupInitialId LONG,registeredInspectionId LONG,registeredNumber VARCHAR(75) null,importerCode VARCHAR(75) null,importerName VARCHAR(75) null,importerAddress VARCHAR(75) null,representative VARCHAR(75) null,phone VARCHAR(75) null,fax VARCHAR(75) null,email VARCHAR(75) null,inspectionDate DATE null,inspectionSite VARCHAR(75) null,inspectionDistrictCode VARCHAR(75) null,inspectionProvinceCode VARCHAR(75) null,inspectionDistrict VARCHAR(75) null,inspectionProvince VARCHAR(75) null,confirmedInspectionId LONG,inspectionRecordId LONG,inspectionRecordNo VARCHAR(75) null,inspectionDateFrom DATE null,inspectionDateTo DATE null,inspectionMode LONG,inspectionModeDescription VARCHAR(75) null,confirmedResult LONG,confirmedResultDescription VARCHAR(75) null,importCustomDeclareDate DATE null,importCustomDeclareNo VARCHAR(75) null,corporationCode VARCHAR(75) null,corporationName VARCHAR(75) null,inspectorContactCode VARCHAR(75) null,inspectorName VARCHAR(75) null,certificateType LONG,certificateNumber VARCHAR(75) null,oldcertificateNumber VARCHAR(75) null,signDate DATE null,stampStatus LONG,certificateStatus VARCHAR(75) null,digitalIssued LONG,markupSafeTest LONG,markupEmissionTest LONG,markupControl LONG,attachedFile LONG,inspectorOrganization VARCHAR(75) null,inspectorDivision VARCHAR(75) null,inspectorSignName VARCHAR(75) null,inspectorSignTitle VARCHAR(75) null,inspectorSignPlace VARCHAR(75) null,inspectorSignDate DATE null,dossierDate DATE null,filedangkykiemtraId LONG,filebienbankiemtraId LONG,filechungchiId LONG,filebaocaotnantoanId LONG,filebaocaotnkhithaiId LONG,fileketluangiamdinhId LONG,SynchDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_vehicle_certificate";
	public static final String ORDER_BY_JPQL = " ORDER BY vehicleCertificate.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_vehicle_certificate.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificate"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificate"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VehicleCertificate toModel(VehicleCertificateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VehicleCertificate model = new VehicleCertificateImpl();

		model.setId(soapModel.getId());
		model.setMtGateway(soapModel.getMtGateway());
		model.setHoSoThuTucId(soapModel.getHoSoThuTucId());
		model.setSequenceNo(soapModel.getSequenceNo());
		model.setVehicleRecordid(soapModel.getVehicleRecordid());
		model.setDraftCertificateid(soapModel.getDraftCertificateid());
		model.setCertificateRecordid(soapModel.getCertificateRecordid());
		model.setDebitNoteId(soapModel.getDebitNoteId());
		model.setVehicleGroupId(soapModel.getVehicleGroupId());
		model.setVehicleClass(soapModel.getVehicleClass());
		model.setTechnicalSpecCode(soapModel.getTechnicalSpecCode());
		model.setReferenceCertificateNo(soapModel.getReferenceCertificateNo());
		model.setSafetytestreportNo(soapModel.getSafetytestreportNo());
		model.setEmissiontestreportNo(soapModel.getEmissiontestreportNo());
		model.setCopreportNo(soapModel.getCopreportNo());
		model.setControlreportNo(soapModel.getControlreportNo());
		model.setVehicletypeDescription(soapModel.getVehicletypeDescription());
		model.setVehicleType(soapModel.getVehicleType());
		model.setEnginetypeDescription(soapModel.getEnginetypeDescription());
		model.setEngineType(soapModel.getEngineType());
		model.setMarkAsVehicle(soapModel.getMarkAsVehicle());
		model.setTrademarkDescription(soapModel.getTrademarkDescription());
		model.setTradeMark(soapModel.getTradeMark());
		model.setCommercialName(soapModel.getCommercialName());
		model.setModelCode(soapModel.getModelCode());
		model.setProductionPlant(soapModel.getProductionPlant());
		model.setAddressOfProductionPlant(soapModel.getAddressOfProductionPlant());
		model.setEmissionStandard(soapModel.getEmissionStandard());
		model.setCodeNumber(soapModel.getCodeNumber());
		model.setChassisNumber(soapModel.getChassisNumber());
		model.setEngineNumber(soapModel.getEngineNumber());
		model.setProductionYear(soapModel.getProductionYear());
		model.setCountryCode(soapModel.getCountryCode());
		model.setCountryName(soapModel.getCountryName());
		model.setCurrentStatus(soapModel.getCurrentStatus());
		model.setVehicleEngineUsage(soapModel.getVehicleEngineUsage());
		model.setVehicleColor(soapModel.getVehicleColor());
		model.setUnitPrice(soapModel.getUnitPrice());
		model.setCurrency(soapModel.getCurrency());
		model.setRemarks(soapModel.getRemarks());
		model.setMarkUpStatus(soapModel.getMarkUpStatus());
		model.setMarkAsSample(soapModel.getMarkAsSample());
		model.setVehicleengineStatus(soapModel.getVehicleengineStatus());
		model.setVehicleengineFolder(soapModel.getVehicleengineFolder());
		model.setVehicleGroupInitialId(soapModel.getVehicleGroupInitialId());
		model.setRegisteredInspectionId(soapModel.getRegisteredInspectionId());
		model.setRegisteredNumber(soapModel.getRegisteredNumber());
		model.setImporterCode(soapModel.getImporterCode());
		model.setImporterName(soapModel.getImporterName());
		model.setImporterAddress(soapModel.getImporterAddress());
		model.setRepresentative(soapModel.getRepresentative());
		model.setPhone(soapModel.getPhone());
		model.setFax(soapModel.getFax());
		model.setEmail(soapModel.getEmail());
		model.setInspectionDate(soapModel.getInspectionDate());
		model.setInspectionSite(soapModel.getInspectionSite());
		model.setInspectionDistrictCode(soapModel.getInspectionDistrictCode());
		model.setInspectionProvinceCode(soapModel.getInspectionProvinceCode());
		model.setInspectionDistrict(soapModel.getInspectionDistrict());
		model.setInspectionProvince(soapModel.getInspectionProvince());
		model.setConfirmedInspectionId(soapModel.getConfirmedInspectionId());
		model.setInspectionRecordId(soapModel.getInspectionRecordId());
		model.setInspectionRecordNo(soapModel.getInspectionRecordNo());
		model.setInspectionDateFrom(soapModel.getInspectionDateFrom());
		model.setInspectionDateTo(soapModel.getInspectionDateTo());
		model.setInspectionMode(soapModel.getInspectionMode());
		model.setInspectionModeDescription(soapModel.getInspectionModeDescription());
		model.setConfirmedResult(soapModel.getConfirmedResult());
		model.setConfirmedResultDescription(soapModel.getConfirmedResultDescription());
		model.setImportCustomDeclareDate(soapModel.getImportCustomDeclareDate());
		model.setImportCustomDeclareNo(soapModel.getImportCustomDeclareNo());
		model.setCorporationCode(soapModel.getCorporationCode());
		model.setCorporationName(soapModel.getCorporationName());
		model.setInspectorContactCode(soapModel.getInspectorContactCode());
		model.setInspectorName(soapModel.getInspectorName());
		model.setCertificateType(soapModel.getCertificateType());
		model.setCertificateNumber(soapModel.getCertificateNumber());
		model.setOldcertificateNumber(soapModel.getOldcertificateNumber());
		model.setSignDate(soapModel.getSignDate());
		model.setStampStatus(soapModel.getStampStatus());
		model.setCertificateStatus(soapModel.getCertificateStatus());
		model.setDigitalIssued(soapModel.getDigitalIssued());
		model.setMarkupSafeTest(soapModel.getMarkupSafeTest());
		model.setMarkupEmissionTest(soapModel.getMarkupEmissionTest());
		model.setMarkupControl(soapModel.getMarkupControl());
		model.setAttachedFile(soapModel.getAttachedFile());
		model.setInspectorOrganization(soapModel.getInspectorOrganization());
		model.setInspectorDivision(soapModel.getInspectorDivision());
		model.setInspectorSignName(soapModel.getInspectorSignName());
		model.setInspectorSignTitle(soapModel.getInspectorSignTitle());
		model.setInspectorSignPlace(soapModel.getInspectorSignPlace());
		model.setInspectorSignDate(soapModel.getInspectorSignDate());
		model.setDossierDate(soapModel.getDossierDate());
		model.setFiledangkykiemtraId(soapModel.getFiledangkykiemtraId());
		model.setFilebienbankiemtraId(soapModel.getFilebienbankiemtraId());
		model.setFilechungchiId(soapModel.getFilechungchiId());
		model.setFilebaocaotnantoanId(soapModel.getFilebaocaotnantoanId());
		model.setFilebaocaotnkhithaiId(soapModel.getFilebaocaotnkhithaiId());
		model.setFileketluangiamdinhId(soapModel.getFileketluangiamdinhId());
		model.setSynchDate(soapModel.getSynchDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VehicleCertificate> toModels(
		VehicleCertificateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VehicleCertificate> models = new ArrayList<VehicleCertificate>(soapModels.length);

		for (VehicleCertificateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificate"));

	public VehicleCertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VehicleCertificate.class;
	}

	@Override
	public String getModelClassName() {
		return VehicleCertificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("mtGateway", getMtGateway());
		attributes.put("hoSoThuTucId", getHoSoThuTucId());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("vehicleRecordid", getVehicleRecordid());
		attributes.put("draftCertificateid", getDraftCertificateid());
		attributes.put("certificateRecordid", getCertificateRecordid());
		attributes.put("debitNoteId", getDebitNoteId());
		attributes.put("vehicleGroupId", getVehicleGroupId());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("technicalSpecCode", getTechnicalSpecCode());
		attributes.put("referenceCertificateNo", getReferenceCertificateNo());
		attributes.put("safetytestreportNo", getSafetytestreportNo());
		attributes.put("emissiontestreportNo", getEmissiontestreportNo());
		attributes.put("copreportNo", getCopreportNo());
		attributes.put("controlreportNo", getControlreportNo());
		attributes.put("vehicletypeDescription", getVehicletypeDescription());
		attributes.put("vehicleType", getVehicleType());
		attributes.put("enginetypeDescription", getEnginetypeDescription());
		attributes.put("engineType", getEngineType());
		attributes.put("markAsVehicle", getMarkAsVehicle());
		attributes.put("trademarkDescription", getTrademarkDescription());
		attributes.put("tradeMark", getTradeMark());
		attributes.put("commercialName", getCommercialName());
		attributes.put("modelCode", getModelCode());
		attributes.put("productionPlant", getProductionPlant());
		attributes.put("addressOfProductionPlant", getAddressOfProductionPlant());
		attributes.put("emissionStandard", getEmissionStandard());
		attributes.put("codeNumber", getCodeNumber());
		attributes.put("chassisNumber", getChassisNumber());
		attributes.put("engineNumber", getEngineNumber());
		attributes.put("productionYear", getProductionYear());
		attributes.put("countryCode", getCountryCode());
		attributes.put("countryName", getCountryName());
		attributes.put("currentStatus", getCurrentStatus());
		attributes.put("vehicleEngineUsage", getVehicleEngineUsage());
		attributes.put("vehicleColor", getVehicleColor());
		attributes.put("unitPrice", getUnitPrice());
		attributes.put("currency", getCurrency());
		attributes.put("remarks", getRemarks());
		attributes.put("markUpStatus", getMarkUpStatus());
		attributes.put("markAsSample", getMarkAsSample());
		attributes.put("vehicleengineStatus", getVehicleengineStatus());
		attributes.put("vehicleengineFolder", getVehicleengineFolder());
		attributes.put("vehicleGroupInitialId", getVehicleGroupInitialId());
		attributes.put("registeredInspectionId", getRegisteredInspectionId());
		attributes.put("registeredNumber", getRegisteredNumber());
		attributes.put("importerCode", getImporterCode());
		attributes.put("importerName", getImporterName());
		attributes.put("importerAddress", getImporterAddress());
		attributes.put("representative", getRepresentative());
		attributes.put("phone", getPhone());
		attributes.put("fax", getFax());
		attributes.put("email", getEmail());
		attributes.put("inspectionDate", getInspectionDate());
		attributes.put("inspectionSite", getInspectionSite());
		attributes.put("inspectionDistrictCode", getInspectionDistrictCode());
		attributes.put("inspectionProvinceCode", getInspectionProvinceCode());
		attributes.put("inspectionDistrict", getInspectionDistrict());
		attributes.put("inspectionProvince", getInspectionProvince());
		attributes.put("confirmedInspectionId", getConfirmedInspectionId());
		attributes.put("inspectionRecordId", getInspectionRecordId());
		attributes.put("inspectionRecordNo", getInspectionRecordNo());
		attributes.put("inspectionDateFrom", getInspectionDateFrom());
		attributes.put("inspectionDateTo", getInspectionDateTo());
		attributes.put("inspectionMode", getInspectionMode());
		attributes.put("inspectionModeDescription",
			getInspectionModeDescription());
		attributes.put("confirmedResult", getConfirmedResult());
		attributes.put("confirmedResultDescription",
			getConfirmedResultDescription());
		attributes.put("importCustomDeclareDate", getImportCustomDeclareDate());
		attributes.put("importCustomDeclareNo", getImportCustomDeclareNo());
		attributes.put("corporationCode", getCorporationCode());
		attributes.put("corporationName", getCorporationName());
		attributes.put("inspectorContactCode", getInspectorContactCode());
		attributes.put("inspectorName", getInspectorName());
		attributes.put("certificateType", getCertificateType());
		attributes.put("certificateNumber", getCertificateNumber());
		attributes.put("oldcertificateNumber", getOldcertificateNumber());
		attributes.put("signDate", getSignDate());
		attributes.put("stampStatus", getStampStatus());
		attributes.put("certificateStatus", getCertificateStatus());
		attributes.put("digitalIssued", getDigitalIssued());
		attributes.put("markupSafeTest", getMarkupSafeTest());
		attributes.put("markupEmissionTest", getMarkupEmissionTest());
		attributes.put("markupControl", getMarkupControl());
		attributes.put("attachedFile", getAttachedFile());
		attributes.put("inspectorOrganization", getInspectorOrganization());
		attributes.put("inspectorDivision", getInspectorDivision());
		attributes.put("inspectorSignName", getInspectorSignName());
		attributes.put("inspectorSignTitle", getInspectorSignTitle());
		attributes.put("inspectorSignPlace", getInspectorSignPlace());
		attributes.put("inspectorSignDate", getInspectorSignDate());
		attributes.put("dossierDate", getDossierDate());
		attributes.put("filedangkykiemtraId", getFiledangkykiemtraId());
		attributes.put("filebienbankiemtraId", getFilebienbankiemtraId());
		attributes.put("filechungchiId", getFilechungchiId());
		attributes.put("filebaocaotnantoanId", getFilebaocaotnantoanId());
		attributes.put("filebaocaotnkhithaiId", getFilebaocaotnkhithaiId());
		attributes.put("fileketluangiamdinhId", getFileketluangiamdinhId());
		attributes.put("SynchDate", getSynchDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long mtGateway = (Long)attributes.get("mtGateway");

		if (mtGateway != null) {
			setMtGateway(mtGateway);
		}

		Long hoSoThuTucId = (Long)attributes.get("hoSoThuTucId");

		if (hoSoThuTucId != null) {
			setHoSoThuTucId(hoSoThuTucId);
		}

		Long sequenceNo = (Long)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		Long vehicleRecordid = (Long)attributes.get("vehicleRecordid");

		if (vehicleRecordid != null) {
			setVehicleRecordid(vehicleRecordid);
		}

		Long draftCertificateid = (Long)attributes.get("draftCertificateid");

		if (draftCertificateid != null) {
			setDraftCertificateid(draftCertificateid);
		}

		Long certificateRecordid = (Long)attributes.get("certificateRecordid");

		if (certificateRecordid != null) {
			setCertificateRecordid(certificateRecordid);
		}

		Long debitNoteId = (Long)attributes.get("debitNoteId");

		if (debitNoteId != null) {
			setDebitNoteId(debitNoteId);
		}

		Long vehicleGroupId = (Long)attributes.get("vehicleGroupId");

		if (vehicleGroupId != null) {
			setVehicleGroupId(vehicleGroupId);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		String technicalSpecCode = (String)attributes.get("technicalSpecCode");

		if (technicalSpecCode != null) {
			setTechnicalSpecCode(technicalSpecCode);
		}

		String referenceCertificateNo = (String)attributes.get(
				"referenceCertificateNo");

		if (referenceCertificateNo != null) {
			setReferenceCertificateNo(referenceCertificateNo);
		}

		String safetytestreportNo = (String)attributes.get("safetytestreportNo");

		if (safetytestreportNo != null) {
			setSafetytestreportNo(safetytestreportNo);
		}

		String emissiontestreportNo = (String)attributes.get(
				"emissiontestreportNo");

		if (emissiontestreportNo != null) {
			setEmissiontestreportNo(emissiontestreportNo);
		}

		String copreportNo = (String)attributes.get("copreportNo");

		if (copreportNo != null) {
			setCopreportNo(copreportNo);
		}

		String controlreportNo = (String)attributes.get("controlreportNo");

		if (controlreportNo != null) {
			setControlreportNo(controlreportNo);
		}

		String vehicletypeDescription = (String)attributes.get(
				"vehicletypeDescription");

		if (vehicletypeDescription != null) {
			setVehicletypeDescription(vehicletypeDescription);
		}

		String vehicleType = (String)attributes.get("vehicleType");

		if (vehicleType != null) {
			setVehicleType(vehicleType);
		}

		String enginetypeDescription = (String)attributes.get(
				"enginetypeDescription");

		if (enginetypeDescription != null) {
			setEnginetypeDescription(enginetypeDescription);
		}

		String engineType = (String)attributes.get("engineType");

		if (engineType != null) {
			setEngineType(engineType);
		}

		Integer markAsVehicle = (Integer)attributes.get("markAsVehicle");

		if (markAsVehicle != null) {
			setMarkAsVehicle(markAsVehicle);
		}

		String trademarkDescription = (String)attributes.get(
				"trademarkDescription");

		if (trademarkDescription != null) {
			setTrademarkDescription(trademarkDescription);
		}

		String tradeMark = (String)attributes.get("tradeMark");

		if (tradeMark != null) {
			setTradeMark(tradeMark);
		}

		String commercialName = (String)attributes.get("commercialName");

		if (commercialName != null) {
			setCommercialName(commercialName);
		}

		String modelCode = (String)attributes.get("modelCode");

		if (modelCode != null) {
			setModelCode(modelCode);
		}

		String productionPlant = (String)attributes.get("productionPlant");

		if (productionPlant != null) {
			setProductionPlant(productionPlant);
		}

		String addressOfProductionPlant = (String)attributes.get(
				"addressOfProductionPlant");

		if (addressOfProductionPlant != null) {
			setAddressOfProductionPlant(addressOfProductionPlant);
		}

		String emissionStandard = (String)attributes.get("emissionStandard");

		if (emissionStandard != null) {
			setEmissionStandard(emissionStandard);
		}

		Long codeNumber = (Long)attributes.get("codeNumber");

		if (codeNumber != null) {
			setCodeNumber(codeNumber);
		}

		String chassisNumber = (String)attributes.get("chassisNumber");

		if (chassisNumber != null) {
			setChassisNumber(chassisNumber);
		}

		String engineNumber = (String)attributes.get("engineNumber");

		if (engineNumber != null) {
			setEngineNumber(engineNumber);
		}

		String productionYear = (String)attributes.get("productionYear");

		if (productionYear != null) {
			setProductionYear(productionYear);
		}

		String countryCode = (String)attributes.get("countryCode");

		if (countryCode != null) {
			setCountryCode(countryCode);
		}

		String countryName = (String)attributes.get("countryName");

		if (countryName != null) {
			setCountryName(countryName);
		}

		String currentStatus = (String)attributes.get("currentStatus");

		if (currentStatus != null) {
			setCurrentStatus(currentStatus);
		}

		String vehicleEngineUsage = (String)attributes.get("vehicleEngineUsage");

		if (vehicleEngineUsage != null) {
			setVehicleEngineUsage(vehicleEngineUsage);
		}

		String vehicleColor = (String)attributes.get("vehicleColor");

		if (vehicleColor != null) {
			setVehicleColor(vehicleColor);
		}

		Double unitPrice = (Double)attributes.get("unitPrice");

		if (unitPrice != null) {
			setUnitPrice(unitPrice);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		Long markUpStatus = (Long)attributes.get("markUpStatus");

		if (markUpStatus != null) {
			setMarkUpStatus(markUpStatus);
		}

		Integer markAsSample = (Integer)attributes.get("markAsSample");

		if (markAsSample != null) {
			setMarkAsSample(markAsSample);
		}

		Long vehicleengineStatus = (Long)attributes.get("vehicleengineStatus");

		if (vehicleengineStatus != null) {
			setVehicleengineStatus(vehicleengineStatus);
		}

		Long vehicleengineFolder = (Long)attributes.get("vehicleengineFolder");

		if (vehicleengineFolder != null) {
			setVehicleengineFolder(vehicleengineFolder);
		}

		Long vehicleGroupInitialId = (Long)attributes.get(
				"vehicleGroupInitialId");

		if (vehicleGroupInitialId != null) {
			setVehicleGroupInitialId(vehicleGroupInitialId);
		}

		Long registeredInspectionId = (Long)attributes.get(
				"registeredInspectionId");

		if (registeredInspectionId != null) {
			setRegisteredInspectionId(registeredInspectionId);
		}

		String registeredNumber = (String)attributes.get("registeredNumber");

		if (registeredNumber != null) {
			setRegisteredNumber(registeredNumber);
		}

		String importerCode = (String)attributes.get("importerCode");

		if (importerCode != null) {
			setImporterCode(importerCode);
		}

		String importerName = (String)attributes.get("importerName");

		if (importerName != null) {
			setImporterName(importerName);
		}

		String importerAddress = (String)attributes.get("importerAddress");

		if (importerAddress != null) {
			setImporterAddress(importerAddress);
		}

		String representative = (String)attributes.get("representative");

		if (representative != null) {
			setRepresentative(representative);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String fax = (String)attributes.get("fax");

		if (fax != null) {
			setFax(fax);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Date inspectionDate = (Date)attributes.get("inspectionDate");

		if (inspectionDate != null) {
			setInspectionDate(inspectionDate);
		}

		String inspectionSite = (String)attributes.get("inspectionSite");

		if (inspectionSite != null) {
			setInspectionSite(inspectionSite);
		}

		String inspectionDistrictCode = (String)attributes.get(
				"inspectionDistrictCode");

		if (inspectionDistrictCode != null) {
			setInspectionDistrictCode(inspectionDistrictCode);
		}

		String inspectionProvinceCode = (String)attributes.get(
				"inspectionProvinceCode");

		if (inspectionProvinceCode != null) {
			setInspectionProvinceCode(inspectionProvinceCode);
		}

		String inspectionDistrict = (String)attributes.get("inspectionDistrict");

		if (inspectionDistrict != null) {
			setInspectionDistrict(inspectionDistrict);
		}

		String inspectionProvince = (String)attributes.get("inspectionProvince");

		if (inspectionProvince != null) {
			setInspectionProvince(inspectionProvince);
		}

		Long confirmedInspectionId = (Long)attributes.get(
				"confirmedInspectionId");

		if (confirmedInspectionId != null) {
			setConfirmedInspectionId(confirmedInspectionId);
		}

		Long inspectionRecordId = (Long)attributes.get("inspectionRecordId");

		if (inspectionRecordId != null) {
			setInspectionRecordId(inspectionRecordId);
		}

		String inspectionRecordNo = (String)attributes.get("inspectionRecordNo");

		if (inspectionRecordNo != null) {
			setInspectionRecordNo(inspectionRecordNo);
		}

		Date inspectionDateFrom = (Date)attributes.get("inspectionDateFrom");

		if (inspectionDateFrom != null) {
			setInspectionDateFrom(inspectionDateFrom);
		}

		Date inspectionDateTo = (Date)attributes.get("inspectionDateTo");

		if (inspectionDateTo != null) {
			setInspectionDateTo(inspectionDateTo);
		}

		Long inspectionMode = (Long)attributes.get("inspectionMode");

		if (inspectionMode != null) {
			setInspectionMode(inspectionMode);
		}

		String inspectionModeDescription = (String)attributes.get(
				"inspectionModeDescription");

		if (inspectionModeDescription != null) {
			setInspectionModeDescription(inspectionModeDescription);
		}

		Long confirmedResult = (Long)attributes.get("confirmedResult");

		if (confirmedResult != null) {
			setConfirmedResult(confirmedResult);
		}

		String confirmedResultDescription = (String)attributes.get(
				"confirmedResultDescription");

		if (confirmedResultDescription != null) {
			setConfirmedResultDescription(confirmedResultDescription);
		}

		Date importCustomDeclareDate = (Date)attributes.get(
				"importCustomDeclareDate");

		if (importCustomDeclareDate != null) {
			setImportCustomDeclareDate(importCustomDeclareDate);
		}

		String importCustomDeclareNo = (String)attributes.get(
				"importCustomDeclareNo");

		if (importCustomDeclareNo != null) {
			setImportCustomDeclareNo(importCustomDeclareNo);
		}

		String corporationCode = (String)attributes.get("corporationCode");

		if (corporationCode != null) {
			setCorporationCode(corporationCode);
		}

		String corporationName = (String)attributes.get("corporationName");

		if (corporationName != null) {
			setCorporationName(corporationName);
		}

		String inspectorContactCode = (String)attributes.get(
				"inspectorContactCode");

		if (inspectorContactCode != null) {
			setInspectorContactCode(inspectorContactCode);
		}

		String inspectorName = (String)attributes.get("inspectorName");

		if (inspectorName != null) {
			setInspectorName(inspectorName);
		}

		Long certificateType = (Long)attributes.get("certificateType");

		if (certificateType != null) {
			setCertificateType(certificateType);
		}

		String certificateNumber = (String)attributes.get("certificateNumber");

		if (certificateNumber != null) {
			setCertificateNumber(certificateNumber);
		}

		String oldcertificateNumber = (String)attributes.get(
				"oldcertificateNumber");

		if (oldcertificateNumber != null) {
			setOldcertificateNumber(oldcertificateNumber);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		Long stampStatus = (Long)attributes.get("stampStatus");

		if (stampStatus != null) {
			setStampStatus(stampStatus);
		}

		String certificateStatus = (String)attributes.get("certificateStatus");

		if (certificateStatus != null) {
			setCertificateStatus(certificateStatus);
		}

		Long digitalIssued = (Long)attributes.get("digitalIssued");

		if (digitalIssued != null) {
			setDigitalIssued(digitalIssued);
		}

		Long markupSafeTest = (Long)attributes.get("markupSafeTest");

		if (markupSafeTest != null) {
			setMarkupSafeTest(markupSafeTest);
		}

		Long markupEmissionTest = (Long)attributes.get("markupEmissionTest");

		if (markupEmissionTest != null) {
			setMarkupEmissionTest(markupEmissionTest);
		}

		Long markupControl = (Long)attributes.get("markupControl");

		if (markupControl != null) {
			setMarkupControl(markupControl);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}

		String inspectorOrganization = (String)attributes.get(
				"inspectorOrganization");

		if (inspectorOrganization != null) {
			setInspectorOrganization(inspectorOrganization);
		}

		String inspectorDivision = (String)attributes.get("inspectorDivision");

		if (inspectorDivision != null) {
			setInspectorDivision(inspectorDivision);
		}

		String inspectorSignName = (String)attributes.get("inspectorSignName");

		if (inspectorSignName != null) {
			setInspectorSignName(inspectorSignName);
		}

		String inspectorSignTitle = (String)attributes.get("inspectorSignTitle");

		if (inspectorSignTitle != null) {
			setInspectorSignTitle(inspectorSignTitle);
		}

		String inspectorSignPlace = (String)attributes.get("inspectorSignPlace");

		if (inspectorSignPlace != null) {
			setInspectorSignPlace(inspectorSignPlace);
		}

		Date inspectorSignDate = (Date)attributes.get("inspectorSignDate");

		if (inspectorSignDate != null) {
			setInspectorSignDate(inspectorSignDate);
		}

		Date dossierDate = (Date)attributes.get("dossierDate");

		if (dossierDate != null) {
			setDossierDate(dossierDate);
		}

		Long filedangkykiemtraId = (Long)attributes.get("filedangkykiemtraId");

		if (filedangkykiemtraId != null) {
			setFiledangkykiemtraId(filedangkykiemtraId);
		}

		Long filebienbankiemtraId = (Long)attributes.get("filebienbankiemtraId");

		if (filebienbankiemtraId != null) {
			setFilebienbankiemtraId(filebienbankiemtraId);
		}

		Long filechungchiId = (Long)attributes.get("filechungchiId");

		if (filechungchiId != null) {
			setFilechungchiId(filechungchiId);
		}

		Long filebaocaotnantoanId = (Long)attributes.get("filebaocaotnantoanId");

		if (filebaocaotnantoanId != null) {
			setFilebaocaotnantoanId(filebaocaotnantoanId);
		}

		Long filebaocaotnkhithaiId = (Long)attributes.get(
				"filebaocaotnkhithaiId");

		if (filebaocaotnkhithaiId != null) {
			setFilebaocaotnkhithaiId(filebaocaotnkhithaiId);
		}

		Long fileketluangiamdinhId = (Long)attributes.get(
				"fileketluangiamdinhId");

		if (fileketluangiamdinhId != null) {
			setFileketluangiamdinhId(fileketluangiamdinhId);
		}

		Date SynchDate = (Date)attributes.get("SynchDate");

		if (SynchDate != null) {
			setSynchDate(SynchDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getMtGateway() {
		return _mtGateway;
	}

	@Override
	public void setMtGateway(long mtGateway) {
		_mtGateway = mtGateway;
	}

	@JSON
	@Override
	public long getHoSoThuTucId() {
		return _hoSoThuTucId;
	}

	@Override
	public void setHoSoThuTucId(long hoSoThuTucId) {
		_hoSoThuTucId = hoSoThuTucId;
	}

	@JSON
	@Override
	public long getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(long sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@JSON
	@Override
	public long getVehicleRecordid() {
		return _vehicleRecordid;
	}

	@Override
	public void setVehicleRecordid(long vehicleRecordid) {
		_vehicleRecordid = vehicleRecordid;
	}

	@JSON
	@Override
	public long getDraftCertificateid() {
		return _draftCertificateid;
	}

	@Override
	public void setDraftCertificateid(long draftCertificateid) {
		_draftCertificateid = draftCertificateid;
	}

	@JSON
	@Override
	public long getCertificateRecordid() {
		return _certificateRecordid;
	}

	@Override
	public void setCertificateRecordid(long certificateRecordid) {
		_certificateRecordid = certificateRecordid;
	}

	@JSON
	@Override
	public long getDebitNoteId() {
		return _debitNoteId;
	}

	@Override
	public void setDebitNoteId(long debitNoteId) {
		_debitNoteId = debitNoteId;
	}

	@JSON
	@Override
	public long getVehicleGroupId() {
		return _vehicleGroupId;
	}

	@Override
	public void setVehicleGroupId(long vehicleGroupId) {
		_vehicleGroupId = vehicleGroupId;
	}

	@JSON
	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_vehicleClass = vehicleClass;
	}

	@JSON
	@Override
	public String getTechnicalSpecCode() {
		if (_technicalSpecCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _technicalSpecCode;
		}
	}

	@Override
	public void setTechnicalSpecCode(String technicalSpecCode) {
		_technicalSpecCode = technicalSpecCode;
	}

	@JSON
	@Override
	public String getReferenceCertificateNo() {
		if (_referenceCertificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _referenceCertificateNo;
		}
	}

	@Override
	public void setReferenceCertificateNo(String referenceCertificateNo) {
		_referenceCertificateNo = referenceCertificateNo;
	}

	@JSON
	@Override
	public String getSafetytestreportNo() {
		if (_safetytestreportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _safetytestreportNo;
		}
	}

	@Override
	public void setSafetytestreportNo(String safetytestreportNo) {
		_safetytestreportNo = safetytestreportNo;
	}

	@JSON
	@Override
	public String getEmissiontestreportNo() {
		if (_emissiontestreportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissiontestreportNo;
		}
	}

	@Override
	public void setEmissiontestreportNo(String emissiontestreportNo) {
		_emissiontestreportNo = emissiontestreportNo;
	}

	@JSON
	@Override
	public String getCopreportNo() {
		if (_copreportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _copreportNo;
		}
	}

	@Override
	public void setCopreportNo(String copreportNo) {
		_copreportNo = copreportNo;
	}

	@JSON
	@Override
	public String getControlreportNo() {
		if (_controlreportNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _controlreportNo;
		}
	}

	@Override
	public void setControlreportNo(String controlreportNo) {
		_controlreportNo = controlreportNo;
	}

	@JSON
	@Override
	public String getVehicletypeDescription() {
		if (_vehicletypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicletypeDescription;
		}
	}

	@Override
	public void setVehicletypeDescription(String vehicletypeDescription) {
		_vehicletypeDescription = vehicletypeDescription;
	}

	@JSON
	@Override
	public String getVehicleType() {
		if (_vehicleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleType;
		}
	}

	@Override
	public void setVehicleType(String vehicleType) {
		_vehicleType = vehicleType;
	}

	@JSON
	@Override
	public String getEnginetypeDescription() {
		if (_enginetypeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _enginetypeDescription;
		}
	}

	@Override
	public void setEnginetypeDescription(String enginetypeDescription) {
		_enginetypeDescription = enginetypeDescription;
	}

	@JSON
	@Override
	public String getEngineType() {
		if (_engineType == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineType;
		}
	}

	@Override
	public void setEngineType(String engineType) {
		_engineType = engineType;
	}

	@JSON
	@Override
	public int getMarkAsVehicle() {
		return _markAsVehicle;
	}

	@Override
	public void setMarkAsVehicle(int markAsVehicle) {
		_markAsVehicle = markAsVehicle;
	}

	@JSON
	@Override
	public String getTrademarkDescription() {
		if (_trademarkDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _trademarkDescription;
		}
	}

	@Override
	public void setTrademarkDescription(String trademarkDescription) {
		_trademarkDescription = trademarkDescription;
	}

	@JSON
	@Override
	public String getTradeMark() {
		if (_tradeMark == null) {
			return StringPool.BLANK;
		}
		else {
			return _tradeMark;
		}
	}

	@Override
	public void setTradeMark(String tradeMark) {
		_tradeMark = tradeMark;
	}

	@JSON
	@Override
	public String getCommercialName() {
		if (_commercialName == null) {
			return StringPool.BLANK;
		}
		else {
			return _commercialName;
		}
	}

	@Override
	public void setCommercialName(String commercialName) {
		_commercialName = commercialName;
	}

	@JSON
	@Override
	public String getModelCode() {
		if (_modelCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _modelCode;
		}
	}

	@Override
	public void setModelCode(String modelCode) {
		_modelCode = modelCode;
	}

	@JSON
	@Override
	public String getProductionPlant() {
		if (_productionPlant == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionPlant;
		}
	}

	@Override
	public void setProductionPlant(String productionPlant) {
		_productionPlant = productionPlant;
	}

	@JSON
	@Override
	public String getAddressOfProductionPlant() {
		if (_addressOfProductionPlant == null) {
			return StringPool.BLANK;
		}
		else {
			return _addressOfProductionPlant;
		}
	}

	@Override
	public void setAddressOfProductionPlant(String addressOfProductionPlant) {
		_addressOfProductionPlant = addressOfProductionPlant;
	}

	@JSON
	@Override
	public String getEmissionStandard() {
		if (_emissionStandard == null) {
			return StringPool.BLANK;
		}
		else {
			return _emissionStandard;
		}
	}

	@Override
	public void setEmissionStandard(String emissionStandard) {
		_emissionStandard = emissionStandard;
	}

	@JSON
	@Override
	public long getCodeNumber() {
		return _codeNumber;
	}

	@Override
	public void setCodeNumber(long codeNumber) {
		_codeNumber = codeNumber;
	}

	@JSON
	@Override
	public String getChassisNumber() {
		if (_chassisNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _chassisNumber;
		}
	}

	@Override
	public void setChassisNumber(String chassisNumber) {
		_chassisNumber = chassisNumber;
	}

	@JSON
	@Override
	public String getEngineNumber() {
		if (_engineNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineNumber;
		}
	}

	@Override
	public void setEngineNumber(String engineNumber) {
		_engineNumber = engineNumber;
	}

	@JSON
	@Override
	public String getProductionYear() {
		if (_productionYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionYear;
		}
	}

	@Override
	public void setProductionYear(String productionYear) {
		_productionYear = productionYear;
	}

	@JSON
	@Override
	public String getCountryCode() {
		if (_countryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryCode;
		}
	}

	@Override
	public void setCountryCode(String countryCode) {
		_countryCode = countryCode;
	}

	@JSON
	@Override
	public String getCountryName() {
		if (_countryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryName;
		}
	}

	@Override
	public void setCountryName(String countryName) {
		_countryName = countryName;
	}

	@JSON
	@Override
	public String getCurrentStatus() {
		if (_currentStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentStatus;
		}
	}

	@Override
	public void setCurrentStatus(String currentStatus) {
		_currentStatus = currentStatus;
	}

	@JSON
	@Override
	public String getVehicleEngineUsage() {
		if (_vehicleEngineUsage == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleEngineUsage;
		}
	}

	@Override
	public void setVehicleEngineUsage(String vehicleEngineUsage) {
		_vehicleEngineUsage = vehicleEngineUsage;
	}

	@JSON
	@Override
	public String getVehicleColor() {
		if (_vehicleColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleColor;
		}
	}

	@Override
	public void setVehicleColor(String vehicleColor) {
		_vehicleColor = vehicleColor;
	}

	@JSON
	@Override
	public double getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(double unitPrice) {
		_unitPrice = unitPrice;
	}

	@JSON
	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public long getMarkUpStatus() {
		return _markUpStatus;
	}

	@Override
	public void setMarkUpStatus(long markUpStatus) {
		_markUpStatus = markUpStatus;
	}

	@JSON
	@Override
	public int getMarkAsSample() {
		return _markAsSample;
	}

	@Override
	public void setMarkAsSample(int markAsSample) {
		_markAsSample = markAsSample;
	}

	@JSON
	@Override
	public long getVehicleengineStatus() {
		return _vehicleengineStatus;
	}

	@Override
	public void setVehicleengineStatus(long vehicleengineStatus) {
		_vehicleengineStatus = vehicleengineStatus;
	}

	@JSON
	@Override
	public long getVehicleengineFolder() {
		return _vehicleengineFolder;
	}

	@Override
	public void setVehicleengineFolder(long vehicleengineFolder) {
		_vehicleengineFolder = vehicleengineFolder;
	}

	@JSON
	@Override
	public long getVehicleGroupInitialId() {
		return _vehicleGroupInitialId;
	}

	@Override
	public void setVehicleGroupInitialId(long vehicleGroupInitialId) {
		_vehicleGroupInitialId = vehicleGroupInitialId;
	}

	@JSON
	@Override
	public long getRegisteredInspectionId() {
		return _registeredInspectionId;
	}

	@Override
	public void setRegisteredInspectionId(long registeredInspectionId) {
		_registeredInspectionId = registeredInspectionId;
	}

	@JSON
	@Override
	public String getRegisteredNumber() {
		if (_registeredNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registeredNumber;
		}
	}

	@Override
	public void setRegisteredNumber(String registeredNumber) {
		_registeredNumber = registeredNumber;
	}

	@JSON
	@Override
	public String getImporterCode() {
		if (_importerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerCode;
		}
	}

	@Override
	public void setImporterCode(String importerCode) {
		_importerCode = importerCode;
	}

	@JSON
	@Override
	public String getImporterName() {
		if (_importerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerName;
		}
	}

	@Override
	public void setImporterName(String importerName) {
		_importerName = importerName;
	}

	@JSON
	@Override
	public String getImporterAddress() {
		if (_importerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerAddress;
		}
	}

	@Override
	public void setImporterAddress(String importerAddress) {
		_importerAddress = importerAddress;
	}

	@JSON
	@Override
	public String getRepresentative() {
		if (_representative == null) {
			return StringPool.BLANK;
		}
		else {
			return _representative;
		}
	}

	@Override
	public void setRepresentative(String representative) {
		_representative = representative;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getFax() {
		if (_fax == null) {
			return StringPool.BLANK;
		}
		else {
			return _fax;
		}
	}

	@Override
	public void setFax(String fax) {
		_fax = fax;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public Date getInspectionDate() {
		return _inspectionDate;
	}

	@Override
	public void setInspectionDate(Date inspectionDate) {
		_inspectionDate = inspectionDate;
	}

	@JSON
	@Override
	public String getInspectionSite() {
		if (_inspectionSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionSite;
		}
	}

	@Override
	public void setInspectionSite(String inspectionSite) {
		_inspectionSite = inspectionSite;
	}

	@JSON
	@Override
	public String getInspectionDistrictCode() {
		if (_inspectionDistrictCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionDistrictCode;
		}
	}

	@Override
	public void setInspectionDistrictCode(String inspectionDistrictCode) {
		_inspectionDistrictCode = inspectionDistrictCode;
	}

	@JSON
	@Override
	public String getInspectionProvinceCode() {
		if (_inspectionProvinceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionProvinceCode;
		}
	}

	@Override
	public void setInspectionProvinceCode(String inspectionProvinceCode) {
		_inspectionProvinceCode = inspectionProvinceCode;
	}

	@JSON
	@Override
	public String getInspectionDistrict() {
		if (_inspectionDistrict == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionDistrict;
		}
	}

	@Override
	public void setInspectionDistrict(String inspectionDistrict) {
		_inspectionDistrict = inspectionDistrict;
	}

	@JSON
	@Override
	public String getInspectionProvince() {
		if (_inspectionProvince == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionProvince;
		}
	}

	@Override
	public void setInspectionProvince(String inspectionProvince) {
		_inspectionProvince = inspectionProvince;
	}

	@JSON
	@Override
	public long getConfirmedInspectionId() {
		return _confirmedInspectionId;
	}

	@Override
	public void setConfirmedInspectionId(long confirmedInspectionId) {
		_confirmedInspectionId = confirmedInspectionId;
	}

	@JSON
	@Override
	public long getInspectionRecordId() {
		return _inspectionRecordId;
	}

	@Override
	public void setInspectionRecordId(long inspectionRecordId) {
		_inspectionRecordId = inspectionRecordId;
	}

	@JSON
	@Override
	public String getInspectionRecordNo() {
		if (_inspectionRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionRecordNo;
		}
	}

	@Override
	public void setInspectionRecordNo(String inspectionRecordNo) {
		_inspectionRecordNo = inspectionRecordNo;
	}

	@JSON
	@Override
	public Date getInspectionDateFrom() {
		return _inspectionDateFrom;
	}

	@Override
	public void setInspectionDateFrom(Date inspectionDateFrom) {
		_inspectionDateFrom = inspectionDateFrom;
	}

	@JSON
	@Override
	public Date getInspectionDateTo() {
		return _inspectionDateTo;
	}

	@Override
	public void setInspectionDateTo(Date inspectionDateTo) {
		_inspectionDateTo = inspectionDateTo;
	}

	@JSON
	@Override
	public long getInspectionMode() {
		return _inspectionMode;
	}

	@Override
	public void setInspectionMode(long inspectionMode) {
		_inspectionMode = inspectionMode;
	}

	@JSON
	@Override
	public String getInspectionModeDescription() {
		if (_inspectionModeDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionModeDescription;
		}
	}

	@Override
	public void setInspectionModeDescription(String inspectionModeDescription) {
		_inspectionModeDescription = inspectionModeDescription;
	}

	@JSON
	@Override
	public long getConfirmedResult() {
		return _confirmedResult;
	}

	@Override
	public void setConfirmedResult(long confirmedResult) {
		_confirmedResult = confirmedResult;
	}

	@JSON
	@Override
	public String getConfirmedResultDescription() {
		if (_confirmedResultDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _confirmedResultDescription;
		}
	}

	@Override
	public void setConfirmedResultDescription(String confirmedResultDescription) {
		_confirmedResultDescription = confirmedResultDescription;
	}

	@JSON
	@Override
	public Date getImportCustomDeclareDate() {
		return _importCustomDeclareDate;
	}

	@Override
	public void setImportCustomDeclareDate(Date importCustomDeclareDate) {
		_importCustomDeclareDate = importCustomDeclareDate;
	}

	@JSON
	@Override
	public String getImportCustomDeclareNo() {
		if (_importCustomDeclareNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _importCustomDeclareNo;
		}
	}

	@Override
	public void setImportCustomDeclareNo(String importCustomDeclareNo) {
		_importCustomDeclareNo = importCustomDeclareNo;
	}

	@JSON
	@Override
	public String getCorporationCode() {
		if (_corporationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationCode;
		}
	}

	@Override
	public void setCorporationCode(String corporationCode) {
		_corporationCode = corporationCode;
	}

	@JSON
	@Override
	public String getCorporationName() {
		if (_corporationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationName;
		}
	}

	@Override
	public void setCorporationName(String corporationName) {
		_corporationName = corporationName;
	}

	@JSON
	@Override
	public String getInspectorContactCode() {
		if (_inspectorContactCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorContactCode;
		}
	}

	@Override
	public void setInspectorContactCode(String inspectorContactCode) {
		_inspectorContactCode = inspectorContactCode;
	}

	@JSON
	@Override
	public String getInspectorName() {
		if (_inspectorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorName;
		}
	}

	@Override
	public void setInspectorName(String inspectorName) {
		_inspectorName = inspectorName;
	}

	@JSON
	@Override
	public long getCertificateType() {
		return _certificateType;
	}

	@Override
	public void setCertificateType(long certificateType) {
		_certificateType = certificateType;
	}

	@JSON
	@Override
	public String getCertificateNumber() {
		if (_certificateNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateNumber;
		}
	}

	@Override
	public void setCertificateNumber(String certificateNumber) {
		_certificateNumber = certificateNumber;
	}

	@JSON
	@Override
	public String getOldcertificateNumber() {
		if (_oldcertificateNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _oldcertificateNumber;
		}
	}

	@Override
	public void setOldcertificateNumber(String oldcertificateNumber) {
		_oldcertificateNumber = oldcertificateNumber;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public long getStampStatus() {
		return _stampStatus;
	}

	@Override
	public void setStampStatus(long stampStatus) {
		_stampStatus = stampStatus;
	}

	@JSON
	@Override
	public String getCertificateStatus() {
		if (_certificateStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateStatus;
		}
	}

	@Override
	public void setCertificateStatus(String certificateStatus) {
		_certificateStatus = certificateStatus;
	}

	@JSON
	@Override
	public long getDigitalIssued() {
		return _digitalIssued;
	}

	@Override
	public void setDigitalIssued(long digitalIssued) {
		_digitalIssued = digitalIssued;
	}

	@JSON
	@Override
	public long getMarkupSafeTest() {
		return _markupSafeTest;
	}

	@Override
	public void setMarkupSafeTest(long markupSafeTest) {
		_markupSafeTest = markupSafeTest;
	}

	@JSON
	@Override
	public long getMarkupEmissionTest() {
		return _markupEmissionTest;
	}

	@Override
	public void setMarkupEmissionTest(long markupEmissionTest) {
		_markupEmissionTest = markupEmissionTest;
	}

	@JSON
	@Override
	public long getMarkupControl() {
		return _markupControl;
	}

	@Override
	public void setMarkupControl(long markupControl) {
		_markupControl = markupControl;
	}

	@JSON
	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	@JSON
	@Override
	public String getInspectorOrganization() {
		if (_inspectorOrganization == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorOrganization;
		}
	}

	@Override
	public void setInspectorOrganization(String inspectorOrganization) {
		_inspectorOrganization = inspectorOrganization;
	}

	@JSON
	@Override
	public String getInspectorDivision() {
		if (_inspectorDivision == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorDivision;
		}
	}

	@Override
	public void setInspectorDivision(String inspectorDivision) {
		_inspectorDivision = inspectorDivision;
	}

	@JSON
	@Override
	public String getInspectorSignName() {
		if (_inspectorSignName == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSignName;
		}
	}

	@Override
	public void setInspectorSignName(String inspectorSignName) {
		_inspectorSignName = inspectorSignName;
	}

	@JSON
	@Override
	public String getInspectorSignTitle() {
		if (_inspectorSignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSignTitle;
		}
	}

	@Override
	public void setInspectorSignTitle(String inspectorSignTitle) {
		_inspectorSignTitle = inspectorSignTitle;
	}

	@JSON
	@Override
	public String getInspectorSignPlace() {
		if (_inspectorSignPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSignPlace;
		}
	}

	@Override
	public void setInspectorSignPlace(String inspectorSignPlace) {
		_inspectorSignPlace = inspectorSignPlace;
	}

	@JSON
	@Override
	public Date getInspectorSignDate() {
		return _inspectorSignDate;
	}

	@Override
	public void setInspectorSignDate(Date inspectorSignDate) {
		_inspectorSignDate = inspectorSignDate;
	}

	@JSON
	@Override
	public Date getDossierDate() {
		return _dossierDate;
	}

	@Override
	public void setDossierDate(Date dossierDate) {
		_dossierDate = dossierDate;
	}

	@JSON
	@Override
	public long getFiledangkykiemtraId() {
		return _filedangkykiemtraId;
	}

	@Override
	public void setFiledangkykiemtraId(long filedangkykiemtraId) {
		_filedangkykiemtraId = filedangkykiemtraId;
	}

	@JSON
	@Override
	public long getFilebienbankiemtraId() {
		return _filebienbankiemtraId;
	}

	@Override
	public void setFilebienbankiemtraId(long filebienbankiemtraId) {
		_filebienbankiemtraId = filebienbankiemtraId;
	}

	@JSON
	@Override
	public long getFilechungchiId() {
		return _filechungchiId;
	}

	@Override
	public void setFilechungchiId(long filechungchiId) {
		_filechungchiId = filechungchiId;
	}

	@JSON
	@Override
	public long getFilebaocaotnantoanId() {
		return _filebaocaotnantoanId;
	}

	@Override
	public void setFilebaocaotnantoanId(long filebaocaotnantoanId) {
		_filebaocaotnantoanId = filebaocaotnantoanId;
	}

	@JSON
	@Override
	public long getFilebaocaotnkhithaiId() {
		return _filebaocaotnkhithaiId;
	}

	@Override
	public void setFilebaocaotnkhithaiId(long filebaocaotnkhithaiId) {
		_filebaocaotnkhithaiId = filebaocaotnkhithaiId;
	}

	@JSON
	@Override
	public long getFileketluangiamdinhId() {
		return _fileketluangiamdinhId;
	}

	@Override
	public void setFileketluangiamdinhId(long fileketluangiamdinhId) {
		_fileketluangiamdinhId = fileketluangiamdinhId;
	}

	@JSON
	@Override
	public Date getSynchDate() {
		return _SynchDate;
	}

	@Override
	public void setSynchDate(Date SynchDate) {
		_SynchDate = SynchDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VehicleCertificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VehicleCertificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VehicleCertificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VehicleCertificateImpl vehicleCertificateImpl = new VehicleCertificateImpl();

		vehicleCertificateImpl.setId(getId());
		vehicleCertificateImpl.setMtGateway(getMtGateway());
		vehicleCertificateImpl.setHoSoThuTucId(getHoSoThuTucId());
		vehicleCertificateImpl.setSequenceNo(getSequenceNo());
		vehicleCertificateImpl.setVehicleRecordid(getVehicleRecordid());
		vehicleCertificateImpl.setDraftCertificateid(getDraftCertificateid());
		vehicleCertificateImpl.setCertificateRecordid(getCertificateRecordid());
		vehicleCertificateImpl.setDebitNoteId(getDebitNoteId());
		vehicleCertificateImpl.setVehicleGroupId(getVehicleGroupId());
		vehicleCertificateImpl.setVehicleClass(getVehicleClass());
		vehicleCertificateImpl.setTechnicalSpecCode(getTechnicalSpecCode());
		vehicleCertificateImpl.setReferenceCertificateNo(getReferenceCertificateNo());
		vehicleCertificateImpl.setSafetytestreportNo(getSafetytestreportNo());
		vehicleCertificateImpl.setEmissiontestreportNo(getEmissiontestreportNo());
		vehicleCertificateImpl.setCopreportNo(getCopreportNo());
		vehicleCertificateImpl.setControlreportNo(getControlreportNo());
		vehicleCertificateImpl.setVehicletypeDescription(getVehicletypeDescription());
		vehicleCertificateImpl.setVehicleType(getVehicleType());
		vehicleCertificateImpl.setEnginetypeDescription(getEnginetypeDescription());
		vehicleCertificateImpl.setEngineType(getEngineType());
		vehicleCertificateImpl.setMarkAsVehicle(getMarkAsVehicle());
		vehicleCertificateImpl.setTrademarkDescription(getTrademarkDescription());
		vehicleCertificateImpl.setTradeMark(getTradeMark());
		vehicleCertificateImpl.setCommercialName(getCommercialName());
		vehicleCertificateImpl.setModelCode(getModelCode());
		vehicleCertificateImpl.setProductionPlant(getProductionPlant());
		vehicleCertificateImpl.setAddressOfProductionPlant(getAddressOfProductionPlant());
		vehicleCertificateImpl.setEmissionStandard(getEmissionStandard());
		vehicleCertificateImpl.setCodeNumber(getCodeNumber());
		vehicleCertificateImpl.setChassisNumber(getChassisNumber());
		vehicleCertificateImpl.setEngineNumber(getEngineNumber());
		vehicleCertificateImpl.setProductionYear(getProductionYear());
		vehicleCertificateImpl.setCountryCode(getCountryCode());
		vehicleCertificateImpl.setCountryName(getCountryName());
		vehicleCertificateImpl.setCurrentStatus(getCurrentStatus());
		vehicleCertificateImpl.setVehicleEngineUsage(getVehicleEngineUsage());
		vehicleCertificateImpl.setVehicleColor(getVehicleColor());
		vehicleCertificateImpl.setUnitPrice(getUnitPrice());
		vehicleCertificateImpl.setCurrency(getCurrency());
		vehicleCertificateImpl.setRemarks(getRemarks());
		vehicleCertificateImpl.setMarkUpStatus(getMarkUpStatus());
		vehicleCertificateImpl.setMarkAsSample(getMarkAsSample());
		vehicleCertificateImpl.setVehicleengineStatus(getVehicleengineStatus());
		vehicleCertificateImpl.setVehicleengineFolder(getVehicleengineFolder());
		vehicleCertificateImpl.setVehicleGroupInitialId(getVehicleGroupInitialId());
		vehicleCertificateImpl.setRegisteredInspectionId(getRegisteredInspectionId());
		vehicleCertificateImpl.setRegisteredNumber(getRegisteredNumber());
		vehicleCertificateImpl.setImporterCode(getImporterCode());
		vehicleCertificateImpl.setImporterName(getImporterName());
		vehicleCertificateImpl.setImporterAddress(getImporterAddress());
		vehicleCertificateImpl.setRepresentative(getRepresentative());
		vehicleCertificateImpl.setPhone(getPhone());
		vehicleCertificateImpl.setFax(getFax());
		vehicleCertificateImpl.setEmail(getEmail());
		vehicleCertificateImpl.setInspectionDate(getInspectionDate());
		vehicleCertificateImpl.setInspectionSite(getInspectionSite());
		vehicleCertificateImpl.setInspectionDistrictCode(getInspectionDistrictCode());
		vehicleCertificateImpl.setInspectionProvinceCode(getInspectionProvinceCode());
		vehicleCertificateImpl.setInspectionDistrict(getInspectionDistrict());
		vehicleCertificateImpl.setInspectionProvince(getInspectionProvince());
		vehicleCertificateImpl.setConfirmedInspectionId(getConfirmedInspectionId());
		vehicleCertificateImpl.setInspectionRecordId(getInspectionRecordId());
		vehicleCertificateImpl.setInspectionRecordNo(getInspectionRecordNo());
		vehicleCertificateImpl.setInspectionDateFrom(getInspectionDateFrom());
		vehicleCertificateImpl.setInspectionDateTo(getInspectionDateTo());
		vehicleCertificateImpl.setInspectionMode(getInspectionMode());
		vehicleCertificateImpl.setInspectionModeDescription(getInspectionModeDescription());
		vehicleCertificateImpl.setConfirmedResult(getConfirmedResult());
		vehicleCertificateImpl.setConfirmedResultDescription(getConfirmedResultDescription());
		vehicleCertificateImpl.setImportCustomDeclareDate(getImportCustomDeclareDate());
		vehicleCertificateImpl.setImportCustomDeclareNo(getImportCustomDeclareNo());
		vehicleCertificateImpl.setCorporationCode(getCorporationCode());
		vehicleCertificateImpl.setCorporationName(getCorporationName());
		vehicleCertificateImpl.setInspectorContactCode(getInspectorContactCode());
		vehicleCertificateImpl.setInspectorName(getInspectorName());
		vehicleCertificateImpl.setCertificateType(getCertificateType());
		vehicleCertificateImpl.setCertificateNumber(getCertificateNumber());
		vehicleCertificateImpl.setOldcertificateNumber(getOldcertificateNumber());
		vehicleCertificateImpl.setSignDate(getSignDate());
		vehicleCertificateImpl.setStampStatus(getStampStatus());
		vehicleCertificateImpl.setCertificateStatus(getCertificateStatus());
		vehicleCertificateImpl.setDigitalIssued(getDigitalIssued());
		vehicleCertificateImpl.setMarkupSafeTest(getMarkupSafeTest());
		vehicleCertificateImpl.setMarkupEmissionTest(getMarkupEmissionTest());
		vehicleCertificateImpl.setMarkupControl(getMarkupControl());
		vehicleCertificateImpl.setAttachedFile(getAttachedFile());
		vehicleCertificateImpl.setInspectorOrganization(getInspectorOrganization());
		vehicleCertificateImpl.setInspectorDivision(getInspectorDivision());
		vehicleCertificateImpl.setInspectorSignName(getInspectorSignName());
		vehicleCertificateImpl.setInspectorSignTitle(getInspectorSignTitle());
		vehicleCertificateImpl.setInspectorSignPlace(getInspectorSignPlace());
		vehicleCertificateImpl.setInspectorSignDate(getInspectorSignDate());
		vehicleCertificateImpl.setDossierDate(getDossierDate());
		vehicleCertificateImpl.setFiledangkykiemtraId(getFiledangkykiemtraId());
		vehicleCertificateImpl.setFilebienbankiemtraId(getFilebienbankiemtraId());
		vehicleCertificateImpl.setFilechungchiId(getFilechungchiId());
		vehicleCertificateImpl.setFilebaocaotnantoanId(getFilebaocaotnantoanId());
		vehicleCertificateImpl.setFilebaocaotnkhithaiId(getFilebaocaotnkhithaiId());
		vehicleCertificateImpl.setFileketluangiamdinhId(getFileketluangiamdinhId());
		vehicleCertificateImpl.setSynchDate(getSynchDate());

		vehicleCertificateImpl.resetOriginalValues();

		return vehicleCertificateImpl;
	}

	@Override
	public int compareTo(VehicleCertificate vehicleCertificate) {
		int value = 0;

		if (getId() < vehicleCertificate.getId()) {
			value = -1;
		}
		else if (getId() > vehicleCertificate.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VehicleCertificate)) {
			return false;
		}

		VehicleCertificate vehicleCertificate = (VehicleCertificate)obj;

		long primaryKey = vehicleCertificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<VehicleCertificate> toCacheModel() {
		VehicleCertificateCacheModel vehicleCertificateCacheModel = new VehicleCertificateCacheModel();

		vehicleCertificateCacheModel.id = getId();

		vehicleCertificateCacheModel.mtGateway = getMtGateway();

		vehicleCertificateCacheModel.hoSoThuTucId = getHoSoThuTucId();

		vehicleCertificateCacheModel.sequenceNo = getSequenceNo();

		vehicleCertificateCacheModel.vehicleRecordid = getVehicleRecordid();

		vehicleCertificateCacheModel.draftCertificateid = getDraftCertificateid();

		vehicleCertificateCacheModel.certificateRecordid = getCertificateRecordid();

		vehicleCertificateCacheModel.debitNoteId = getDebitNoteId();

		vehicleCertificateCacheModel.vehicleGroupId = getVehicleGroupId();

		vehicleCertificateCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = vehicleCertificateCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			vehicleCertificateCacheModel.vehicleClass = null;
		}

		vehicleCertificateCacheModel.technicalSpecCode = getTechnicalSpecCode();

		String technicalSpecCode = vehicleCertificateCacheModel.technicalSpecCode;

		if ((technicalSpecCode != null) && (technicalSpecCode.length() == 0)) {
			vehicleCertificateCacheModel.technicalSpecCode = null;
		}

		vehicleCertificateCacheModel.referenceCertificateNo = getReferenceCertificateNo();

		String referenceCertificateNo = vehicleCertificateCacheModel.referenceCertificateNo;

		if ((referenceCertificateNo != null) &&
				(referenceCertificateNo.length() == 0)) {
			vehicleCertificateCacheModel.referenceCertificateNo = null;
		}

		vehicleCertificateCacheModel.safetytestreportNo = getSafetytestreportNo();

		String safetytestreportNo = vehicleCertificateCacheModel.safetytestreportNo;

		if ((safetytestreportNo != null) && (safetytestreportNo.length() == 0)) {
			vehicleCertificateCacheModel.safetytestreportNo = null;
		}

		vehicleCertificateCacheModel.emissiontestreportNo = getEmissiontestreportNo();

		String emissiontestreportNo = vehicleCertificateCacheModel.emissiontestreportNo;

		if ((emissiontestreportNo != null) &&
				(emissiontestreportNo.length() == 0)) {
			vehicleCertificateCacheModel.emissiontestreportNo = null;
		}

		vehicleCertificateCacheModel.copreportNo = getCopreportNo();

		String copreportNo = vehicleCertificateCacheModel.copreportNo;

		if ((copreportNo != null) && (copreportNo.length() == 0)) {
			vehicleCertificateCacheModel.copreportNo = null;
		}

		vehicleCertificateCacheModel.controlreportNo = getControlreportNo();

		String controlreportNo = vehicleCertificateCacheModel.controlreportNo;

		if ((controlreportNo != null) && (controlreportNo.length() == 0)) {
			vehicleCertificateCacheModel.controlreportNo = null;
		}

		vehicleCertificateCacheModel.vehicletypeDescription = getVehicletypeDescription();

		String vehicletypeDescription = vehicleCertificateCacheModel.vehicletypeDescription;

		if ((vehicletypeDescription != null) &&
				(vehicletypeDescription.length() == 0)) {
			vehicleCertificateCacheModel.vehicletypeDescription = null;
		}

		vehicleCertificateCacheModel.vehicleType = getVehicleType();

		String vehicleType = vehicleCertificateCacheModel.vehicleType;

		if ((vehicleType != null) && (vehicleType.length() == 0)) {
			vehicleCertificateCacheModel.vehicleType = null;
		}

		vehicleCertificateCacheModel.enginetypeDescription = getEnginetypeDescription();

		String enginetypeDescription = vehicleCertificateCacheModel.enginetypeDescription;

		if ((enginetypeDescription != null) &&
				(enginetypeDescription.length() == 0)) {
			vehicleCertificateCacheModel.enginetypeDescription = null;
		}

		vehicleCertificateCacheModel.engineType = getEngineType();

		String engineType = vehicleCertificateCacheModel.engineType;

		if ((engineType != null) && (engineType.length() == 0)) {
			vehicleCertificateCacheModel.engineType = null;
		}

		vehicleCertificateCacheModel.markAsVehicle = getMarkAsVehicle();

		vehicleCertificateCacheModel.trademarkDescription = getTrademarkDescription();

		String trademarkDescription = vehicleCertificateCacheModel.trademarkDescription;

		if ((trademarkDescription != null) &&
				(trademarkDescription.length() == 0)) {
			vehicleCertificateCacheModel.trademarkDescription = null;
		}

		vehicleCertificateCacheModel.tradeMark = getTradeMark();

		String tradeMark = vehicleCertificateCacheModel.tradeMark;

		if ((tradeMark != null) && (tradeMark.length() == 0)) {
			vehicleCertificateCacheModel.tradeMark = null;
		}

		vehicleCertificateCacheModel.commercialName = getCommercialName();

		String commercialName = vehicleCertificateCacheModel.commercialName;

		if ((commercialName != null) && (commercialName.length() == 0)) {
			vehicleCertificateCacheModel.commercialName = null;
		}

		vehicleCertificateCacheModel.modelCode = getModelCode();

		String modelCode = vehicleCertificateCacheModel.modelCode;

		if ((modelCode != null) && (modelCode.length() == 0)) {
			vehicleCertificateCacheModel.modelCode = null;
		}

		vehicleCertificateCacheModel.productionPlant = getProductionPlant();

		String productionPlant = vehicleCertificateCacheModel.productionPlant;

		if ((productionPlant != null) && (productionPlant.length() == 0)) {
			vehicleCertificateCacheModel.productionPlant = null;
		}

		vehicleCertificateCacheModel.addressOfProductionPlant = getAddressOfProductionPlant();

		String addressOfProductionPlant = vehicleCertificateCacheModel.addressOfProductionPlant;

		if ((addressOfProductionPlant != null) &&
				(addressOfProductionPlant.length() == 0)) {
			vehicleCertificateCacheModel.addressOfProductionPlant = null;
		}

		vehicleCertificateCacheModel.emissionStandard = getEmissionStandard();

		String emissionStandard = vehicleCertificateCacheModel.emissionStandard;

		if ((emissionStandard != null) && (emissionStandard.length() == 0)) {
			vehicleCertificateCacheModel.emissionStandard = null;
		}

		vehicleCertificateCacheModel.codeNumber = getCodeNumber();

		vehicleCertificateCacheModel.chassisNumber = getChassisNumber();

		String chassisNumber = vehicleCertificateCacheModel.chassisNumber;

		if ((chassisNumber != null) && (chassisNumber.length() == 0)) {
			vehicleCertificateCacheModel.chassisNumber = null;
		}

		vehicleCertificateCacheModel.engineNumber = getEngineNumber();

		String engineNumber = vehicleCertificateCacheModel.engineNumber;

		if ((engineNumber != null) && (engineNumber.length() == 0)) {
			vehicleCertificateCacheModel.engineNumber = null;
		}

		vehicleCertificateCacheModel.productionYear = getProductionYear();

		String productionYear = vehicleCertificateCacheModel.productionYear;

		if ((productionYear != null) && (productionYear.length() == 0)) {
			vehicleCertificateCacheModel.productionYear = null;
		}

		vehicleCertificateCacheModel.countryCode = getCountryCode();

		String countryCode = vehicleCertificateCacheModel.countryCode;

		if ((countryCode != null) && (countryCode.length() == 0)) {
			vehicleCertificateCacheModel.countryCode = null;
		}

		vehicleCertificateCacheModel.countryName = getCountryName();

		String countryName = vehicleCertificateCacheModel.countryName;

		if ((countryName != null) && (countryName.length() == 0)) {
			vehicleCertificateCacheModel.countryName = null;
		}

		vehicleCertificateCacheModel.currentStatus = getCurrentStatus();

		String currentStatus = vehicleCertificateCacheModel.currentStatus;

		if ((currentStatus != null) && (currentStatus.length() == 0)) {
			vehicleCertificateCacheModel.currentStatus = null;
		}

		vehicleCertificateCacheModel.vehicleEngineUsage = getVehicleEngineUsage();

		String vehicleEngineUsage = vehicleCertificateCacheModel.vehicleEngineUsage;

		if ((vehicleEngineUsage != null) && (vehicleEngineUsage.length() == 0)) {
			vehicleCertificateCacheModel.vehicleEngineUsage = null;
		}

		vehicleCertificateCacheModel.vehicleColor = getVehicleColor();

		String vehicleColor = vehicleCertificateCacheModel.vehicleColor;

		if ((vehicleColor != null) && (vehicleColor.length() == 0)) {
			vehicleCertificateCacheModel.vehicleColor = null;
		}

		vehicleCertificateCacheModel.unitPrice = getUnitPrice();

		vehicleCertificateCacheModel.currency = getCurrency();

		String currency = vehicleCertificateCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			vehicleCertificateCacheModel.currency = null;
		}

		vehicleCertificateCacheModel.remarks = getRemarks();

		String remarks = vehicleCertificateCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			vehicleCertificateCacheModel.remarks = null;
		}

		vehicleCertificateCacheModel.markUpStatus = getMarkUpStatus();

		vehicleCertificateCacheModel.markAsSample = getMarkAsSample();

		vehicleCertificateCacheModel.vehicleengineStatus = getVehicleengineStatus();

		vehicleCertificateCacheModel.vehicleengineFolder = getVehicleengineFolder();

		vehicleCertificateCacheModel.vehicleGroupInitialId = getVehicleGroupInitialId();

		vehicleCertificateCacheModel.registeredInspectionId = getRegisteredInspectionId();

		vehicleCertificateCacheModel.registeredNumber = getRegisteredNumber();

		String registeredNumber = vehicleCertificateCacheModel.registeredNumber;

		if ((registeredNumber != null) && (registeredNumber.length() == 0)) {
			vehicleCertificateCacheModel.registeredNumber = null;
		}

		vehicleCertificateCacheModel.importerCode = getImporterCode();

		String importerCode = vehicleCertificateCacheModel.importerCode;

		if ((importerCode != null) && (importerCode.length() == 0)) {
			vehicleCertificateCacheModel.importerCode = null;
		}

		vehicleCertificateCacheModel.importerName = getImporterName();

		String importerName = vehicleCertificateCacheModel.importerName;

		if ((importerName != null) && (importerName.length() == 0)) {
			vehicleCertificateCacheModel.importerName = null;
		}

		vehicleCertificateCacheModel.importerAddress = getImporterAddress();

		String importerAddress = vehicleCertificateCacheModel.importerAddress;

		if ((importerAddress != null) && (importerAddress.length() == 0)) {
			vehicleCertificateCacheModel.importerAddress = null;
		}

		vehicleCertificateCacheModel.representative = getRepresentative();

		String representative = vehicleCertificateCacheModel.representative;

		if ((representative != null) && (representative.length() == 0)) {
			vehicleCertificateCacheModel.representative = null;
		}

		vehicleCertificateCacheModel.phone = getPhone();

		String phone = vehicleCertificateCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			vehicleCertificateCacheModel.phone = null;
		}

		vehicleCertificateCacheModel.fax = getFax();

		String fax = vehicleCertificateCacheModel.fax;

		if ((fax != null) && (fax.length() == 0)) {
			vehicleCertificateCacheModel.fax = null;
		}

		vehicleCertificateCacheModel.email = getEmail();

		String email = vehicleCertificateCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			vehicleCertificateCacheModel.email = null;
		}

		Date inspectionDate = getInspectionDate();

		if (inspectionDate != null) {
			vehicleCertificateCacheModel.inspectionDate = inspectionDate.getTime();
		}
		else {
			vehicleCertificateCacheModel.inspectionDate = Long.MIN_VALUE;
		}

		vehicleCertificateCacheModel.inspectionSite = getInspectionSite();

		String inspectionSite = vehicleCertificateCacheModel.inspectionSite;

		if ((inspectionSite != null) && (inspectionSite.length() == 0)) {
			vehicleCertificateCacheModel.inspectionSite = null;
		}

		vehicleCertificateCacheModel.inspectionDistrictCode = getInspectionDistrictCode();

		String inspectionDistrictCode = vehicleCertificateCacheModel.inspectionDistrictCode;

		if ((inspectionDistrictCode != null) &&
				(inspectionDistrictCode.length() == 0)) {
			vehicleCertificateCacheModel.inspectionDistrictCode = null;
		}

		vehicleCertificateCacheModel.inspectionProvinceCode = getInspectionProvinceCode();

		String inspectionProvinceCode = vehicleCertificateCacheModel.inspectionProvinceCode;

		if ((inspectionProvinceCode != null) &&
				(inspectionProvinceCode.length() == 0)) {
			vehicleCertificateCacheModel.inspectionProvinceCode = null;
		}

		vehicleCertificateCacheModel.inspectionDistrict = getInspectionDistrict();

		String inspectionDistrict = vehicleCertificateCacheModel.inspectionDistrict;

		if ((inspectionDistrict != null) && (inspectionDistrict.length() == 0)) {
			vehicleCertificateCacheModel.inspectionDistrict = null;
		}

		vehicleCertificateCacheModel.inspectionProvince = getInspectionProvince();

		String inspectionProvince = vehicleCertificateCacheModel.inspectionProvince;

		if ((inspectionProvince != null) && (inspectionProvince.length() == 0)) {
			vehicleCertificateCacheModel.inspectionProvince = null;
		}

		vehicleCertificateCacheModel.confirmedInspectionId = getConfirmedInspectionId();

		vehicleCertificateCacheModel.inspectionRecordId = getInspectionRecordId();

		vehicleCertificateCacheModel.inspectionRecordNo = getInspectionRecordNo();

		String inspectionRecordNo = vehicleCertificateCacheModel.inspectionRecordNo;

		if ((inspectionRecordNo != null) && (inspectionRecordNo.length() == 0)) {
			vehicleCertificateCacheModel.inspectionRecordNo = null;
		}

		Date inspectionDateFrom = getInspectionDateFrom();

		if (inspectionDateFrom != null) {
			vehicleCertificateCacheModel.inspectionDateFrom = inspectionDateFrom.getTime();
		}
		else {
			vehicleCertificateCacheModel.inspectionDateFrom = Long.MIN_VALUE;
		}

		Date inspectionDateTo = getInspectionDateTo();

		if (inspectionDateTo != null) {
			vehicleCertificateCacheModel.inspectionDateTo = inspectionDateTo.getTime();
		}
		else {
			vehicleCertificateCacheModel.inspectionDateTo = Long.MIN_VALUE;
		}

		vehicleCertificateCacheModel.inspectionMode = getInspectionMode();

		vehicleCertificateCacheModel.inspectionModeDescription = getInspectionModeDescription();

		String inspectionModeDescription = vehicleCertificateCacheModel.inspectionModeDescription;

		if ((inspectionModeDescription != null) &&
				(inspectionModeDescription.length() == 0)) {
			vehicleCertificateCacheModel.inspectionModeDescription = null;
		}

		vehicleCertificateCacheModel.confirmedResult = getConfirmedResult();

		vehicleCertificateCacheModel.confirmedResultDescription = getConfirmedResultDescription();

		String confirmedResultDescription = vehicleCertificateCacheModel.confirmedResultDescription;

		if ((confirmedResultDescription != null) &&
				(confirmedResultDescription.length() == 0)) {
			vehicleCertificateCacheModel.confirmedResultDescription = null;
		}

		Date importCustomDeclareDate = getImportCustomDeclareDate();

		if (importCustomDeclareDate != null) {
			vehicleCertificateCacheModel.importCustomDeclareDate = importCustomDeclareDate.getTime();
		}
		else {
			vehicleCertificateCacheModel.importCustomDeclareDate = Long.MIN_VALUE;
		}

		vehicleCertificateCacheModel.importCustomDeclareNo = getImportCustomDeclareNo();

		String importCustomDeclareNo = vehicleCertificateCacheModel.importCustomDeclareNo;

		if ((importCustomDeclareNo != null) &&
				(importCustomDeclareNo.length() == 0)) {
			vehicleCertificateCacheModel.importCustomDeclareNo = null;
		}

		vehicleCertificateCacheModel.corporationCode = getCorporationCode();

		String corporationCode = vehicleCertificateCacheModel.corporationCode;

		if ((corporationCode != null) && (corporationCode.length() == 0)) {
			vehicleCertificateCacheModel.corporationCode = null;
		}

		vehicleCertificateCacheModel.corporationName = getCorporationName();

		String corporationName = vehicleCertificateCacheModel.corporationName;

		if ((corporationName != null) && (corporationName.length() == 0)) {
			vehicleCertificateCacheModel.corporationName = null;
		}

		vehicleCertificateCacheModel.inspectorContactCode = getInspectorContactCode();

		String inspectorContactCode = vehicleCertificateCacheModel.inspectorContactCode;

		if ((inspectorContactCode != null) &&
				(inspectorContactCode.length() == 0)) {
			vehicleCertificateCacheModel.inspectorContactCode = null;
		}

		vehicleCertificateCacheModel.inspectorName = getInspectorName();

		String inspectorName = vehicleCertificateCacheModel.inspectorName;

		if ((inspectorName != null) && (inspectorName.length() == 0)) {
			vehicleCertificateCacheModel.inspectorName = null;
		}

		vehicleCertificateCacheModel.certificateType = getCertificateType();

		vehicleCertificateCacheModel.certificateNumber = getCertificateNumber();

		String certificateNumber = vehicleCertificateCacheModel.certificateNumber;

		if ((certificateNumber != null) && (certificateNumber.length() == 0)) {
			vehicleCertificateCacheModel.certificateNumber = null;
		}

		vehicleCertificateCacheModel.oldcertificateNumber = getOldcertificateNumber();

		String oldcertificateNumber = vehicleCertificateCacheModel.oldcertificateNumber;

		if ((oldcertificateNumber != null) &&
				(oldcertificateNumber.length() == 0)) {
			vehicleCertificateCacheModel.oldcertificateNumber = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			vehicleCertificateCacheModel.signDate = signDate.getTime();
		}
		else {
			vehicleCertificateCacheModel.signDate = Long.MIN_VALUE;
		}

		vehicleCertificateCacheModel.stampStatus = getStampStatus();

		vehicleCertificateCacheModel.certificateStatus = getCertificateStatus();

		String certificateStatus = vehicleCertificateCacheModel.certificateStatus;

		if ((certificateStatus != null) && (certificateStatus.length() == 0)) {
			vehicleCertificateCacheModel.certificateStatus = null;
		}

		vehicleCertificateCacheModel.digitalIssued = getDigitalIssued();

		vehicleCertificateCacheModel.markupSafeTest = getMarkupSafeTest();

		vehicleCertificateCacheModel.markupEmissionTest = getMarkupEmissionTest();

		vehicleCertificateCacheModel.markupControl = getMarkupControl();

		vehicleCertificateCacheModel.attachedFile = getAttachedFile();

		vehicleCertificateCacheModel.inspectorOrganization = getInspectorOrganization();

		String inspectorOrganization = vehicleCertificateCacheModel.inspectorOrganization;

		if ((inspectorOrganization != null) &&
				(inspectorOrganization.length() == 0)) {
			vehicleCertificateCacheModel.inspectorOrganization = null;
		}

		vehicleCertificateCacheModel.inspectorDivision = getInspectorDivision();

		String inspectorDivision = vehicleCertificateCacheModel.inspectorDivision;

		if ((inspectorDivision != null) && (inspectorDivision.length() == 0)) {
			vehicleCertificateCacheModel.inspectorDivision = null;
		}

		vehicleCertificateCacheModel.inspectorSignName = getInspectorSignName();

		String inspectorSignName = vehicleCertificateCacheModel.inspectorSignName;

		if ((inspectorSignName != null) && (inspectorSignName.length() == 0)) {
			vehicleCertificateCacheModel.inspectorSignName = null;
		}

		vehicleCertificateCacheModel.inspectorSignTitle = getInspectorSignTitle();

		String inspectorSignTitle = vehicleCertificateCacheModel.inspectorSignTitle;

		if ((inspectorSignTitle != null) && (inspectorSignTitle.length() == 0)) {
			vehicleCertificateCacheModel.inspectorSignTitle = null;
		}

		vehicleCertificateCacheModel.inspectorSignPlace = getInspectorSignPlace();

		String inspectorSignPlace = vehicleCertificateCacheModel.inspectorSignPlace;

		if ((inspectorSignPlace != null) && (inspectorSignPlace.length() == 0)) {
			vehicleCertificateCacheModel.inspectorSignPlace = null;
		}

		Date inspectorSignDate = getInspectorSignDate();

		if (inspectorSignDate != null) {
			vehicleCertificateCacheModel.inspectorSignDate = inspectorSignDate.getTime();
		}
		else {
			vehicleCertificateCacheModel.inspectorSignDate = Long.MIN_VALUE;
		}

		Date dossierDate = getDossierDate();

		if (dossierDate != null) {
			vehicleCertificateCacheModel.dossierDate = dossierDate.getTime();
		}
		else {
			vehicleCertificateCacheModel.dossierDate = Long.MIN_VALUE;
		}

		vehicleCertificateCacheModel.filedangkykiemtraId = getFiledangkykiemtraId();

		vehicleCertificateCacheModel.filebienbankiemtraId = getFilebienbankiemtraId();

		vehicleCertificateCacheModel.filechungchiId = getFilechungchiId();

		vehicleCertificateCacheModel.filebaocaotnantoanId = getFilebaocaotnantoanId();

		vehicleCertificateCacheModel.filebaocaotnkhithaiId = getFilebaocaotnkhithaiId();

		vehicleCertificateCacheModel.fileketluangiamdinhId = getFileketluangiamdinhId();

		Date SynchDate = getSynchDate();

		if (SynchDate != null) {
			vehicleCertificateCacheModel.SynchDate = SynchDate.getTime();
		}
		else {
			vehicleCertificateCacheModel.SynchDate = Long.MIN_VALUE;
		}

		return vehicleCertificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(201);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", mtGateway=");
		sb.append(getMtGateway());
		sb.append(", hoSoThuTucId=");
		sb.append(getHoSoThuTucId());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", vehicleRecordid=");
		sb.append(getVehicleRecordid());
		sb.append(", draftCertificateid=");
		sb.append(getDraftCertificateid());
		sb.append(", certificateRecordid=");
		sb.append(getCertificateRecordid());
		sb.append(", debitNoteId=");
		sb.append(getDebitNoteId());
		sb.append(", vehicleGroupId=");
		sb.append(getVehicleGroupId());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", technicalSpecCode=");
		sb.append(getTechnicalSpecCode());
		sb.append(", referenceCertificateNo=");
		sb.append(getReferenceCertificateNo());
		sb.append(", safetytestreportNo=");
		sb.append(getSafetytestreportNo());
		sb.append(", emissiontestreportNo=");
		sb.append(getEmissiontestreportNo());
		sb.append(", copreportNo=");
		sb.append(getCopreportNo());
		sb.append(", controlreportNo=");
		sb.append(getControlreportNo());
		sb.append(", vehicletypeDescription=");
		sb.append(getVehicletypeDescription());
		sb.append(", vehicleType=");
		sb.append(getVehicleType());
		sb.append(", enginetypeDescription=");
		sb.append(getEnginetypeDescription());
		sb.append(", engineType=");
		sb.append(getEngineType());
		sb.append(", markAsVehicle=");
		sb.append(getMarkAsVehicle());
		sb.append(", trademarkDescription=");
		sb.append(getTrademarkDescription());
		sb.append(", tradeMark=");
		sb.append(getTradeMark());
		sb.append(", commercialName=");
		sb.append(getCommercialName());
		sb.append(", modelCode=");
		sb.append(getModelCode());
		sb.append(", productionPlant=");
		sb.append(getProductionPlant());
		sb.append(", addressOfProductionPlant=");
		sb.append(getAddressOfProductionPlant());
		sb.append(", emissionStandard=");
		sb.append(getEmissionStandard());
		sb.append(", codeNumber=");
		sb.append(getCodeNumber());
		sb.append(", chassisNumber=");
		sb.append(getChassisNumber());
		sb.append(", engineNumber=");
		sb.append(getEngineNumber());
		sb.append(", productionYear=");
		sb.append(getProductionYear());
		sb.append(", countryCode=");
		sb.append(getCountryCode());
		sb.append(", countryName=");
		sb.append(getCountryName());
		sb.append(", currentStatus=");
		sb.append(getCurrentStatus());
		sb.append(", vehicleEngineUsage=");
		sb.append(getVehicleEngineUsage());
		sb.append(", vehicleColor=");
		sb.append(getVehicleColor());
		sb.append(", unitPrice=");
		sb.append(getUnitPrice());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", markUpStatus=");
		sb.append(getMarkUpStatus());
		sb.append(", markAsSample=");
		sb.append(getMarkAsSample());
		sb.append(", vehicleengineStatus=");
		sb.append(getVehicleengineStatus());
		sb.append(", vehicleengineFolder=");
		sb.append(getVehicleengineFolder());
		sb.append(", vehicleGroupInitialId=");
		sb.append(getVehicleGroupInitialId());
		sb.append(", registeredInspectionId=");
		sb.append(getRegisteredInspectionId());
		sb.append(", registeredNumber=");
		sb.append(getRegisteredNumber());
		sb.append(", importerCode=");
		sb.append(getImporterCode());
		sb.append(", importerName=");
		sb.append(getImporterName());
		sb.append(", importerAddress=");
		sb.append(getImporterAddress());
		sb.append(", representative=");
		sb.append(getRepresentative());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", fax=");
		sb.append(getFax());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", inspectionDate=");
		sb.append(getInspectionDate());
		sb.append(", inspectionSite=");
		sb.append(getInspectionSite());
		sb.append(", inspectionDistrictCode=");
		sb.append(getInspectionDistrictCode());
		sb.append(", inspectionProvinceCode=");
		sb.append(getInspectionProvinceCode());
		sb.append(", inspectionDistrict=");
		sb.append(getInspectionDistrict());
		sb.append(", inspectionProvince=");
		sb.append(getInspectionProvince());
		sb.append(", confirmedInspectionId=");
		sb.append(getConfirmedInspectionId());
		sb.append(", inspectionRecordId=");
		sb.append(getInspectionRecordId());
		sb.append(", inspectionRecordNo=");
		sb.append(getInspectionRecordNo());
		sb.append(", inspectionDateFrom=");
		sb.append(getInspectionDateFrom());
		sb.append(", inspectionDateTo=");
		sb.append(getInspectionDateTo());
		sb.append(", inspectionMode=");
		sb.append(getInspectionMode());
		sb.append(", inspectionModeDescription=");
		sb.append(getInspectionModeDescription());
		sb.append(", confirmedResult=");
		sb.append(getConfirmedResult());
		sb.append(", confirmedResultDescription=");
		sb.append(getConfirmedResultDescription());
		sb.append(", importCustomDeclareDate=");
		sb.append(getImportCustomDeclareDate());
		sb.append(", importCustomDeclareNo=");
		sb.append(getImportCustomDeclareNo());
		sb.append(", corporationCode=");
		sb.append(getCorporationCode());
		sb.append(", corporationName=");
		sb.append(getCorporationName());
		sb.append(", inspectorContactCode=");
		sb.append(getInspectorContactCode());
		sb.append(", inspectorName=");
		sb.append(getInspectorName());
		sb.append(", certificateType=");
		sb.append(getCertificateType());
		sb.append(", certificateNumber=");
		sb.append(getCertificateNumber());
		sb.append(", oldcertificateNumber=");
		sb.append(getOldcertificateNumber());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", stampStatus=");
		sb.append(getStampStatus());
		sb.append(", certificateStatus=");
		sb.append(getCertificateStatus());
		sb.append(", digitalIssued=");
		sb.append(getDigitalIssued());
		sb.append(", markupSafeTest=");
		sb.append(getMarkupSafeTest());
		sb.append(", markupEmissionTest=");
		sb.append(getMarkupEmissionTest());
		sb.append(", markupControl=");
		sb.append(getMarkupControl());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append(", inspectorOrganization=");
		sb.append(getInspectorOrganization());
		sb.append(", inspectorDivision=");
		sb.append(getInspectorDivision());
		sb.append(", inspectorSignName=");
		sb.append(getInspectorSignName());
		sb.append(", inspectorSignTitle=");
		sb.append(getInspectorSignTitle());
		sb.append(", inspectorSignPlace=");
		sb.append(getInspectorSignPlace());
		sb.append(", inspectorSignDate=");
		sb.append(getInspectorSignDate());
		sb.append(", dossierDate=");
		sb.append(getDossierDate());
		sb.append(", filedangkykiemtraId=");
		sb.append(getFiledangkykiemtraId());
		sb.append(", filebienbankiemtraId=");
		sb.append(getFilebienbankiemtraId());
		sb.append(", filechungchiId=");
		sb.append(getFilechungchiId());
		sb.append(", filebaocaotnantoanId=");
		sb.append(getFilebaocaotnantoanId());
		sb.append(", filebaocaotnkhithaiId=");
		sb.append(getFilebaocaotnkhithaiId());
		sb.append(", fileketluangiamdinhId=");
		sb.append(getFileketluangiamdinhId());
		sb.append(", SynchDate=");
		sb.append(getSynchDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(304);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.VehicleCertificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mtGateway</column-name><column-value><![CDATA[");
		sb.append(getMtGateway());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoSoThuTucId</column-name><column-value><![CDATA[");
		sb.append(getHoSoThuTucId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleRecordid</column-name><column-value><![CDATA[");
		sb.append(getVehicleRecordid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>draftCertificateid</column-name><column-value><![CDATA[");
		sb.append(getDraftCertificateid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordid</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debitNoteId</column-name><column-value><![CDATA[");
		sb.append(getDebitNoteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleGroupId</column-name><column-value><![CDATA[");
		sb.append(getVehicleGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>technicalSpecCode</column-name><column-value><![CDATA[");
		sb.append(getTechnicalSpecCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceCertificateNo</column-name><column-value><![CDATA[");
		sb.append(getReferenceCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safetytestreportNo</column-name><column-value><![CDATA[");
		sb.append(getSafetytestreportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissiontestreportNo</column-name><column-value><![CDATA[");
		sb.append(getEmissiontestreportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>copreportNo</column-name><column-value><![CDATA[");
		sb.append(getCopreportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>controlreportNo</column-name><column-value><![CDATA[");
		sb.append(getControlreportNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicletypeDescription</column-name><column-value><![CDATA[");
		sb.append(getVehicletypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleType</column-name><column-value><![CDATA[");
		sb.append(getVehicleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enginetypeDescription</column-name><column-value><![CDATA[");
		sb.append(getEnginetypeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineType</column-name><column-value><![CDATA[");
		sb.append(getEngineType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markAsVehicle</column-name><column-value><![CDATA[");
		sb.append(getMarkAsVehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trademarkDescription</column-name><column-value><![CDATA[");
		sb.append(getTrademarkDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tradeMark</column-name><column-value><![CDATA[");
		sb.append(getTradeMark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commercialName</column-name><column-value><![CDATA[");
		sb.append(getCommercialName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modelCode</column-name><column-value><![CDATA[");
		sb.append(getModelCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionPlant</column-name><column-value><![CDATA[");
		sb.append(getProductionPlant());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressOfProductionPlant</column-name><column-value><![CDATA[");
		sb.append(getAddressOfProductionPlant());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionStandard</column-name><column-value><![CDATA[");
		sb.append(getEmissionStandard());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeNumber</column-name><column-value><![CDATA[");
		sb.append(getCodeNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chassisNumber</column-name><column-value><![CDATA[");
		sb.append(getChassisNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineNumber</column-name><column-value><![CDATA[");
		sb.append(getEngineNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionYear</column-name><column-value><![CDATA[");
		sb.append(getProductionYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryCode</column-name><column-value><![CDATA[");
		sb.append(getCountryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryName</column-name><column-value><![CDATA[");
		sb.append(getCountryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentStatus</column-name><column-value><![CDATA[");
		sb.append(getCurrentStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleEngineUsage</column-name><column-value><![CDATA[");
		sb.append(getVehicleEngineUsage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleColor</column-name><column-value><![CDATA[");
		sb.append(getVehicleColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPrice</column-name><column-value><![CDATA[");
		sb.append(getUnitPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markUpStatus</column-name><column-value><![CDATA[");
		sb.append(getMarkUpStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markAsSample</column-name><column-value><![CDATA[");
		sb.append(getMarkAsSample());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleengineStatus</column-name><column-value><![CDATA[");
		sb.append(getVehicleengineStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleengineFolder</column-name><column-value><![CDATA[");
		sb.append(getVehicleengineFolder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleGroupInitialId</column-name><column-value><![CDATA[");
		sb.append(getVehicleGroupInitialId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredInspectionId</column-name><column-value><![CDATA[");
		sb.append(getRegisteredInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredNumber</column-name><column-value><![CDATA[");
		sb.append(getRegisteredNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerCode</column-name><column-value><![CDATA[");
		sb.append(getImporterCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerName</column-name><column-value><![CDATA[");
		sb.append(getImporterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerAddress</column-name><column-value><![CDATA[");
		sb.append(getImporterAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>representative</column-name><column-value><![CDATA[");
		sb.append(getRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fax</column-name><column-value><![CDATA[");
		sb.append(getFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionSite</column-name><column-value><![CDATA[");
		sb.append(getInspectionSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDistrictCode</column-name><column-value><![CDATA[");
		sb.append(getInspectionDistrictCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionProvinceCode</column-name><column-value><![CDATA[");
		sb.append(getInspectionProvinceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDistrict</column-name><column-value><![CDATA[");
		sb.append(getInspectionDistrict());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionProvince</column-name><column-value><![CDATA[");
		sb.append(getInspectionProvince());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmedInspectionId</column-name><column-value><![CDATA[");
		sb.append(getConfirmedInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordId</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordNo</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDateFrom</column-name><column-value><![CDATA[");
		sb.append(getInspectionDateFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDateTo</column-name><column-value><![CDATA[");
		sb.append(getInspectionDateTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionMode</column-name><column-value><![CDATA[");
		sb.append(getInspectionMode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionModeDescription</column-name><column-value><![CDATA[");
		sb.append(getInspectionModeDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmedResult</column-name><column-value><![CDATA[");
		sb.append(getConfirmedResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmedResultDescription</column-name><column-value><![CDATA[");
		sb.append(getConfirmedResultDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importCustomDeclareDate</column-name><column-value><![CDATA[");
		sb.append(getImportCustomDeclareDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importCustomDeclareNo</column-name><column-value><![CDATA[");
		sb.append(getImportCustomDeclareNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationCode</column-name><column-value><![CDATA[");
		sb.append(getCorporationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationName</column-name><column-value><![CDATA[");
		sb.append(getCorporationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorContactCode</column-name><column-value><![CDATA[");
		sb.append(getInspectorContactCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorName</column-name><column-value><![CDATA[");
		sb.append(getInspectorName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateType</column-name><column-value><![CDATA[");
		sb.append(getCertificateType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateNumber</column-name><column-value><![CDATA[");
		sb.append(getCertificateNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oldcertificateNumber</column-name><column-value><![CDATA[");
		sb.append(getOldcertificateNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampStatus</column-name><column-value><![CDATA[");
		sb.append(getStampStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateStatus</column-name><column-value><![CDATA[");
		sb.append(getCertificateStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>digitalIssued</column-name><column-value><![CDATA[");
		sb.append(getDigitalIssued());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupSafeTest</column-name><column-value><![CDATA[");
		sb.append(getMarkupSafeTest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupEmissionTest</column-name><column-value><![CDATA[");
		sb.append(getMarkupEmissionTest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupControl</column-name><column-value><![CDATA[");
		sb.append(getMarkupControl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorOrganization</column-name><column-value><![CDATA[");
		sb.append(getInspectorOrganization());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorDivision</column-name><column-value><![CDATA[");
		sb.append(getInspectorDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignName</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignTitle</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignPlace</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignDate</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierDate</column-name><column-value><![CDATA[");
		sb.append(getDossierDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filedangkykiemtraId</column-name><column-value><![CDATA[");
		sb.append(getFiledangkykiemtraId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filebienbankiemtraId</column-name><column-value><![CDATA[");
		sb.append(getFilebienbankiemtraId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filechungchiId</column-name><column-value><![CDATA[");
		sb.append(getFilechungchiId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filebaocaotnantoanId</column-name><column-value><![CDATA[");
		sb.append(getFilebaocaotnantoanId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filebaocaotnkhithaiId</column-name><column-value><![CDATA[");
		sb.append(getFilebaocaotnkhithaiId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileketluangiamdinhId</column-name><column-value><![CDATA[");
		sb.append(getFileketluangiamdinhId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SynchDate</column-name><column-value><![CDATA[");
		sb.append(getSynchDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VehicleCertificate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VehicleCertificate.class
		};
	private long _id;
	private long _mtGateway;
	private long _hoSoThuTucId;
	private long _sequenceNo;
	private long _vehicleRecordid;
	private long _draftCertificateid;
	private long _certificateRecordid;
	private long _debitNoteId;
	private long _vehicleGroupId;
	private String _vehicleClass;
	private String _technicalSpecCode;
	private String _referenceCertificateNo;
	private String _safetytestreportNo;
	private String _emissiontestreportNo;
	private String _copreportNo;
	private String _controlreportNo;
	private String _vehicletypeDescription;
	private String _vehicleType;
	private String _enginetypeDescription;
	private String _engineType;
	private int _markAsVehicle;
	private String _trademarkDescription;
	private String _tradeMark;
	private String _commercialName;
	private String _modelCode;
	private String _productionPlant;
	private String _addressOfProductionPlant;
	private String _emissionStandard;
	private long _codeNumber;
	private String _chassisNumber;
	private String _engineNumber;
	private String _productionYear;
	private String _countryCode;
	private String _countryName;
	private String _currentStatus;
	private String _vehicleEngineUsage;
	private String _vehicleColor;
	private double _unitPrice;
	private String _currency;
	private String _remarks;
	private long _markUpStatus;
	private int _markAsSample;
	private long _vehicleengineStatus;
	private long _vehicleengineFolder;
	private long _vehicleGroupInitialId;
	private long _registeredInspectionId;
	private String _registeredNumber;
	private String _importerCode;
	private String _importerName;
	private String _importerAddress;
	private String _representative;
	private String _phone;
	private String _fax;
	private String _email;
	private Date _inspectionDate;
	private String _inspectionSite;
	private String _inspectionDistrictCode;
	private String _inspectionProvinceCode;
	private String _inspectionDistrict;
	private String _inspectionProvince;
	private long _confirmedInspectionId;
	private long _inspectionRecordId;
	private String _inspectionRecordNo;
	private Date _inspectionDateFrom;
	private Date _inspectionDateTo;
	private long _inspectionMode;
	private String _inspectionModeDescription;
	private long _confirmedResult;
	private String _confirmedResultDescription;
	private Date _importCustomDeclareDate;
	private String _importCustomDeclareNo;
	private String _corporationCode;
	private String _corporationName;
	private String _inspectorContactCode;
	private String _inspectorName;
	private long _certificateType;
	private String _certificateNumber;
	private String _oldcertificateNumber;
	private Date _signDate;
	private long _stampStatus;
	private String _certificateStatus;
	private long _digitalIssued;
	private long _markupSafeTest;
	private long _markupEmissionTest;
	private long _markupControl;
	private long _attachedFile;
	private String _inspectorOrganization;
	private String _inspectorDivision;
	private String _inspectorSignName;
	private String _inspectorSignTitle;
	private String _inspectorSignPlace;
	private Date _inspectorSignDate;
	private Date _dossierDate;
	private long _filedangkykiemtraId;
	private long _filebienbankiemtraId;
	private long _filechungchiId;
	private long _filebaocaotnantoanId;
	private long _filebaocaotnkhithaiId;
	private long _fileketluangiamdinhId;
	private Date _SynchDate;
	private VehicleCertificate _escapedModel;
}