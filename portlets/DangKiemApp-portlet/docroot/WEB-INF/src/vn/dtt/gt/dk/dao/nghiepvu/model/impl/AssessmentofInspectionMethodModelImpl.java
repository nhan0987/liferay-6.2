/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethod;
import vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethodModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethodSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AssessmentofInspectionMethod service. Represents a row in the &quot;vr_assessmentofinspectionmethod&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethodModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssessmentofInspectionMethodImpl}.
 * </p>
 *
 * @author win_64
 * @see AssessmentofInspectionMethodImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethod
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethodModel
 * @generated
 */
@JSON(strict = true)
public class AssessmentofInspectionMethodModelImpl extends BaseModelImpl<AssessmentofInspectionMethod>
	implements AssessmentofInspectionMethodModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a assessmentof inspection method model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethod} interface instead.
	 */
	public static final String TABLE_NAME = "vr_assessmentofinspectionmethod";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "methodcode", Types.VARCHAR },
			{ "methodname", Types.VARCHAR },
			{ "methodsequenceno", Types.INTEGER },
			{ "methoddescription", Types.VARCHAR },
			{ "methodcodereference", Types.VARCHAR },
			{ "methodnamereference", Types.VARCHAR },
			{ "ImporterRiskDescription", Types.VARCHAR },
			{ "A1MarkFloor", Types.DOUBLE },
			{ "A1MarkCeil", Types.DOUBLE },
			{ "ProductRiskDescription", Types.VARCHAR },
			{ "A301MarkFloor", Types.DOUBLE },
			{ "A301MarkCeil", Types.DOUBLE },
			{ "PurposeRiskDescription", Types.VARCHAR },
			{ "A302Mark", Types.DOUBLE },
			{ "CertifiedRiskDescription", Types.VARCHAR },
			{ "A304Mark", Types.DOUBLE },
			{ "UsageRiskDescription", Types.VARCHAR },
			{ "A303Mark", Types.DOUBLE },
			{ "TransportRiskDescription", Types.VARCHAR },
			{ "A305Mark", Types.DOUBLE },
			{ "maker", Types.VARCHAR },
			{ "checker", Types.VARCHAR },
			{ "approver", Types.VARCHAR },
			{ "makermodified", Types.TIMESTAMP },
			{ "checkermodified", Types.TIMESTAMP },
			{ "approvermodified", Types.TIMESTAMP },
			{ "assessmentid", Types.VARCHAR },
			{ "assessmentyear", Types.VARCHAR },
			{ "evaluationperiod", Types.VARCHAR },
			{ "latestassessment", Types.TIMESTAMP },
			{ "synchdate", Types.TIMESTAMP },
			{ "nextassessmentid", Types.VARCHAR },
			{ "nextassessmentyear", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_assessmentofinspectionmethod (id LONG not null primary key,methodcode VARCHAR(75) null,methodname VARCHAR(75) null,methodsequenceno INTEGER,methoddescription VARCHAR(75) null,methodcodereference VARCHAR(75) null,methodnamereference VARCHAR(75) null,ImporterRiskDescription VARCHAR(75) null,A1MarkFloor DOUBLE,A1MarkCeil DOUBLE,ProductRiskDescription VARCHAR(75) null,A301MarkFloor DOUBLE,A301MarkCeil DOUBLE,PurposeRiskDescription VARCHAR(75) null,A302Mark DOUBLE,CertifiedRiskDescription VARCHAR(75) null,A304Mark DOUBLE,UsageRiskDescription VARCHAR(75) null,A303Mark DOUBLE,TransportRiskDescription VARCHAR(75) null,A305Mark DOUBLE,maker VARCHAR(75) null,checker VARCHAR(75) null,approver VARCHAR(75) null,makermodified DATE null,checkermodified DATE null,approvermodified DATE null,assessmentid VARCHAR(75) null,assessmentyear VARCHAR(75) null,evaluationperiod VARCHAR(75) null,latestassessment DATE null,synchdate DATE null,nextassessmentid VARCHAR(75) null,nextassessmentyear VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table vr_assessmentofinspectionmethod";
	public static final String ORDER_BY_JPQL = " ORDER BY assessmentofInspectionMethod.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_assessmentofinspectionmethod.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethod"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethod"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethod"),
			true);
	public static long ASSESSMENTID_COLUMN_BITMASK = 1L;
	public static long ASSESSMENTYEAR_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AssessmentofInspectionMethod toModel(
		AssessmentofInspectionMethodSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AssessmentofInspectionMethod model = new AssessmentofInspectionMethodImpl();

		model.setId(soapModel.getId());
		model.setMethodcode(soapModel.getMethodcode());
		model.setMethodname(soapModel.getMethodname());
		model.setMethodsequenceno(soapModel.getMethodsequenceno());
		model.setMethoddescription(soapModel.getMethoddescription());
		model.setMethodcodereference(soapModel.getMethodcodereference());
		model.setMethodnamereference(soapModel.getMethodnamereference());
		model.setImporterRiskDescription(soapModel.getImporterRiskDescription());
		model.setA1MarkFloor(soapModel.getA1MarkFloor());
		model.setA1MarkCeil(soapModel.getA1MarkCeil());
		model.setProductRiskDescription(soapModel.getProductRiskDescription());
		model.setA301MarkFloor(soapModel.getA301MarkFloor());
		model.setA301MarkCeil(soapModel.getA301MarkCeil());
		model.setPurposeRiskDescription(soapModel.getPurposeRiskDescription());
		model.setA302Mark(soapModel.getA302Mark());
		model.setCertifiedRiskDescription(soapModel.getCertifiedRiskDescription());
		model.setA304Mark(soapModel.getA304Mark());
		model.setUsageRiskDescription(soapModel.getUsageRiskDescription());
		model.setA303Mark(soapModel.getA303Mark());
		model.setTransportRiskDescription(soapModel.getTransportRiskDescription());
		model.setA305Mark(soapModel.getA305Mark());
		model.setMaker(soapModel.getMaker());
		model.setChecker(soapModel.getChecker());
		model.setApprover(soapModel.getApprover());
		model.setMakermodified(soapModel.getMakermodified());
		model.setCheckermodified(soapModel.getCheckermodified());
		model.setApprovermodified(soapModel.getApprovermodified());
		model.setAssessmentid(soapModel.getAssessmentid());
		model.setAssessmentyear(soapModel.getAssessmentyear());
		model.setEvaluationperiod(soapModel.getEvaluationperiod());
		model.setLatestassessment(soapModel.getLatestassessment());
		model.setSynchdate(soapModel.getSynchdate());
		model.setNextassessmentid(soapModel.getNextassessmentid());
		model.setNextassessmentyear(soapModel.getNextassessmentyear());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AssessmentofInspectionMethod> toModels(
		AssessmentofInspectionMethodSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AssessmentofInspectionMethod> models = new ArrayList<AssessmentofInspectionMethod>(soapModels.length);

		for (AssessmentofInspectionMethodSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethod"));

	public AssessmentofInspectionMethodModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssessmentofInspectionMethod.class;
	}

	@Override
	public String getModelClassName() {
		return AssessmentofInspectionMethod.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("methodcode", getMethodcode());
		attributes.put("methodname", getMethodname());
		attributes.put("methodsequenceno", getMethodsequenceno());
		attributes.put("methoddescription", getMethoddescription());
		attributes.put("methodcodereference", getMethodcodereference());
		attributes.put("methodnamereference", getMethodnamereference());
		attributes.put("ImporterRiskDescription", getImporterRiskDescription());
		attributes.put("A1MarkFloor", getA1MarkFloor());
		attributes.put("A1MarkCeil", getA1MarkCeil());
		attributes.put("ProductRiskDescription", getProductRiskDescription());
		attributes.put("A301MarkFloor", getA301MarkFloor());
		attributes.put("A301MarkCeil", getA301MarkCeil());
		attributes.put("PurposeRiskDescription", getPurposeRiskDescription());
		attributes.put("A302Mark", getA302Mark());
		attributes.put("CertifiedRiskDescription", getCertifiedRiskDescription());
		attributes.put("A304Mark", getA304Mark());
		attributes.put("UsageRiskDescription", getUsageRiskDescription());
		attributes.put("A303Mark", getA303Mark());
		attributes.put("TransportRiskDescription", getTransportRiskDescription());
		attributes.put("A305Mark", getA305Mark());
		attributes.put("maker", getMaker());
		attributes.put("checker", getChecker());
		attributes.put("approver", getApprover());
		attributes.put("makermodified", getMakermodified());
		attributes.put("checkermodified", getCheckermodified());
		attributes.put("approvermodified", getApprovermodified());
		attributes.put("assessmentid", getAssessmentid());
		attributes.put("assessmentyear", getAssessmentyear());
		attributes.put("evaluationperiod", getEvaluationperiod());
		attributes.put("latestassessment", getLatestassessment());
		attributes.put("synchdate", getSynchdate());
		attributes.put("nextassessmentid", getNextassessmentid());
		attributes.put("nextassessmentyear", getNextassessmentyear());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String methodcode = (String)attributes.get("methodcode");

		if (methodcode != null) {
			setMethodcode(methodcode);
		}

		String methodname = (String)attributes.get("methodname");

		if (methodname != null) {
			setMethodname(methodname);
		}

		Integer methodsequenceno = (Integer)attributes.get("methodsequenceno");

		if (methodsequenceno != null) {
			setMethodsequenceno(methodsequenceno);
		}

		String methoddescription = (String)attributes.get("methoddescription");

		if (methoddescription != null) {
			setMethoddescription(methoddescription);
		}

		String methodcodereference = (String)attributes.get(
				"methodcodereference");

		if (methodcodereference != null) {
			setMethodcodereference(methodcodereference);
		}

		String methodnamereference = (String)attributes.get(
				"methodnamereference");

		if (methodnamereference != null) {
			setMethodnamereference(methodnamereference);
		}

		String ImporterRiskDescription = (String)attributes.get(
				"ImporterRiskDescription");

		if (ImporterRiskDescription != null) {
			setImporterRiskDescription(ImporterRiskDescription);
		}

		Double A1MarkFloor = (Double)attributes.get("A1MarkFloor");

		if (A1MarkFloor != null) {
			setA1MarkFloor(A1MarkFloor);
		}

		Double A1MarkCeil = (Double)attributes.get("A1MarkCeil");

		if (A1MarkCeil != null) {
			setA1MarkCeil(A1MarkCeil);
		}

		String ProductRiskDescription = (String)attributes.get(
				"ProductRiskDescription");

		if (ProductRiskDescription != null) {
			setProductRiskDescription(ProductRiskDescription);
		}

		Double A301MarkFloor = (Double)attributes.get("A301MarkFloor");

		if (A301MarkFloor != null) {
			setA301MarkFloor(A301MarkFloor);
		}

		Double A301MarkCeil = (Double)attributes.get("A301MarkCeil");

		if (A301MarkCeil != null) {
			setA301MarkCeil(A301MarkCeil);
		}

		String PurposeRiskDescription = (String)attributes.get(
				"PurposeRiskDescription");

		if (PurposeRiskDescription != null) {
			setPurposeRiskDescription(PurposeRiskDescription);
		}

		Double A302Mark = (Double)attributes.get("A302Mark");

		if (A302Mark != null) {
			setA302Mark(A302Mark);
		}

		String CertifiedRiskDescription = (String)attributes.get(
				"CertifiedRiskDescription");

		if (CertifiedRiskDescription != null) {
			setCertifiedRiskDescription(CertifiedRiskDescription);
		}

		Double A304Mark = (Double)attributes.get("A304Mark");

		if (A304Mark != null) {
			setA304Mark(A304Mark);
		}

		String UsageRiskDescription = (String)attributes.get(
				"UsageRiskDescription");

		if (UsageRiskDescription != null) {
			setUsageRiskDescription(UsageRiskDescription);
		}

		Double A303Mark = (Double)attributes.get("A303Mark");

		if (A303Mark != null) {
			setA303Mark(A303Mark);
		}

		String TransportRiskDescription = (String)attributes.get(
				"TransportRiskDescription");

		if (TransportRiskDescription != null) {
			setTransportRiskDescription(TransportRiskDescription);
		}

		Double A305Mark = (Double)attributes.get("A305Mark");

		if (A305Mark != null) {
			setA305Mark(A305Mark);
		}

		String maker = (String)attributes.get("maker");

		if (maker != null) {
			setMaker(maker);
		}

		String checker = (String)attributes.get("checker");

		if (checker != null) {
			setChecker(checker);
		}

		String approver = (String)attributes.get("approver");

		if (approver != null) {
			setApprover(approver);
		}

		Date makermodified = (Date)attributes.get("makermodified");

		if (makermodified != null) {
			setMakermodified(makermodified);
		}

		Date checkermodified = (Date)attributes.get("checkermodified");

		if (checkermodified != null) {
			setCheckermodified(checkermodified);
		}

		Date approvermodified = (Date)attributes.get("approvermodified");

		if (approvermodified != null) {
			setApprovermodified(approvermodified);
		}

		String assessmentid = (String)attributes.get("assessmentid");

		if (assessmentid != null) {
			setAssessmentid(assessmentid);
		}

		String assessmentyear = (String)attributes.get("assessmentyear");

		if (assessmentyear != null) {
			setAssessmentyear(assessmentyear);
		}

		String evaluationperiod = (String)attributes.get("evaluationperiod");

		if (evaluationperiod != null) {
			setEvaluationperiod(evaluationperiod);
		}

		Date latestassessment = (Date)attributes.get("latestassessment");

		if (latestassessment != null) {
			setLatestassessment(latestassessment);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}

		String nextassessmentid = (String)attributes.get("nextassessmentid");

		if (nextassessmentid != null) {
			setNextassessmentid(nextassessmentid);
		}

		String nextassessmentyear = (String)attributes.get("nextassessmentyear");

		if (nextassessmentyear != null) {
			setNextassessmentyear(nextassessmentyear);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getMethodcode() {
		if (_methodcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodcode;
		}
	}

	@Override
	public void setMethodcode(String methodcode) {
		_methodcode = methodcode;
	}

	@JSON
	@Override
	public String getMethodname() {
		if (_methodname == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodname;
		}
	}

	@Override
	public void setMethodname(String methodname) {
		_methodname = methodname;
	}

	@JSON
	@Override
	public int getMethodsequenceno() {
		return _methodsequenceno;
	}

	@Override
	public void setMethodsequenceno(int methodsequenceno) {
		_methodsequenceno = methodsequenceno;
	}

	@JSON
	@Override
	public String getMethoddescription() {
		if (_methoddescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _methoddescription;
		}
	}

	@Override
	public void setMethoddescription(String methoddescription) {
		_methoddescription = methoddescription;
	}

	@JSON
	@Override
	public String getMethodcodereference() {
		if (_methodcodereference == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodcodereference;
		}
	}

	@Override
	public void setMethodcodereference(String methodcodereference) {
		_methodcodereference = methodcodereference;
	}

	@JSON
	@Override
	public String getMethodnamereference() {
		if (_methodnamereference == null) {
			return StringPool.BLANK;
		}
		else {
			return _methodnamereference;
		}
	}

	@Override
	public void setMethodnamereference(String methodnamereference) {
		_methodnamereference = methodnamereference;
	}

	@JSON
	@Override
	public String getImporterRiskDescription() {
		if (_ImporterRiskDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _ImporterRiskDescription;
		}
	}

	@Override
	public void setImporterRiskDescription(String ImporterRiskDescription) {
		_ImporterRiskDescription = ImporterRiskDescription;
	}

	@JSON
	@Override
	public double getA1MarkFloor() {
		return _A1MarkFloor;
	}

	@Override
	public void setA1MarkFloor(double A1MarkFloor) {
		_A1MarkFloor = A1MarkFloor;
	}

	@JSON
	@Override
	public double getA1MarkCeil() {
		return _A1MarkCeil;
	}

	@Override
	public void setA1MarkCeil(double A1MarkCeil) {
		_A1MarkCeil = A1MarkCeil;
	}

	@JSON
	@Override
	public String getProductRiskDescription() {
		if (_ProductRiskDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _ProductRiskDescription;
		}
	}

	@Override
	public void setProductRiskDescription(String ProductRiskDescription) {
		_ProductRiskDescription = ProductRiskDescription;
	}

	@JSON
	@Override
	public double getA301MarkFloor() {
		return _A301MarkFloor;
	}

	@Override
	public void setA301MarkFloor(double A301MarkFloor) {
		_A301MarkFloor = A301MarkFloor;
	}

	@JSON
	@Override
	public double getA301MarkCeil() {
		return _A301MarkCeil;
	}

	@Override
	public void setA301MarkCeil(double A301MarkCeil) {
		_A301MarkCeil = A301MarkCeil;
	}

	@JSON
	@Override
	public String getPurposeRiskDescription() {
		if (_PurposeRiskDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _PurposeRiskDescription;
		}
	}

	@Override
	public void setPurposeRiskDescription(String PurposeRiskDescription) {
		_PurposeRiskDescription = PurposeRiskDescription;
	}

	@JSON
	@Override
	public double getA302Mark() {
		return _A302Mark;
	}

	@Override
	public void setA302Mark(double A302Mark) {
		_A302Mark = A302Mark;
	}

	@JSON
	@Override
	public String getCertifiedRiskDescription() {
		if (_CertifiedRiskDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _CertifiedRiskDescription;
		}
	}

	@Override
	public void setCertifiedRiskDescription(String CertifiedRiskDescription) {
		_CertifiedRiskDescription = CertifiedRiskDescription;
	}

	@JSON
	@Override
	public double getA304Mark() {
		return _A304Mark;
	}

	@Override
	public void setA304Mark(double A304Mark) {
		_A304Mark = A304Mark;
	}

	@JSON
	@Override
	public String getUsageRiskDescription() {
		if (_UsageRiskDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _UsageRiskDescription;
		}
	}

	@Override
	public void setUsageRiskDescription(String UsageRiskDescription) {
		_UsageRiskDescription = UsageRiskDescription;
	}

	@JSON
	@Override
	public double getA303Mark() {
		return _A303Mark;
	}

	@Override
	public void setA303Mark(double A303Mark) {
		_A303Mark = A303Mark;
	}

	@JSON
	@Override
	public String getTransportRiskDescription() {
		if (_TransportRiskDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _TransportRiskDescription;
		}
	}

	@Override
	public void setTransportRiskDescription(String TransportRiskDescription) {
		_TransportRiskDescription = TransportRiskDescription;
	}

	@JSON
	@Override
	public double getA305Mark() {
		return _A305Mark;
	}

	@Override
	public void setA305Mark(double A305Mark) {
		_A305Mark = A305Mark;
	}

	@JSON
	@Override
	public String getMaker() {
		if (_maker == null) {
			return StringPool.BLANK;
		}
		else {
			return _maker;
		}
	}

	@Override
	public void setMaker(String maker) {
		_maker = maker;
	}

	@JSON
	@Override
	public String getChecker() {
		if (_checker == null) {
			return StringPool.BLANK;
		}
		else {
			return _checker;
		}
	}

	@Override
	public void setChecker(String checker) {
		_checker = checker;
	}

	@JSON
	@Override
	public String getApprover() {
		if (_approver == null) {
			return StringPool.BLANK;
		}
		else {
			return _approver;
		}
	}

	@Override
	public void setApprover(String approver) {
		_approver = approver;
	}

	@JSON
	@Override
	public Date getMakermodified() {
		return _makermodified;
	}

	@Override
	public void setMakermodified(Date makermodified) {
		_makermodified = makermodified;
	}

	@JSON
	@Override
	public Date getCheckermodified() {
		return _checkermodified;
	}

	@Override
	public void setCheckermodified(Date checkermodified) {
		_checkermodified = checkermodified;
	}

	@JSON
	@Override
	public Date getApprovermodified() {
		return _approvermodified;
	}

	@Override
	public void setApprovermodified(Date approvermodified) {
		_approvermodified = approvermodified;
	}

	@JSON
	@Override
	public String getAssessmentid() {
		if (_assessmentid == null) {
			return StringPool.BLANK;
		}
		else {
			return _assessmentid;
		}
	}

	@Override
	public void setAssessmentid(String assessmentid) {
		_columnBitmask |= ASSESSMENTID_COLUMN_BITMASK;

		if (_originalAssessmentid == null) {
			_originalAssessmentid = _assessmentid;
		}

		_assessmentid = assessmentid;
	}

	public String getOriginalAssessmentid() {
		return GetterUtil.getString(_originalAssessmentid);
	}

	@JSON
	@Override
	public String getAssessmentyear() {
		if (_assessmentyear == null) {
			return StringPool.BLANK;
		}
		else {
			return _assessmentyear;
		}
	}

	@Override
	public void setAssessmentyear(String assessmentyear) {
		_columnBitmask |= ASSESSMENTYEAR_COLUMN_BITMASK;

		if (_originalAssessmentyear == null) {
			_originalAssessmentyear = _assessmentyear;
		}

		_assessmentyear = assessmentyear;
	}

	public String getOriginalAssessmentyear() {
		return GetterUtil.getString(_originalAssessmentyear);
	}

	@JSON
	@Override
	public String getEvaluationperiod() {
		if (_evaluationperiod == null) {
			return StringPool.BLANK;
		}
		else {
			return _evaluationperiod;
		}
	}

	@Override
	public void setEvaluationperiod(String evaluationperiod) {
		_evaluationperiod = evaluationperiod;
	}

	@JSON
	@Override
	public Date getLatestassessment() {
		return _latestassessment;
	}

	@Override
	public void setLatestassessment(Date latestassessment) {
		_latestassessment = latestassessment;
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	@JSON
	@Override
	public String getNextassessmentid() {
		if (_nextassessmentid == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextassessmentid;
		}
	}

	@Override
	public void setNextassessmentid(String nextassessmentid) {
		_nextassessmentid = nextassessmentid;
	}

	@JSON
	@Override
	public String getNextassessmentyear() {
		if (_nextassessmentyear == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextassessmentyear;
		}
	}

	@Override
	public void setNextassessmentyear(String nextassessmentyear) {
		_nextassessmentyear = nextassessmentyear;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AssessmentofInspectionMethod.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssessmentofInspectionMethod toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssessmentofInspectionMethod)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssessmentofInspectionMethodImpl assessmentofInspectionMethodImpl = new AssessmentofInspectionMethodImpl();

		assessmentofInspectionMethodImpl.setId(getId());
		assessmentofInspectionMethodImpl.setMethodcode(getMethodcode());
		assessmentofInspectionMethodImpl.setMethodname(getMethodname());
		assessmentofInspectionMethodImpl.setMethodsequenceno(getMethodsequenceno());
		assessmentofInspectionMethodImpl.setMethoddescription(getMethoddescription());
		assessmentofInspectionMethodImpl.setMethodcodereference(getMethodcodereference());
		assessmentofInspectionMethodImpl.setMethodnamereference(getMethodnamereference());
		assessmentofInspectionMethodImpl.setImporterRiskDescription(getImporterRiskDescription());
		assessmentofInspectionMethodImpl.setA1MarkFloor(getA1MarkFloor());
		assessmentofInspectionMethodImpl.setA1MarkCeil(getA1MarkCeil());
		assessmentofInspectionMethodImpl.setProductRiskDescription(getProductRiskDescription());
		assessmentofInspectionMethodImpl.setA301MarkFloor(getA301MarkFloor());
		assessmentofInspectionMethodImpl.setA301MarkCeil(getA301MarkCeil());
		assessmentofInspectionMethodImpl.setPurposeRiskDescription(getPurposeRiskDescription());
		assessmentofInspectionMethodImpl.setA302Mark(getA302Mark());
		assessmentofInspectionMethodImpl.setCertifiedRiskDescription(getCertifiedRiskDescription());
		assessmentofInspectionMethodImpl.setA304Mark(getA304Mark());
		assessmentofInspectionMethodImpl.setUsageRiskDescription(getUsageRiskDescription());
		assessmentofInspectionMethodImpl.setA303Mark(getA303Mark());
		assessmentofInspectionMethodImpl.setTransportRiskDescription(getTransportRiskDescription());
		assessmentofInspectionMethodImpl.setA305Mark(getA305Mark());
		assessmentofInspectionMethodImpl.setMaker(getMaker());
		assessmentofInspectionMethodImpl.setChecker(getChecker());
		assessmentofInspectionMethodImpl.setApprover(getApprover());
		assessmentofInspectionMethodImpl.setMakermodified(getMakermodified());
		assessmentofInspectionMethodImpl.setCheckermodified(getCheckermodified());
		assessmentofInspectionMethodImpl.setApprovermodified(getApprovermodified());
		assessmentofInspectionMethodImpl.setAssessmentid(getAssessmentid());
		assessmentofInspectionMethodImpl.setAssessmentyear(getAssessmentyear());
		assessmentofInspectionMethodImpl.setEvaluationperiod(getEvaluationperiod());
		assessmentofInspectionMethodImpl.setLatestassessment(getLatestassessment());
		assessmentofInspectionMethodImpl.setSynchdate(getSynchdate());
		assessmentofInspectionMethodImpl.setNextassessmentid(getNextassessmentid());
		assessmentofInspectionMethodImpl.setNextassessmentyear(getNextassessmentyear());

		assessmentofInspectionMethodImpl.resetOriginalValues();

		return assessmentofInspectionMethodImpl;
	}

	@Override
	public int compareTo(
		AssessmentofInspectionMethod assessmentofInspectionMethod) {
		int value = 0;

		if (getId() < assessmentofInspectionMethod.getId()) {
			value = -1;
		}
		else if (getId() > assessmentofInspectionMethod.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssessmentofInspectionMethod)) {
			return false;
		}

		AssessmentofInspectionMethod assessmentofInspectionMethod = (AssessmentofInspectionMethod)obj;

		long primaryKey = assessmentofInspectionMethod.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AssessmentofInspectionMethodModelImpl assessmentofInspectionMethodModelImpl =
			this;

		assessmentofInspectionMethodModelImpl._originalAssessmentid = assessmentofInspectionMethodModelImpl._assessmentid;

		assessmentofInspectionMethodModelImpl._originalAssessmentyear = assessmentofInspectionMethodModelImpl._assessmentyear;

		assessmentofInspectionMethodModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssessmentofInspectionMethod> toCacheModel() {
		AssessmentofInspectionMethodCacheModel assessmentofInspectionMethodCacheModel =
			new AssessmentofInspectionMethodCacheModel();

		assessmentofInspectionMethodCacheModel.id = getId();

		assessmentofInspectionMethodCacheModel.methodcode = getMethodcode();

		String methodcode = assessmentofInspectionMethodCacheModel.methodcode;

		if ((methodcode != null) && (methodcode.length() == 0)) {
			assessmentofInspectionMethodCacheModel.methodcode = null;
		}

		assessmentofInspectionMethodCacheModel.methodname = getMethodname();

		String methodname = assessmentofInspectionMethodCacheModel.methodname;

		if ((methodname != null) && (methodname.length() == 0)) {
			assessmentofInspectionMethodCacheModel.methodname = null;
		}

		assessmentofInspectionMethodCacheModel.methodsequenceno = getMethodsequenceno();

		assessmentofInspectionMethodCacheModel.methoddescription = getMethoddescription();

		String methoddescription = assessmentofInspectionMethodCacheModel.methoddescription;

		if ((methoddescription != null) && (methoddescription.length() == 0)) {
			assessmentofInspectionMethodCacheModel.methoddescription = null;
		}

		assessmentofInspectionMethodCacheModel.methodcodereference = getMethodcodereference();

		String methodcodereference = assessmentofInspectionMethodCacheModel.methodcodereference;

		if ((methodcodereference != null) &&
				(methodcodereference.length() == 0)) {
			assessmentofInspectionMethodCacheModel.methodcodereference = null;
		}

		assessmentofInspectionMethodCacheModel.methodnamereference = getMethodnamereference();

		String methodnamereference = assessmentofInspectionMethodCacheModel.methodnamereference;

		if ((methodnamereference != null) &&
				(methodnamereference.length() == 0)) {
			assessmentofInspectionMethodCacheModel.methodnamereference = null;
		}

		assessmentofInspectionMethodCacheModel.ImporterRiskDescription = getImporterRiskDescription();

		String ImporterRiskDescription = assessmentofInspectionMethodCacheModel.ImporterRiskDescription;

		if ((ImporterRiskDescription != null) &&
				(ImporterRiskDescription.length() == 0)) {
			assessmentofInspectionMethodCacheModel.ImporterRiskDescription = null;
		}

		assessmentofInspectionMethodCacheModel.A1MarkFloor = getA1MarkFloor();

		assessmentofInspectionMethodCacheModel.A1MarkCeil = getA1MarkCeil();

		assessmentofInspectionMethodCacheModel.ProductRiskDescription = getProductRiskDescription();

		String ProductRiskDescription = assessmentofInspectionMethodCacheModel.ProductRiskDescription;

		if ((ProductRiskDescription != null) &&
				(ProductRiskDescription.length() == 0)) {
			assessmentofInspectionMethodCacheModel.ProductRiskDescription = null;
		}

		assessmentofInspectionMethodCacheModel.A301MarkFloor = getA301MarkFloor();

		assessmentofInspectionMethodCacheModel.A301MarkCeil = getA301MarkCeil();

		assessmentofInspectionMethodCacheModel.PurposeRiskDescription = getPurposeRiskDescription();

		String PurposeRiskDescription = assessmentofInspectionMethodCacheModel.PurposeRiskDescription;

		if ((PurposeRiskDescription != null) &&
				(PurposeRiskDescription.length() == 0)) {
			assessmentofInspectionMethodCacheModel.PurposeRiskDescription = null;
		}

		assessmentofInspectionMethodCacheModel.A302Mark = getA302Mark();

		assessmentofInspectionMethodCacheModel.CertifiedRiskDescription = getCertifiedRiskDescription();

		String CertifiedRiskDescription = assessmentofInspectionMethodCacheModel.CertifiedRiskDescription;

		if ((CertifiedRiskDescription != null) &&
				(CertifiedRiskDescription.length() == 0)) {
			assessmentofInspectionMethodCacheModel.CertifiedRiskDescription = null;
		}

		assessmentofInspectionMethodCacheModel.A304Mark = getA304Mark();

		assessmentofInspectionMethodCacheModel.UsageRiskDescription = getUsageRiskDescription();

		String UsageRiskDescription = assessmentofInspectionMethodCacheModel.UsageRiskDescription;

		if ((UsageRiskDescription != null) &&
				(UsageRiskDescription.length() == 0)) {
			assessmentofInspectionMethodCacheModel.UsageRiskDescription = null;
		}

		assessmentofInspectionMethodCacheModel.A303Mark = getA303Mark();

		assessmentofInspectionMethodCacheModel.TransportRiskDescription = getTransportRiskDescription();

		String TransportRiskDescription = assessmentofInspectionMethodCacheModel.TransportRiskDescription;

		if ((TransportRiskDescription != null) &&
				(TransportRiskDescription.length() == 0)) {
			assessmentofInspectionMethodCacheModel.TransportRiskDescription = null;
		}

		assessmentofInspectionMethodCacheModel.A305Mark = getA305Mark();

		assessmentofInspectionMethodCacheModel.maker = getMaker();

		String maker = assessmentofInspectionMethodCacheModel.maker;

		if ((maker != null) && (maker.length() == 0)) {
			assessmentofInspectionMethodCacheModel.maker = null;
		}

		assessmentofInspectionMethodCacheModel.checker = getChecker();

		String checker = assessmentofInspectionMethodCacheModel.checker;

		if ((checker != null) && (checker.length() == 0)) {
			assessmentofInspectionMethodCacheModel.checker = null;
		}

		assessmentofInspectionMethodCacheModel.approver = getApprover();

		String approver = assessmentofInspectionMethodCacheModel.approver;

		if ((approver != null) && (approver.length() == 0)) {
			assessmentofInspectionMethodCacheModel.approver = null;
		}

		Date makermodified = getMakermodified();

		if (makermodified != null) {
			assessmentofInspectionMethodCacheModel.makermodified = makermodified.getTime();
		}
		else {
			assessmentofInspectionMethodCacheModel.makermodified = Long.MIN_VALUE;
		}

		Date checkermodified = getCheckermodified();

		if (checkermodified != null) {
			assessmentofInspectionMethodCacheModel.checkermodified = checkermodified.getTime();
		}
		else {
			assessmentofInspectionMethodCacheModel.checkermodified = Long.MIN_VALUE;
		}

		Date approvermodified = getApprovermodified();

		if (approvermodified != null) {
			assessmentofInspectionMethodCacheModel.approvermodified = approvermodified.getTime();
		}
		else {
			assessmentofInspectionMethodCacheModel.approvermodified = Long.MIN_VALUE;
		}

		assessmentofInspectionMethodCacheModel.assessmentid = getAssessmentid();

		String assessmentid = assessmentofInspectionMethodCacheModel.assessmentid;

		if ((assessmentid != null) && (assessmentid.length() == 0)) {
			assessmentofInspectionMethodCacheModel.assessmentid = null;
		}

		assessmentofInspectionMethodCacheModel.assessmentyear = getAssessmentyear();

		String assessmentyear = assessmentofInspectionMethodCacheModel.assessmentyear;

		if ((assessmentyear != null) && (assessmentyear.length() == 0)) {
			assessmentofInspectionMethodCacheModel.assessmentyear = null;
		}

		assessmentofInspectionMethodCacheModel.evaluationperiod = getEvaluationperiod();

		String evaluationperiod = assessmentofInspectionMethodCacheModel.evaluationperiod;

		if ((evaluationperiod != null) && (evaluationperiod.length() == 0)) {
			assessmentofInspectionMethodCacheModel.evaluationperiod = null;
		}

		Date latestassessment = getLatestassessment();

		if (latestassessment != null) {
			assessmentofInspectionMethodCacheModel.latestassessment = latestassessment.getTime();
		}
		else {
			assessmentofInspectionMethodCacheModel.latestassessment = Long.MIN_VALUE;
		}

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			assessmentofInspectionMethodCacheModel.synchdate = synchdate.getTime();
		}
		else {
			assessmentofInspectionMethodCacheModel.synchdate = Long.MIN_VALUE;
		}

		assessmentofInspectionMethodCacheModel.nextassessmentid = getNextassessmentid();

		String nextassessmentid = assessmentofInspectionMethodCacheModel.nextassessmentid;

		if ((nextassessmentid != null) && (nextassessmentid.length() == 0)) {
			assessmentofInspectionMethodCacheModel.nextassessmentid = null;
		}

		assessmentofInspectionMethodCacheModel.nextassessmentyear = getNextassessmentyear();

		String nextassessmentyear = assessmentofInspectionMethodCacheModel.nextassessmentyear;

		if ((nextassessmentyear != null) && (nextassessmentyear.length() == 0)) {
			assessmentofInspectionMethodCacheModel.nextassessmentyear = null;
		}

		return assessmentofInspectionMethodCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(69);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", methodcode=");
		sb.append(getMethodcode());
		sb.append(", methodname=");
		sb.append(getMethodname());
		sb.append(", methodsequenceno=");
		sb.append(getMethodsequenceno());
		sb.append(", methoddescription=");
		sb.append(getMethoddescription());
		sb.append(", methodcodereference=");
		sb.append(getMethodcodereference());
		sb.append(", methodnamereference=");
		sb.append(getMethodnamereference());
		sb.append(", ImporterRiskDescription=");
		sb.append(getImporterRiskDescription());
		sb.append(", A1MarkFloor=");
		sb.append(getA1MarkFloor());
		sb.append(", A1MarkCeil=");
		sb.append(getA1MarkCeil());
		sb.append(", ProductRiskDescription=");
		sb.append(getProductRiskDescription());
		sb.append(", A301MarkFloor=");
		sb.append(getA301MarkFloor());
		sb.append(", A301MarkCeil=");
		sb.append(getA301MarkCeil());
		sb.append(", PurposeRiskDescription=");
		sb.append(getPurposeRiskDescription());
		sb.append(", A302Mark=");
		sb.append(getA302Mark());
		sb.append(", CertifiedRiskDescription=");
		sb.append(getCertifiedRiskDescription());
		sb.append(", A304Mark=");
		sb.append(getA304Mark());
		sb.append(", UsageRiskDescription=");
		sb.append(getUsageRiskDescription());
		sb.append(", A303Mark=");
		sb.append(getA303Mark());
		sb.append(", TransportRiskDescription=");
		sb.append(getTransportRiskDescription());
		sb.append(", A305Mark=");
		sb.append(getA305Mark());
		sb.append(", maker=");
		sb.append(getMaker());
		sb.append(", checker=");
		sb.append(getChecker());
		sb.append(", approver=");
		sb.append(getApprover());
		sb.append(", makermodified=");
		sb.append(getMakermodified());
		sb.append(", checkermodified=");
		sb.append(getCheckermodified());
		sb.append(", approvermodified=");
		sb.append(getApprovermodified());
		sb.append(", assessmentid=");
		sb.append(getAssessmentid());
		sb.append(", assessmentyear=");
		sb.append(getAssessmentyear());
		sb.append(", evaluationperiod=");
		sb.append(getEvaluationperiod());
		sb.append(", latestassessment=");
		sb.append(getLatestassessment());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append(", nextassessmentid=");
		sb.append(getNextassessmentid());
		sb.append(", nextassessmentyear=");
		sb.append(getNextassessmentyear());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(106);

		sb.append("<model><model-name>");
		sb.append(
			"vn.dtt.gt.dk.dao.nghiepvu.model.AssessmentofInspectionMethod");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodcode</column-name><column-value><![CDATA[");
		sb.append(getMethodcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodname</column-name><column-value><![CDATA[");
		sb.append(getMethodname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodsequenceno</column-name><column-value><![CDATA[");
		sb.append(getMethodsequenceno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methoddescription</column-name><column-value><![CDATA[");
		sb.append(getMethoddescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodcodereference</column-name><column-value><![CDATA[");
		sb.append(getMethodcodereference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>methodnamereference</column-name><column-value><![CDATA[");
		sb.append(getMethodnamereference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ImporterRiskDescription</column-name><column-value><![CDATA[");
		sb.append(getImporterRiskDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>A1MarkFloor</column-name><column-value><![CDATA[");
		sb.append(getA1MarkFloor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>A1MarkCeil</column-name><column-value><![CDATA[");
		sb.append(getA1MarkCeil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ProductRiskDescription</column-name><column-value><![CDATA[");
		sb.append(getProductRiskDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>A301MarkFloor</column-name><column-value><![CDATA[");
		sb.append(getA301MarkFloor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>A301MarkCeil</column-name><column-value><![CDATA[");
		sb.append(getA301MarkCeil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PurposeRiskDescription</column-name><column-value><![CDATA[");
		sb.append(getPurposeRiskDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>A302Mark</column-name><column-value><![CDATA[");
		sb.append(getA302Mark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CertifiedRiskDescription</column-name><column-value><![CDATA[");
		sb.append(getCertifiedRiskDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>A304Mark</column-name><column-value><![CDATA[");
		sb.append(getA304Mark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UsageRiskDescription</column-name><column-value><![CDATA[");
		sb.append(getUsageRiskDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>A303Mark</column-name><column-value><![CDATA[");
		sb.append(getA303Mark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TransportRiskDescription</column-name><column-value><![CDATA[");
		sb.append(getTransportRiskDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>A305Mark</column-name><column-value><![CDATA[");
		sb.append(getA305Mark());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maker</column-name><column-value><![CDATA[");
		sb.append(getMaker());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checker</column-name><column-value><![CDATA[");
		sb.append(getChecker());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approver</column-name><column-value><![CDATA[");
		sb.append(getApprover());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makermodified</column-name><column-value><![CDATA[");
		sb.append(getMakermodified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkermodified</column-name><column-value><![CDATA[");
		sb.append(getCheckermodified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvermodified</column-name><column-value><![CDATA[");
		sb.append(getApprovermodified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assessmentid</column-name><column-value><![CDATA[");
		sb.append(getAssessmentid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assessmentyear</column-name><column-value><![CDATA[");
		sb.append(getAssessmentyear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>evaluationperiod</column-name><column-value><![CDATA[");
		sb.append(getEvaluationperiod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestassessment</column-name><column-value><![CDATA[");
		sb.append(getLatestassessment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextassessmentid</column-name><column-value><![CDATA[");
		sb.append(getNextassessmentid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextassessmentyear</column-name><column-value><![CDATA[");
		sb.append(getNextassessmentyear());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AssessmentofInspectionMethod.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AssessmentofInspectionMethod.class
		};
	private long _id;
	private String _methodcode;
	private String _methodname;
	private int _methodsequenceno;
	private String _methoddescription;
	private String _methodcodereference;
	private String _methodnamereference;
	private String _ImporterRiskDescription;
	private double _A1MarkFloor;
	private double _A1MarkCeil;
	private String _ProductRiskDescription;
	private double _A301MarkFloor;
	private double _A301MarkCeil;
	private String _PurposeRiskDescription;
	private double _A302Mark;
	private String _CertifiedRiskDescription;
	private double _A304Mark;
	private String _UsageRiskDescription;
	private double _A303Mark;
	private String _TransportRiskDescription;
	private double _A305Mark;
	private String _maker;
	private String _checker;
	private String _approver;
	private Date _makermodified;
	private Date _checkermodified;
	private Date _approvermodified;
	private String _assessmentid;
	private String _originalAssessmentid;
	private String _assessmentyear;
	private String _originalAssessmentyear;
	private String _evaluationperiod;
	private Date _latestassessment;
	private Date _synchdate;
	private String _nextassessmentid;
	private String _nextassessmentyear;
	private long _columnBitmask;
	private AssessmentofInspectionMethod _escapedModel;
}