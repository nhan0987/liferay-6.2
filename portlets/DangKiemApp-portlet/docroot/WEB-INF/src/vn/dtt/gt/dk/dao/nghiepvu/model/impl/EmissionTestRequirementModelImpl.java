/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirement;
import vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirementModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirementSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmissionTestRequirement service. Represents a row in the &quot;vr_emissiontestrequirement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmissionTestRequirementImpl}.
 * </p>
 *
 * @author win_64
 * @see EmissionTestRequirementImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirement
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirementModel
 * @generated
 */
@JSON(strict = true)
public class EmissionTestRequirementModelImpl extends BaseModelImpl<EmissionTestRequirement>
	implements EmissionTestRequirementModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emission test requirement model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirement} interface instead.
	 */
	public static final String TABLE_NAME = "vr_emissiontestrequirement";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "registeredinspectionid", Types.BIGINT },
			{ "inspectionrecordid", Types.BIGINT },
			{ "requirementnumber", Types.VARCHAR },
			{ "contentofrequest", Types.VARCHAR },
			{ "testingregisteredplace", Types.VARCHAR },
			{ "testingregistration", Types.VARCHAR },
			{ "testingpaymentcondition", Types.VARCHAR },
			{ "remarks", Types.VARCHAR },
			{ "corporationid", Types.VARCHAR },
			{ "signname", Types.VARCHAR },
			{ "signtitle", Types.VARCHAR },
			{ "signplace", Types.VARCHAR },
			{ "signdate", Types.TIMESTAMP },
			{ "phieuxulyphuid", Types.BIGINT },
			{ "attachedfile", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_emissiontestrequirement (id LONG not null primary key,registeredinspectionid LONG,inspectionrecordid LONG,requirementnumber VARCHAR(75) null,contentofrequest VARCHAR(75) null,testingregisteredplace VARCHAR(75) null,testingregistration VARCHAR(75) null,testingpaymentcondition VARCHAR(75) null,remarks VARCHAR(75) null,corporationid VARCHAR(75) null,signname VARCHAR(75) null,signtitle VARCHAR(75) null,signplace VARCHAR(75) null,signdate DATE null,phieuxulyphuid LONG,attachedfile LONG)";
	public static final String TABLE_SQL_DROP = "drop table vr_emissiontestrequirement";
	public static final String ORDER_BY_JPQL = " ORDER BY emissionTestRequirement.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_emissiontestrequirement.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirement"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirement"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirement"),
			true);
	public static long INSPECTIONRECORDID_COLUMN_BITMASK = 1L;
	public static long PHIEUXULYPHUID_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmissionTestRequirement toModel(
		EmissionTestRequirementSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmissionTestRequirement model = new EmissionTestRequirementImpl();

		model.setId(soapModel.getId());
		model.setRegisteredInspectionId(soapModel.getRegisteredInspectionId());
		model.setInspectionRecordId(soapModel.getInspectionRecordId());
		model.setRequirementNumber(soapModel.getRequirementNumber());
		model.setContentOfRequest(soapModel.getContentOfRequest());
		model.setTestingRegisteredPlace(soapModel.getTestingRegisteredPlace());
		model.setTestingRegistration(soapModel.getTestingRegistration());
		model.setTestingPaymentCondition(soapModel.getTestingPaymentCondition());
		model.setRemarks(soapModel.getRemarks());
		model.setCorporationId(soapModel.getCorporationId());
		model.setSignName(soapModel.getSignName());
		model.setSignTitle(soapModel.getSignTitle());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setPhieuXuLyPhuId(soapModel.getPhieuXuLyPhuId());
		model.setAttachedFile(soapModel.getAttachedFile());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmissionTestRequirement> toModels(
		EmissionTestRequirementSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmissionTestRequirement> models = new ArrayList<EmissionTestRequirement>(soapModels.length);

		for (EmissionTestRequirementSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirement"));

	public EmissionTestRequirementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmissionTestRequirement.class;
	}

	@Override
	public String getModelClassName() {
		return EmissionTestRequirement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("registeredInspectionId", getRegisteredInspectionId());
		attributes.put("inspectionRecordId", getInspectionRecordId());
		attributes.put("requirementNumber", getRequirementNumber());
		attributes.put("contentOfRequest", getContentOfRequest());
		attributes.put("testingRegisteredPlace", getTestingRegisteredPlace());
		attributes.put("testingRegistration", getTestingRegistration());
		attributes.put("testingPaymentCondition", getTestingPaymentCondition());
		attributes.put("remarks", getRemarks());
		attributes.put("corporationId", getCorporationId());
		attributes.put("signName", getSignName());
		attributes.put("signTitle", getSignTitle());
		attributes.put("signPlace", getSignPlace());
		attributes.put("signDate", getSignDate());
		attributes.put("phieuXuLyPhuId", getPhieuXuLyPhuId());
		attributes.put("attachedFile", getAttachedFile());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long registeredInspectionId = (Long)attributes.get(
				"registeredInspectionId");

		if (registeredInspectionId != null) {
			setRegisteredInspectionId(registeredInspectionId);
		}

		Long inspectionRecordId = (Long)attributes.get("inspectionRecordId");

		if (inspectionRecordId != null) {
			setInspectionRecordId(inspectionRecordId);
		}

		String requirementNumber = (String)attributes.get("requirementNumber");

		if (requirementNumber != null) {
			setRequirementNumber(requirementNumber);
		}

		String contentOfRequest = (String)attributes.get("contentOfRequest");

		if (contentOfRequest != null) {
			setContentOfRequest(contentOfRequest);
		}

		String testingRegisteredPlace = (String)attributes.get(
				"testingRegisteredPlace");

		if (testingRegisteredPlace != null) {
			setTestingRegisteredPlace(testingRegisteredPlace);
		}

		String testingRegistration = (String)attributes.get(
				"testingRegistration");

		if (testingRegistration != null) {
			setTestingRegistration(testingRegistration);
		}

		String testingPaymentCondition = (String)attributes.get(
				"testingPaymentCondition");

		if (testingPaymentCondition != null) {
			setTestingPaymentCondition(testingPaymentCondition);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		String signName = (String)attributes.get("signName");

		if (signName != null) {
			setSignName(signName);
		}

		String signTitle = (String)attributes.get("signTitle");

		if (signTitle != null) {
			setSignTitle(signTitle);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		Long phieuXuLyPhuId = (Long)attributes.get("phieuXuLyPhuId");

		if (phieuXuLyPhuId != null) {
			setPhieuXuLyPhuId(phieuXuLyPhuId);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getRegisteredInspectionId() {
		return _registeredInspectionId;
	}

	@Override
	public void setRegisteredInspectionId(long registeredInspectionId) {
		_registeredInspectionId = registeredInspectionId;
	}

	@JSON
	@Override
	public long getInspectionRecordId() {
		return _inspectionRecordId;
	}

	@Override
	public void setInspectionRecordId(long inspectionRecordId) {
		_columnBitmask |= INSPECTIONRECORDID_COLUMN_BITMASK;

		if (!_setOriginalInspectionRecordId) {
			_setOriginalInspectionRecordId = true;

			_originalInspectionRecordId = _inspectionRecordId;
		}

		_inspectionRecordId = inspectionRecordId;
	}

	public long getOriginalInspectionRecordId() {
		return _originalInspectionRecordId;
	}

	@JSON
	@Override
	public String getRequirementNumber() {
		if (_requirementNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _requirementNumber;
		}
	}

	@Override
	public void setRequirementNumber(String requirementNumber) {
		_requirementNumber = requirementNumber;
	}

	@JSON
	@Override
	public String getContentOfRequest() {
		if (_contentOfRequest == null) {
			return StringPool.BLANK;
		}
		else {
			return _contentOfRequest;
		}
	}

	@Override
	public void setContentOfRequest(String contentOfRequest) {
		_contentOfRequest = contentOfRequest;
	}

	@JSON
	@Override
	public String getTestingRegisteredPlace() {
		if (_testingRegisteredPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingRegisteredPlace;
		}
	}

	@Override
	public void setTestingRegisteredPlace(String testingRegisteredPlace) {
		_testingRegisteredPlace = testingRegisteredPlace;
	}

	@JSON
	@Override
	public String getTestingRegistration() {
		if (_testingRegistration == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingRegistration;
		}
	}

	@Override
	public void setTestingRegistration(String testingRegistration) {
		_testingRegistration = testingRegistration;
	}

	@JSON
	@Override
	public String getTestingPaymentCondition() {
		if (_testingPaymentCondition == null) {
			return StringPool.BLANK;
		}
		else {
			return _testingPaymentCondition;
		}
	}

	@Override
	public void setTestingPaymentCondition(String testingPaymentCondition) {
		_testingPaymentCondition = testingPaymentCondition;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_corporationId = corporationId;
	}

	@JSON
	@Override
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	@Override
	public void setSignName(String signName) {
		_signName = signName;
	}

	@JSON
	@Override
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	@Override
	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@JSON
	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public long getPhieuXuLyPhuId() {
		return _phieuXuLyPhuId;
	}

	@Override
	public void setPhieuXuLyPhuId(long phieuXuLyPhuId) {
		_columnBitmask |= PHIEUXULYPHUID_COLUMN_BITMASK;

		if (!_setOriginalPhieuXuLyPhuId) {
			_setOriginalPhieuXuLyPhuId = true;

			_originalPhieuXuLyPhuId = _phieuXuLyPhuId;
		}

		_phieuXuLyPhuId = phieuXuLyPhuId;
	}

	public long getOriginalPhieuXuLyPhuId() {
		return _originalPhieuXuLyPhuId;
	}

	@JSON
	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmissionTestRequirement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmissionTestRequirement toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmissionTestRequirement)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmissionTestRequirementImpl emissionTestRequirementImpl = new EmissionTestRequirementImpl();

		emissionTestRequirementImpl.setId(getId());
		emissionTestRequirementImpl.setRegisteredInspectionId(getRegisteredInspectionId());
		emissionTestRequirementImpl.setInspectionRecordId(getInspectionRecordId());
		emissionTestRequirementImpl.setRequirementNumber(getRequirementNumber());
		emissionTestRequirementImpl.setContentOfRequest(getContentOfRequest());
		emissionTestRequirementImpl.setTestingRegisteredPlace(getTestingRegisteredPlace());
		emissionTestRequirementImpl.setTestingRegistration(getTestingRegistration());
		emissionTestRequirementImpl.setTestingPaymentCondition(getTestingPaymentCondition());
		emissionTestRequirementImpl.setRemarks(getRemarks());
		emissionTestRequirementImpl.setCorporationId(getCorporationId());
		emissionTestRequirementImpl.setSignName(getSignName());
		emissionTestRequirementImpl.setSignTitle(getSignTitle());
		emissionTestRequirementImpl.setSignPlace(getSignPlace());
		emissionTestRequirementImpl.setSignDate(getSignDate());
		emissionTestRequirementImpl.setPhieuXuLyPhuId(getPhieuXuLyPhuId());
		emissionTestRequirementImpl.setAttachedFile(getAttachedFile());

		emissionTestRequirementImpl.resetOriginalValues();

		return emissionTestRequirementImpl;
	}

	@Override
	public int compareTo(EmissionTestRequirement emissionTestRequirement) {
		int value = 0;

		if (getId() < emissionTestRequirement.getId()) {
			value = -1;
		}
		else if (getId() > emissionTestRequirement.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmissionTestRequirement)) {
			return false;
		}

		EmissionTestRequirement emissionTestRequirement = (EmissionTestRequirement)obj;

		long primaryKey = emissionTestRequirement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmissionTestRequirementModelImpl emissionTestRequirementModelImpl = this;

		emissionTestRequirementModelImpl._originalInspectionRecordId = emissionTestRequirementModelImpl._inspectionRecordId;

		emissionTestRequirementModelImpl._setOriginalInspectionRecordId = false;

		emissionTestRequirementModelImpl._originalPhieuXuLyPhuId = emissionTestRequirementModelImpl._phieuXuLyPhuId;

		emissionTestRequirementModelImpl._setOriginalPhieuXuLyPhuId = false;

		emissionTestRequirementModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmissionTestRequirement> toCacheModel() {
		EmissionTestRequirementCacheModel emissionTestRequirementCacheModel = new EmissionTestRequirementCacheModel();

		emissionTestRequirementCacheModel.id = getId();

		emissionTestRequirementCacheModel.registeredInspectionId = getRegisteredInspectionId();

		emissionTestRequirementCacheModel.inspectionRecordId = getInspectionRecordId();

		emissionTestRequirementCacheModel.requirementNumber = getRequirementNumber();

		String requirementNumber = emissionTestRequirementCacheModel.requirementNumber;

		if ((requirementNumber != null) && (requirementNumber.length() == 0)) {
			emissionTestRequirementCacheModel.requirementNumber = null;
		}

		emissionTestRequirementCacheModel.contentOfRequest = getContentOfRequest();

		String contentOfRequest = emissionTestRequirementCacheModel.contentOfRequest;

		if ((contentOfRequest != null) && (contentOfRequest.length() == 0)) {
			emissionTestRequirementCacheModel.contentOfRequest = null;
		}

		emissionTestRequirementCacheModel.testingRegisteredPlace = getTestingRegisteredPlace();

		String testingRegisteredPlace = emissionTestRequirementCacheModel.testingRegisteredPlace;

		if ((testingRegisteredPlace != null) &&
				(testingRegisteredPlace.length() == 0)) {
			emissionTestRequirementCacheModel.testingRegisteredPlace = null;
		}

		emissionTestRequirementCacheModel.testingRegistration = getTestingRegistration();

		String testingRegistration = emissionTestRequirementCacheModel.testingRegistration;

		if ((testingRegistration != null) &&
				(testingRegistration.length() == 0)) {
			emissionTestRequirementCacheModel.testingRegistration = null;
		}

		emissionTestRequirementCacheModel.testingPaymentCondition = getTestingPaymentCondition();

		String testingPaymentCondition = emissionTestRequirementCacheModel.testingPaymentCondition;

		if ((testingPaymentCondition != null) &&
				(testingPaymentCondition.length() == 0)) {
			emissionTestRequirementCacheModel.testingPaymentCondition = null;
		}

		emissionTestRequirementCacheModel.remarks = getRemarks();

		String remarks = emissionTestRequirementCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			emissionTestRequirementCacheModel.remarks = null;
		}

		emissionTestRequirementCacheModel.corporationId = getCorporationId();

		String corporationId = emissionTestRequirementCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			emissionTestRequirementCacheModel.corporationId = null;
		}

		emissionTestRequirementCacheModel.signName = getSignName();

		String signName = emissionTestRequirementCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			emissionTestRequirementCacheModel.signName = null;
		}

		emissionTestRequirementCacheModel.signTitle = getSignTitle();

		String signTitle = emissionTestRequirementCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			emissionTestRequirementCacheModel.signTitle = null;
		}

		emissionTestRequirementCacheModel.signPlace = getSignPlace();

		String signPlace = emissionTestRequirementCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			emissionTestRequirementCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			emissionTestRequirementCacheModel.signDate = signDate.getTime();
		}
		else {
			emissionTestRequirementCacheModel.signDate = Long.MIN_VALUE;
		}

		emissionTestRequirementCacheModel.phieuXuLyPhuId = getPhieuXuLyPhuId();

		emissionTestRequirementCacheModel.attachedFile = getAttachedFile();

		return emissionTestRequirementCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", registeredInspectionId=");
		sb.append(getRegisteredInspectionId());
		sb.append(", inspectionRecordId=");
		sb.append(getInspectionRecordId());
		sb.append(", requirementNumber=");
		sb.append(getRequirementNumber());
		sb.append(", contentOfRequest=");
		sb.append(getContentOfRequest());
		sb.append(", testingRegisteredPlace=");
		sb.append(getTestingRegisteredPlace());
		sb.append(", testingRegistration=");
		sb.append(getTestingRegistration());
		sb.append(", testingPaymentCondition=");
		sb.append(getTestingPaymentCondition());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", phieuXuLyPhuId=");
		sb.append(getPhieuXuLyPhuId());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.EmissionTestRequirement");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredInspectionId</column-name><column-value><![CDATA[");
		sb.append(getRegisteredInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordId</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requirementNumber</column-name><column-value><![CDATA[");
		sb.append(getRequirementNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentOfRequest</column-name><column-value><![CDATA[");
		sb.append(getContentOfRequest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingRegisteredPlace</column-name><column-value><![CDATA[");
		sb.append(getTestingRegisteredPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingRegistration</column-name><column-value><![CDATA[");
		sb.append(getTestingRegistration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testingPaymentCondition</column-name><column-value><![CDATA[");
		sb.append(getTestingPaymentCondition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phieuXuLyPhuId</column-name><column-value><![CDATA[");
		sb.append(getPhieuXuLyPhuId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmissionTestRequirement.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmissionTestRequirement.class
		};
	private long _id;
	private long _registeredInspectionId;
	private long _inspectionRecordId;
	private long _originalInspectionRecordId;
	private boolean _setOriginalInspectionRecordId;
	private String _requirementNumber;
	private String _contentOfRequest;
	private String _testingRegisteredPlace;
	private String _testingRegistration;
	private String _testingPaymentCondition;
	private String _remarks;
	private String _corporationId;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private Date _signDate;
	private long _phieuXuLyPhuId;
	private long _originalPhieuXuLyPhuId;
	private boolean _setOriginalPhieuXuLyPhuId;
	private long _attachedFile;
	private long _columnBitmask;
	private EmissionTestRequirement _escapedModel;
}