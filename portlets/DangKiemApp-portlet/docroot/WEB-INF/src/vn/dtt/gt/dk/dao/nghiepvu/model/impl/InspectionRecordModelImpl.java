/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecord;
import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InspectionRecord service. Represents a row in the &quot;vr_inspectionrecord&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InspectionRecordImpl}.
 * </p>
 *
 * @author win_64
 * @see InspectionRecordImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecord
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecordModel
 * @generated
 */
@JSON(strict = true)
public class InspectionRecordModelImpl extends BaseModelImpl<InspectionRecord>
	implements InspectionRecordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a inspection record model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecord} interface instead.
	 */
	public static final String TABLE_NAME = "vr_inspectionrecord";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "inspectionrecordno", Types.VARCHAR },
			{ "inspectionrecorddate", Types.TIMESTAMP },
			{ "corporationid", Types.VARCHAR },
			{ "inspectorid", Types.BIGINT },
			{ "confirmedinspectionid", Types.BIGINT },
			{ "customsdeclarationid", Types.BIGINT },
			{ "inspectionsite", Types.VARCHAR },
			{ "inspectiondatefrom", Types.TIMESTAMP },
			{ "inspectiondateto", Types.TIMESTAMP },
			{ "inspectionmode", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "attachedfile", Types.BIGINT },
			{ "confirmedresult", Types.BIGINT },
			{ "signname", Types.VARCHAR },
			{ "signtitle", Types.VARCHAR },
			{ "signplace", Types.VARCHAR },
			{ "signdate", Types.TIMESTAMP },
			{ "phieuxulyphuid", Types.BIGINT },
			{ "markupsafetest", Types.BIGINT },
			{ "markupemissiontest", Types.BIGINT },
			{ "markupcontrol", Types.BIGINT },
			{ "registeredinspectionid", Types.BIGINT },
			{ "remarks", Types.VARCHAR },
			{ "hosothutucid", Types.BIGINT },
			{ "othercosts", Types.DOUBLE },
			{ "markuppaid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_inspectionrecord (id LONG not null primary key,inspectionrecordno VARCHAR(75) null,inspectionrecorddate DATE null,corporationid VARCHAR(75) null,inspectorid LONG,confirmedinspectionid LONG,customsdeclarationid LONG,inspectionsite VARCHAR(75) null,inspectiondatefrom DATE null,inspectiondateto DATE null,inspectionmode LONG,description VARCHAR(75) null,attachedfile LONG,confirmedresult LONG,signname VARCHAR(75) null,signtitle VARCHAR(75) null,signplace VARCHAR(75) null,signdate DATE null,phieuxulyphuid LONG,markupsafetest LONG,markupemissiontest LONG,markupcontrol LONG,registeredinspectionid LONG,remarks VARCHAR(75) null,hosothutucid LONG,othercosts DOUBLE,markuppaid LONG)";
	public static final String TABLE_SQL_DROP = "drop table vr_inspectionrecord";
	public static final String ORDER_BY_JPQL = " ORDER BY inspectionRecord.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_inspectionrecord.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecord"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecord"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecord"),
			true);
	public static long CONFIRMEDINSPECTIONID_COLUMN_BITMASK = 1L;
	public static long HOSOTHUTUCID_COLUMN_BITMASK = 2L;
	public static long INSPECTIONRECORDNO_COLUMN_BITMASK = 4L;
	public static long PHIEUXULYPHUID_COLUMN_BITMASK = 8L;
	public static long REGISTEREDINSPECTIONID_COLUMN_BITMASK = 16L;
	public static long ID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InspectionRecord toModel(InspectionRecordSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InspectionRecord model = new InspectionRecordImpl();

		model.setId(soapModel.getId());
		model.setInspectionRecordNo(soapModel.getInspectionRecordNo());
		model.setInspectionRecordDate(soapModel.getInspectionRecordDate());
		model.setCorporationId(soapModel.getCorporationId());
		model.setInspectorId(soapModel.getInspectorId());
		model.setConfirmedInspectionId(soapModel.getConfirmedInspectionId());
		model.setCustomsDeclarationid(soapModel.getCustomsDeclarationid());
		model.setInspectionSite(soapModel.getInspectionSite());
		model.setInspectionDateFrom(soapModel.getInspectionDateFrom());
		model.setInspectionDateTo(soapModel.getInspectionDateTo());
		model.setInspectionMode(soapModel.getInspectionMode());
		model.setDescription(soapModel.getDescription());
		model.setAttachedFile(soapModel.getAttachedFile());
		model.setConfirmedResult(soapModel.getConfirmedResult());
		model.setSignName(soapModel.getSignName());
		model.setSignTitle(soapModel.getSignTitle());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setPhieuXuLyPhuId(soapModel.getPhieuXuLyPhuId());
		model.setMarkupSafeTest(soapModel.getMarkupSafeTest());
		model.setMarkupEmissionTest(soapModel.getMarkupEmissionTest());
		model.setMarkupControl(soapModel.getMarkupControl());
		model.setRegisteredInspectionId(soapModel.getRegisteredInspectionId());
		model.setRemarks(soapModel.getRemarks());
		model.setHoSoThuTucId(soapModel.getHoSoThuTucId());
		model.setOtherCosts(soapModel.getOtherCosts());
		model.setMarkupPaid(soapModel.getMarkupPaid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InspectionRecord> toModels(
		InspectionRecordSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InspectionRecord> models = new ArrayList<InspectionRecord>(soapModels.length);

		for (InspectionRecordSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecord"));

	public InspectionRecordModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InspectionRecord.class;
	}

	@Override
	public String getModelClassName() {
		return InspectionRecord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("inspectionRecordNo", getInspectionRecordNo());
		attributes.put("inspectionRecordDate", getInspectionRecordDate());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("confirmedInspectionId", getConfirmedInspectionId());
		attributes.put("customsDeclarationid", getCustomsDeclarationid());
		attributes.put("inspectionSite", getInspectionSite());
		attributes.put("inspectionDateFrom", getInspectionDateFrom());
		attributes.put("inspectionDateTo", getInspectionDateTo());
		attributes.put("inspectionMode", getInspectionMode());
		attributes.put("description", getDescription());
		attributes.put("attachedFile", getAttachedFile());
		attributes.put("confirmedResult", getConfirmedResult());
		attributes.put("signName", getSignName());
		attributes.put("signTitle", getSignTitle());
		attributes.put("signPlace", getSignPlace());
		attributes.put("signDate", getSignDate());
		attributes.put("phieuXuLyPhuId", getPhieuXuLyPhuId());
		attributes.put("markupSafeTest", getMarkupSafeTest());
		attributes.put("markupEmissionTest", getMarkupEmissionTest());
		attributes.put("markupControl", getMarkupControl());
		attributes.put("registeredInspectionId", getRegisteredInspectionId());
		attributes.put("remarks", getRemarks());
		attributes.put("hoSoThuTucId", getHoSoThuTucId());
		attributes.put("otherCosts", getOtherCosts());
		attributes.put("markupPaid", getMarkupPaid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String inspectionRecordNo = (String)attributes.get("inspectionRecordNo");

		if (inspectionRecordNo != null) {
			setInspectionRecordNo(inspectionRecordNo);
		}

		Date inspectionRecordDate = (Date)attributes.get("inspectionRecordDate");

		if (inspectionRecordDate != null) {
			setInspectionRecordDate(inspectionRecordDate);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		Long confirmedInspectionId = (Long)attributes.get(
				"confirmedInspectionId");

		if (confirmedInspectionId != null) {
			setConfirmedInspectionId(confirmedInspectionId);
		}

		Long customsDeclarationid = (Long)attributes.get("customsDeclarationid");

		if (customsDeclarationid != null) {
			setCustomsDeclarationid(customsDeclarationid);
		}

		String inspectionSite = (String)attributes.get("inspectionSite");

		if (inspectionSite != null) {
			setInspectionSite(inspectionSite);
		}

		Date inspectionDateFrom = (Date)attributes.get("inspectionDateFrom");

		if (inspectionDateFrom != null) {
			setInspectionDateFrom(inspectionDateFrom);
		}

		Date inspectionDateTo = (Date)attributes.get("inspectionDateTo");

		if (inspectionDateTo != null) {
			setInspectionDateTo(inspectionDateTo);
		}

		Long inspectionMode = (Long)attributes.get("inspectionMode");

		if (inspectionMode != null) {
			setInspectionMode(inspectionMode);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}

		Long confirmedResult = (Long)attributes.get("confirmedResult");

		if (confirmedResult != null) {
			setConfirmedResult(confirmedResult);
		}

		String signName = (String)attributes.get("signName");

		if (signName != null) {
			setSignName(signName);
		}

		String signTitle = (String)attributes.get("signTitle");

		if (signTitle != null) {
			setSignTitle(signTitle);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		Long phieuXuLyPhuId = (Long)attributes.get("phieuXuLyPhuId");

		if (phieuXuLyPhuId != null) {
			setPhieuXuLyPhuId(phieuXuLyPhuId);
		}

		Long markupSafeTest = (Long)attributes.get("markupSafeTest");

		if (markupSafeTest != null) {
			setMarkupSafeTest(markupSafeTest);
		}

		Long markupEmissionTest = (Long)attributes.get("markupEmissionTest");

		if (markupEmissionTest != null) {
			setMarkupEmissionTest(markupEmissionTest);
		}

		Long markupControl = (Long)attributes.get("markupControl");

		if (markupControl != null) {
			setMarkupControl(markupControl);
		}

		Long registeredInspectionId = (Long)attributes.get(
				"registeredInspectionId");

		if (registeredInspectionId != null) {
			setRegisteredInspectionId(registeredInspectionId);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		Long hoSoThuTucId = (Long)attributes.get("hoSoThuTucId");

		if (hoSoThuTucId != null) {
			setHoSoThuTucId(hoSoThuTucId);
		}

		Double otherCosts = (Double)attributes.get("otherCosts");

		if (otherCosts != null) {
			setOtherCosts(otherCosts);
		}

		Long markupPaid = (Long)attributes.get("markupPaid");

		if (markupPaid != null) {
			setMarkupPaid(markupPaid);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getInspectionRecordNo() {
		if (_inspectionRecordNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionRecordNo;
		}
	}

	@Override
	public void setInspectionRecordNo(String inspectionRecordNo) {
		_columnBitmask |= INSPECTIONRECORDNO_COLUMN_BITMASK;

		if (_originalInspectionRecordNo == null) {
			_originalInspectionRecordNo = _inspectionRecordNo;
		}

		_inspectionRecordNo = inspectionRecordNo;
	}

	public String getOriginalInspectionRecordNo() {
		return GetterUtil.getString(_originalInspectionRecordNo);
	}

	@JSON
	@Override
	public Date getInspectionRecordDate() {
		return _inspectionRecordDate;
	}

	@Override
	public void setInspectionRecordDate(Date inspectionRecordDate) {
		_inspectionRecordDate = inspectionRecordDate;
	}

	@JSON
	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_corporationId = corporationId;
	}

	@JSON
	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_inspectorId = inspectorId;
	}

	@JSON
	@Override
	public long getConfirmedInspectionId() {
		return _confirmedInspectionId;
	}

	@Override
	public void setConfirmedInspectionId(long confirmedInspectionId) {
		_columnBitmask |= CONFIRMEDINSPECTIONID_COLUMN_BITMASK;

		if (!_setOriginalConfirmedInspectionId) {
			_setOriginalConfirmedInspectionId = true;

			_originalConfirmedInspectionId = _confirmedInspectionId;
		}

		_confirmedInspectionId = confirmedInspectionId;
	}

	public long getOriginalConfirmedInspectionId() {
		return _originalConfirmedInspectionId;
	}

	@JSON
	@Override
	public long getCustomsDeclarationid() {
		return _customsDeclarationid;
	}

	@Override
	public void setCustomsDeclarationid(long customsDeclarationid) {
		_customsDeclarationid = customsDeclarationid;
	}

	@JSON
	@Override
	public String getInspectionSite() {
		if (_inspectionSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionSite;
		}
	}

	@Override
	public void setInspectionSite(String inspectionSite) {
		_inspectionSite = inspectionSite;
	}

	@JSON
	@Override
	public Date getInspectionDateFrom() {
		return _inspectionDateFrom;
	}

	@Override
	public void setInspectionDateFrom(Date inspectionDateFrom) {
		_inspectionDateFrom = inspectionDateFrom;
	}

	@JSON
	@Override
	public Date getInspectionDateTo() {
		return _inspectionDateTo;
	}

	@Override
	public void setInspectionDateTo(Date inspectionDateTo) {
		_inspectionDateTo = inspectionDateTo;
	}

	@JSON
	@Override
	public long getInspectionMode() {
		return _inspectionMode;
	}

	@Override
	public void setInspectionMode(long inspectionMode) {
		_inspectionMode = inspectionMode;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	@JSON
	@Override
	public long getConfirmedResult() {
		return _confirmedResult;
	}

	@Override
	public void setConfirmedResult(long confirmedResult) {
		_confirmedResult = confirmedResult;
	}

	@JSON
	@Override
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	@Override
	public void setSignName(String signName) {
		_signName = signName;
	}

	@JSON
	@Override
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	@Override
	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@JSON
	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public long getPhieuXuLyPhuId() {
		return _phieuXuLyPhuId;
	}

	@Override
	public void setPhieuXuLyPhuId(long phieuXuLyPhuId) {
		_columnBitmask |= PHIEUXULYPHUID_COLUMN_BITMASK;

		if (!_setOriginalPhieuXuLyPhuId) {
			_setOriginalPhieuXuLyPhuId = true;

			_originalPhieuXuLyPhuId = _phieuXuLyPhuId;
		}

		_phieuXuLyPhuId = phieuXuLyPhuId;
	}

	public long getOriginalPhieuXuLyPhuId() {
		return _originalPhieuXuLyPhuId;
	}

	@JSON
	@Override
	public long getMarkupSafeTest() {
		return _markupSafeTest;
	}

	@Override
	public void setMarkupSafeTest(long markupSafeTest) {
		_markupSafeTest = markupSafeTest;
	}

	@JSON
	@Override
	public long getMarkupEmissionTest() {
		return _markupEmissionTest;
	}

	@Override
	public void setMarkupEmissionTest(long markupEmissionTest) {
		_markupEmissionTest = markupEmissionTest;
	}

	@JSON
	@Override
	public long getMarkupControl() {
		return _markupControl;
	}

	@Override
	public void setMarkupControl(long markupControl) {
		_markupControl = markupControl;
	}

	@JSON
	@Override
	public long getRegisteredInspectionId() {
		return _registeredInspectionId;
	}

	@Override
	public void setRegisteredInspectionId(long registeredInspectionId) {
		_columnBitmask |= REGISTEREDINSPECTIONID_COLUMN_BITMASK;

		if (!_setOriginalRegisteredInspectionId) {
			_setOriginalRegisteredInspectionId = true;

			_originalRegisteredInspectionId = _registeredInspectionId;
		}

		_registeredInspectionId = registeredInspectionId;
	}

	public long getOriginalRegisteredInspectionId() {
		return _originalRegisteredInspectionId;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public long getHoSoThuTucId() {
		return _hoSoThuTucId;
	}

	@Override
	public void setHoSoThuTucId(long hoSoThuTucId) {
		_columnBitmask |= HOSOTHUTUCID_COLUMN_BITMASK;

		if (!_setOriginalHoSoThuTucId) {
			_setOriginalHoSoThuTucId = true;

			_originalHoSoThuTucId = _hoSoThuTucId;
		}

		_hoSoThuTucId = hoSoThuTucId;
	}

	public long getOriginalHoSoThuTucId() {
		return _originalHoSoThuTucId;
	}

	@JSON
	@Override
	public double getOtherCosts() {
		return _otherCosts;
	}

	@Override
	public void setOtherCosts(double otherCosts) {
		_otherCosts = otherCosts;
	}

	@JSON
	@Override
	public long getMarkupPaid() {
		return _markupPaid;
	}

	@Override
	public void setMarkupPaid(long markupPaid) {
		_markupPaid = markupPaid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			InspectionRecord.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InspectionRecord toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InspectionRecord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InspectionRecordImpl inspectionRecordImpl = new InspectionRecordImpl();

		inspectionRecordImpl.setId(getId());
		inspectionRecordImpl.setInspectionRecordNo(getInspectionRecordNo());
		inspectionRecordImpl.setInspectionRecordDate(getInspectionRecordDate());
		inspectionRecordImpl.setCorporationId(getCorporationId());
		inspectionRecordImpl.setInspectorId(getInspectorId());
		inspectionRecordImpl.setConfirmedInspectionId(getConfirmedInspectionId());
		inspectionRecordImpl.setCustomsDeclarationid(getCustomsDeclarationid());
		inspectionRecordImpl.setInspectionSite(getInspectionSite());
		inspectionRecordImpl.setInspectionDateFrom(getInspectionDateFrom());
		inspectionRecordImpl.setInspectionDateTo(getInspectionDateTo());
		inspectionRecordImpl.setInspectionMode(getInspectionMode());
		inspectionRecordImpl.setDescription(getDescription());
		inspectionRecordImpl.setAttachedFile(getAttachedFile());
		inspectionRecordImpl.setConfirmedResult(getConfirmedResult());
		inspectionRecordImpl.setSignName(getSignName());
		inspectionRecordImpl.setSignTitle(getSignTitle());
		inspectionRecordImpl.setSignPlace(getSignPlace());
		inspectionRecordImpl.setSignDate(getSignDate());
		inspectionRecordImpl.setPhieuXuLyPhuId(getPhieuXuLyPhuId());
		inspectionRecordImpl.setMarkupSafeTest(getMarkupSafeTest());
		inspectionRecordImpl.setMarkupEmissionTest(getMarkupEmissionTest());
		inspectionRecordImpl.setMarkupControl(getMarkupControl());
		inspectionRecordImpl.setRegisteredInspectionId(getRegisteredInspectionId());
		inspectionRecordImpl.setRemarks(getRemarks());
		inspectionRecordImpl.setHoSoThuTucId(getHoSoThuTucId());
		inspectionRecordImpl.setOtherCosts(getOtherCosts());
		inspectionRecordImpl.setMarkupPaid(getMarkupPaid());

		inspectionRecordImpl.resetOriginalValues();

		return inspectionRecordImpl;
	}

	@Override
	public int compareTo(InspectionRecord inspectionRecord) {
		int value = 0;

		if (getId() < inspectionRecord.getId()) {
			value = -1;
		}
		else if (getId() > inspectionRecord.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InspectionRecord)) {
			return false;
		}

		InspectionRecord inspectionRecord = (InspectionRecord)obj;

		long primaryKey = inspectionRecord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		InspectionRecordModelImpl inspectionRecordModelImpl = this;

		inspectionRecordModelImpl._originalInspectionRecordNo = inspectionRecordModelImpl._inspectionRecordNo;

		inspectionRecordModelImpl._originalConfirmedInspectionId = inspectionRecordModelImpl._confirmedInspectionId;

		inspectionRecordModelImpl._setOriginalConfirmedInspectionId = false;

		inspectionRecordModelImpl._originalPhieuXuLyPhuId = inspectionRecordModelImpl._phieuXuLyPhuId;

		inspectionRecordModelImpl._setOriginalPhieuXuLyPhuId = false;

		inspectionRecordModelImpl._originalRegisteredInspectionId = inspectionRecordModelImpl._registeredInspectionId;

		inspectionRecordModelImpl._setOriginalRegisteredInspectionId = false;

		inspectionRecordModelImpl._originalHoSoThuTucId = inspectionRecordModelImpl._hoSoThuTucId;

		inspectionRecordModelImpl._setOriginalHoSoThuTucId = false;

		inspectionRecordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<InspectionRecord> toCacheModel() {
		InspectionRecordCacheModel inspectionRecordCacheModel = new InspectionRecordCacheModel();

		inspectionRecordCacheModel.id = getId();

		inspectionRecordCacheModel.inspectionRecordNo = getInspectionRecordNo();

		String inspectionRecordNo = inspectionRecordCacheModel.inspectionRecordNo;

		if ((inspectionRecordNo != null) && (inspectionRecordNo.length() == 0)) {
			inspectionRecordCacheModel.inspectionRecordNo = null;
		}

		Date inspectionRecordDate = getInspectionRecordDate();

		if (inspectionRecordDate != null) {
			inspectionRecordCacheModel.inspectionRecordDate = inspectionRecordDate.getTime();
		}
		else {
			inspectionRecordCacheModel.inspectionRecordDate = Long.MIN_VALUE;
		}

		inspectionRecordCacheModel.corporationId = getCorporationId();

		String corporationId = inspectionRecordCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			inspectionRecordCacheModel.corporationId = null;
		}

		inspectionRecordCacheModel.inspectorId = getInspectorId();

		inspectionRecordCacheModel.confirmedInspectionId = getConfirmedInspectionId();

		inspectionRecordCacheModel.customsDeclarationid = getCustomsDeclarationid();

		inspectionRecordCacheModel.inspectionSite = getInspectionSite();

		String inspectionSite = inspectionRecordCacheModel.inspectionSite;

		if ((inspectionSite != null) && (inspectionSite.length() == 0)) {
			inspectionRecordCacheModel.inspectionSite = null;
		}

		Date inspectionDateFrom = getInspectionDateFrom();

		if (inspectionDateFrom != null) {
			inspectionRecordCacheModel.inspectionDateFrom = inspectionDateFrom.getTime();
		}
		else {
			inspectionRecordCacheModel.inspectionDateFrom = Long.MIN_VALUE;
		}

		Date inspectionDateTo = getInspectionDateTo();

		if (inspectionDateTo != null) {
			inspectionRecordCacheModel.inspectionDateTo = inspectionDateTo.getTime();
		}
		else {
			inspectionRecordCacheModel.inspectionDateTo = Long.MIN_VALUE;
		}

		inspectionRecordCacheModel.inspectionMode = getInspectionMode();

		inspectionRecordCacheModel.description = getDescription();

		String description = inspectionRecordCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			inspectionRecordCacheModel.description = null;
		}

		inspectionRecordCacheModel.attachedFile = getAttachedFile();

		inspectionRecordCacheModel.confirmedResult = getConfirmedResult();

		inspectionRecordCacheModel.signName = getSignName();

		String signName = inspectionRecordCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			inspectionRecordCacheModel.signName = null;
		}

		inspectionRecordCacheModel.signTitle = getSignTitle();

		String signTitle = inspectionRecordCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			inspectionRecordCacheModel.signTitle = null;
		}

		inspectionRecordCacheModel.signPlace = getSignPlace();

		String signPlace = inspectionRecordCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			inspectionRecordCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			inspectionRecordCacheModel.signDate = signDate.getTime();
		}
		else {
			inspectionRecordCacheModel.signDate = Long.MIN_VALUE;
		}

		inspectionRecordCacheModel.phieuXuLyPhuId = getPhieuXuLyPhuId();

		inspectionRecordCacheModel.markupSafeTest = getMarkupSafeTest();

		inspectionRecordCacheModel.markupEmissionTest = getMarkupEmissionTest();

		inspectionRecordCacheModel.markupControl = getMarkupControl();

		inspectionRecordCacheModel.registeredInspectionId = getRegisteredInspectionId();

		inspectionRecordCacheModel.remarks = getRemarks();

		String remarks = inspectionRecordCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			inspectionRecordCacheModel.remarks = null;
		}

		inspectionRecordCacheModel.hoSoThuTucId = getHoSoThuTucId();

		inspectionRecordCacheModel.otherCosts = getOtherCosts();

		inspectionRecordCacheModel.markupPaid = getMarkupPaid();

		return inspectionRecordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(55);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", inspectionRecordNo=");
		sb.append(getInspectionRecordNo());
		sb.append(", inspectionRecordDate=");
		sb.append(getInspectionRecordDate());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", confirmedInspectionId=");
		sb.append(getConfirmedInspectionId());
		sb.append(", customsDeclarationid=");
		sb.append(getCustomsDeclarationid());
		sb.append(", inspectionSite=");
		sb.append(getInspectionSite());
		sb.append(", inspectionDateFrom=");
		sb.append(getInspectionDateFrom());
		sb.append(", inspectionDateTo=");
		sb.append(getInspectionDateTo());
		sb.append(", inspectionMode=");
		sb.append(getInspectionMode());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append(", confirmedResult=");
		sb.append(getConfirmedResult());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", phieuXuLyPhuId=");
		sb.append(getPhieuXuLyPhuId());
		sb.append(", markupSafeTest=");
		sb.append(getMarkupSafeTest());
		sb.append(", markupEmissionTest=");
		sb.append(getMarkupEmissionTest());
		sb.append(", markupControl=");
		sb.append(getMarkupControl());
		sb.append(", registeredInspectionId=");
		sb.append(getRegisteredInspectionId());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", hoSoThuTucId=");
		sb.append(getHoSoThuTucId());
		sb.append(", otherCosts=");
		sb.append(getOtherCosts());
		sb.append(", markupPaid=");
		sb.append(getMarkupPaid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(85);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.InspectionRecord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordNo</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmedInspectionId</column-name><column-value><![CDATA[");
		sb.append(getConfirmedInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customsDeclarationid</column-name><column-value><![CDATA[");
		sb.append(getCustomsDeclarationid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionSite</column-name><column-value><![CDATA[");
		sb.append(getInspectionSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDateFrom</column-name><column-value><![CDATA[");
		sb.append(getInspectionDateFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDateTo</column-name><column-value><![CDATA[");
		sb.append(getInspectionDateTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionMode</column-name><column-value><![CDATA[");
		sb.append(getInspectionMode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmedResult</column-name><column-value><![CDATA[");
		sb.append(getConfirmedResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phieuXuLyPhuId</column-name><column-value><![CDATA[");
		sb.append(getPhieuXuLyPhuId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupSafeTest</column-name><column-value><![CDATA[");
		sb.append(getMarkupSafeTest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupEmissionTest</column-name><column-value><![CDATA[");
		sb.append(getMarkupEmissionTest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupControl</column-name><column-value><![CDATA[");
		sb.append(getMarkupControl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredInspectionId</column-name><column-value><![CDATA[");
		sb.append(getRegisteredInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoSoThuTucId</column-name><column-value><![CDATA[");
		sb.append(getHoSoThuTucId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherCosts</column-name><column-value><![CDATA[");
		sb.append(getOtherCosts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupPaid</column-name><column-value><![CDATA[");
		sb.append(getMarkupPaid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = InspectionRecord.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			InspectionRecord.class
		};
	private long _id;
	private String _inspectionRecordNo;
	private String _originalInspectionRecordNo;
	private Date _inspectionRecordDate;
	private String _corporationId;
	private long _inspectorId;
	private long _confirmedInspectionId;
	private long _originalConfirmedInspectionId;
	private boolean _setOriginalConfirmedInspectionId;
	private long _customsDeclarationid;
	private String _inspectionSite;
	private Date _inspectionDateFrom;
	private Date _inspectionDateTo;
	private long _inspectionMode;
	private String _description;
	private long _attachedFile;
	private long _confirmedResult;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private Date _signDate;
	private long _phieuXuLyPhuId;
	private long _originalPhieuXuLyPhuId;
	private boolean _setOriginalPhieuXuLyPhuId;
	private long _markupSafeTest;
	private long _markupEmissionTest;
	private long _markupControl;
	private long _registeredInspectionId;
	private long _originalRegisteredInspectionId;
	private boolean _setOriginalRegisteredInspectionId;
	private String _remarks;
	private long _hoSoThuTucId;
	private long _originalHoSoThuTucId;
	private boolean _setOriginalHoSoThuTucId;
	private double _otherCosts;
	private long _markupPaid;
	private long _columnBitmask;
	private InspectionRecord _escapedModel;
}