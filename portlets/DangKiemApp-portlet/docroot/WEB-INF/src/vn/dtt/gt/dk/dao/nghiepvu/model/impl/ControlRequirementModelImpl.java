/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirement;
import vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirementModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirementSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ControlRequirement service. Represents a row in the &quot;vr_controlrequirement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ControlRequirementImpl}.
 * </p>
 *
 * @author win_64
 * @see ControlRequirementImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirement
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirementModel
 * @generated
 */
@JSON(strict = true)
public class ControlRequirementModelImpl extends BaseModelImpl<ControlRequirement>
	implements ControlRequirementModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a control requirement model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirement} interface instead.
	 */
	public static final String TABLE_NAME = "vr_controlrequirement";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "registeredinspectionid", Types.BIGINT },
			{ "requirementnumber", Types.VARCHAR },
			{ "requirementdate", Types.TIMESTAMP },
			{ "corporationid", Types.VARCHAR },
			{ "controlcontent", Types.VARCHAR },
			{ "controldeadline", Types.TIMESTAMP },
			{ "attachedfile", Types.INTEGER },
			{ "requirementcontent", Types.VARCHAR },
			{ "controlreportdeadline", Types.TIMESTAMP },
			{ "remarks", Types.VARCHAR },
			{ "signname", Types.VARCHAR },
			{ "signtitle", Types.VARCHAR },
			{ "signplace", Types.VARCHAR },
			{ "signdate", Types.TIMESTAMP },
			{ "inspectionrecordid", Types.BIGINT },
			{ "phieuxulyphuid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_controlrequirement (id LONG not null primary key,registeredinspectionid LONG,requirementnumber VARCHAR(75) null,requirementdate DATE null,corporationid VARCHAR(75) null,controlcontent VARCHAR(75) null,controldeadline DATE null,attachedfile INTEGER,requirementcontent VARCHAR(75) null,controlreportdeadline DATE null,remarks VARCHAR(75) null,signname VARCHAR(75) null,signtitle VARCHAR(75) null,signplace VARCHAR(75) null,signdate DATE null,inspectionrecordid LONG,phieuxulyphuid LONG)";
	public static final String TABLE_SQL_DROP = "drop table vr_controlrequirement";
	public static final String ORDER_BY_JPQL = " ORDER BY controlRequirement.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_controlrequirement.id DESC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirement"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirement"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirement"),
			true);
	public static long INSPECTIONRECORDID_COLUMN_BITMASK = 1L;
	public static long PHIEUXULYPHUID_COLUMN_BITMASK = 2L;
	public static long REGISTEREDINSPECTIONID_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ControlRequirement toModel(ControlRequirementSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ControlRequirement model = new ControlRequirementImpl();

		model.setId(soapModel.getId());
		model.setRegisteredInspectionId(soapModel.getRegisteredInspectionId());
		model.setRequirementNumber(soapModel.getRequirementNumber());
		model.setRequirementDate(soapModel.getRequirementDate());
		model.setCorporationId(soapModel.getCorporationId());
		model.setControlContent(soapModel.getControlContent());
		model.setControlDeadline(soapModel.getControlDeadline());
		model.setAttachedFile(soapModel.getAttachedFile());
		model.setRequirementContent(soapModel.getRequirementContent());
		model.setControlReportDeadline(soapModel.getControlReportDeadline());
		model.setRemarks(soapModel.getRemarks());
		model.setSignName(soapModel.getSignName());
		model.setSignTitle(soapModel.getSignTitle());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setInspectionrecordId(soapModel.getInspectionrecordId());
		model.setPhieuxulyphuId(soapModel.getPhieuxulyphuId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ControlRequirement> toModels(
		ControlRequirementSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ControlRequirement> models = new ArrayList<ControlRequirement>(soapModels.length);

		for (ControlRequirementSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirement"));

	public ControlRequirementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ControlRequirement.class;
	}

	@Override
	public String getModelClassName() {
		return ControlRequirement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("registeredInspectionId", getRegisteredInspectionId());
		attributes.put("requirementNumber", getRequirementNumber());
		attributes.put("requirementDate", getRequirementDate());
		attributes.put("corporationId", getCorporationId());
		attributes.put("controlContent", getControlContent());
		attributes.put("controlDeadline", getControlDeadline());
		attributes.put("attachedFile", getAttachedFile());
		attributes.put("requirementContent", getRequirementContent());
		attributes.put("controlReportDeadline", getControlReportDeadline());
		attributes.put("remarks", getRemarks());
		attributes.put("signName", getSignName());
		attributes.put("signTitle", getSignTitle());
		attributes.put("signPlace", getSignPlace());
		attributes.put("signDate", getSignDate());
		attributes.put("inspectionrecordId", getInspectionrecordId());
		attributes.put("phieuxulyphuId", getPhieuxulyphuId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long registeredInspectionId = (Long)attributes.get(
				"registeredInspectionId");

		if (registeredInspectionId != null) {
			setRegisteredInspectionId(registeredInspectionId);
		}

		String requirementNumber = (String)attributes.get("requirementNumber");

		if (requirementNumber != null) {
			setRequirementNumber(requirementNumber);
		}

		Date requirementDate = (Date)attributes.get("requirementDate");

		if (requirementDate != null) {
			setRequirementDate(requirementDate);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		String controlContent = (String)attributes.get("controlContent");

		if (controlContent != null) {
			setControlContent(controlContent);
		}

		Date controlDeadline = (Date)attributes.get("controlDeadline");

		if (controlDeadline != null) {
			setControlDeadline(controlDeadline);
		}

		Integer attachedFile = (Integer)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}

		String requirementContent = (String)attributes.get("requirementContent");

		if (requirementContent != null) {
			setRequirementContent(requirementContent);
		}

		Date controlReportDeadline = (Date)attributes.get(
				"controlReportDeadline");

		if (controlReportDeadline != null) {
			setControlReportDeadline(controlReportDeadline);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String signName = (String)attributes.get("signName");

		if (signName != null) {
			setSignName(signName);
		}

		String signTitle = (String)attributes.get("signTitle");

		if (signTitle != null) {
			setSignTitle(signTitle);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		Long inspectionrecordId = (Long)attributes.get("inspectionrecordId");

		if (inspectionrecordId != null) {
			setInspectionrecordId(inspectionrecordId);
		}

		Long phieuxulyphuId = (Long)attributes.get("phieuxulyphuId");

		if (phieuxulyphuId != null) {
			setPhieuxulyphuId(phieuxulyphuId);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getRegisteredInspectionId() {
		return _registeredInspectionId;
	}

	@Override
	public void setRegisteredInspectionId(long registeredInspectionId) {
		_columnBitmask |= REGISTEREDINSPECTIONID_COLUMN_BITMASK;

		if (!_setOriginalRegisteredInspectionId) {
			_setOriginalRegisteredInspectionId = true;

			_originalRegisteredInspectionId = _registeredInspectionId;
		}

		_registeredInspectionId = registeredInspectionId;
	}

	public long getOriginalRegisteredInspectionId() {
		return _originalRegisteredInspectionId;
	}

	@JSON
	@Override
	public String getRequirementNumber() {
		if (_requirementNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _requirementNumber;
		}
	}

	@Override
	public void setRequirementNumber(String requirementNumber) {
		_requirementNumber = requirementNumber;
	}

	@JSON
	@Override
	public Date getRequirementDate() {
		return _requirementDate;
	}

	@Override
	public void setRequirementDate(Date requirementDate) {
		_requirementDate = requirementDate;
	}

	@JSON
	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_corporationId = corporationId;
	}

	@JSON
	@Override
	public String getControlContent() {
		if (_controlContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _controlContent;
		}
	}

	@Override
	public void setControlContent(String controlContent) {
		_controlContent = controlContent;
	}

	@JSON
	@Override
	public Date getControlDeadline() {
		return _controlDeadline;
	}

	@Override
	public void setControlDeadline(Date controlDeadline) {
		_controlDeadline = controlDeadline;
	}

	@JSON
	@Override
	public int getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(int attachedFile) {
		_attachedFile = attachedFile;
	}

	@JSON
	@Override
	public String getRequirementContent() {
		if (_requirementContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _requirementContent;
		}
	}

	@Override
	public void setRequirementContent(String requirementContent) {
		_requirementContent = requirementContent;
	}

	@JSON
	@Override
	public Date getControlReportDeadline() {
		return _controlReportDeadline;
	}

	@Override
	public void setControlReportDeadline(Date controlReportDeadline) {
		_controlReportDeadline = controlReportDeadline;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	@Override
	public void setSignName(String signName) {
		_signName = signName;
	}

	@JSON
	@Override
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	@Override
	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@JSON
	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public long getInspectionrecordId() {
		return _inspectionrecordId;
	}

	@Override
	public void setInspectionrecordId(long inspectionrecordId) {
		_columnBitmask |= INSPECTIONRECORDID_COLUMN_BITMASK;

		if (!_setOriginalInspectionrecordId) {
			_setOriginalInspectionrecordId = true;

			_originalInspectionrecordId = _inspectionrecordId;
		}

		_inspectionrecordId = inspectionrecordId;
	}

	public long getOriginalInspectionrecordId() {
		return _originalInspectionrecordId;
	}

	@JSON
	@Override
	public long getPhieuxulyphuId() {
		return _phieuxulyphuId;
	}

	@Override
	public void setPhieuxulyphuId(long phieuxulyphuId) {
		_columnBitmask |= PHIEUXULYPHUID_COLUMN_BITMASK;

		if (!_setOriginalPhieuxulyphuId) {
			_setOriginalPhieuxulyphuId = true;

			_originalPhieuxulyphuId = _phieuxulyphuId;
		}

		_phieuxulyphuId = phieuxulyphuId;
	}

	public long getOriginalPhieuxulyphuId() {
		return _originalPhieuxulyphuId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ControlRequirement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ControlRequirement toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ControlRequirement)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ControlRequirementImpl controlRequirementImpl = new ControlRequirementImpl();

		controlRequirementImpl.setId(getId());
		controlRequirementImpl.setRegisteredInspectionId(getRegisteredInspectionId());
		controlRequirementImpl.setRequirementNumber(getRequirementNumber());
		controlRequirementImpl.setRequirementDate(getRequirementDate());
		controlRequirementImpl.setCorporationId(getCorporationId());
		controlRequirementImpl.setControlContent(getControlContent());
		controlRequirementImpl.setControlDeadline(getControlDeadline());
		controlRequirementImpl.setAttachedFile(getAttachedFile());
		controlRequirementImpl.setRequirementContent(getRequirementContent());
		controlRequirementImpl.setControlReportDeadline(getControlReportDeadline());
		controlRequirementImpl.setRemarks(getRemarks());
		controlRequirementImpl.setSignName(getSignName());
		controlRequirementImpl.setSignTitle(getSignTitle());
		controlRequirementImpl.setSignPlace(getSignPlace());
		controlRequirementImpl.setSignDate(getSignDate());
		controlRequirementImpl.setInspectionrecordId(getInspectionrecordId());
		controlRequirementImpl.setPhieuxulyphuId(getPhieuxulyphuId());

		controlRequirementImpl.resetOriginalValues();

		return controlRequirementImpl;
	}

	@Override
	public int compareTo(ControlRequirement controlRequirement) {
		int value = 0;

		if (getId() < controlRequirement.getId()) {
			value = -1;
		}
		else if (getId() > controlRequirement.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ControlRequirement)) {
			return false;
		}

		ControlRequirement controlRequirement = (ControlRequirement)obj;

		long primaryKey = controlRequirement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ControlRequirementModelImpl controlRequirementModelImpl = this;

		controlRequirementModelImpl._originalRegisteredInspectionId = controlRequirementModelImpl._registeredInspectionId;

		controlRequirementModelImpl._setOriginalRegisteredInspectionId = false;

		controlRequirementModelImpl._originalInspectionrecordId = controlRequirementModelImpl._inspectionrecordId;

		controlRequirementModelImpl._setOriginalInspectionrecordId = false;

		controlRequirementModelImpl._originalPhieuxulyphuId = controlRequirementModelImpl._phieuxulyphuId;

		controlRequirementModelImpl._setOriginalPhieuxulyphuId = false;

		controlRequirementModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ControlRequirement> toCacheModel() {
		ControlRequirementCacheModel controlRequirementCacheModel = new ControlRequirementCacheModel();

		controlRequirementCacheModel.id = getId();

		controlRequirementCacheModel.registeredInspectionId = getRegisteredInspectionId();

		controlRequirementCacheModel.requirementNumber = getRequirementNumber();

		String requirementNumber = controlRequirementCacheModel.requirementNumber;

		if ((requirementNumber != null) && (requirementNumber.length() == 0)) {
			controlRequirementCacheModel.requirementNumber = null;
		}

		Date requirementDate = getRequirementDate();

		if (requirementDate != null) {
			controlRequirementCacheModel.requirementDate = requirementDate.getTime();
		}
		else {
			controlRequirementCacheModel.requirementDate = Long.MIN_VALUE;
		}

		controlRequirementCacheModel.corporationId = getCorporationId();

		String corporationId = controlRequirementCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			controlRequirementCacheModel.corporationId = null;
		}

		controlRequirementCacheModel.controlContent = getControlContent();

		String controlContent = controlRequirementCacheModel.controlContent;

		if ((controlContent != null) && (controlContent.length() == 0)) {
			controlRequirementCacheModel.controlContent = null;
		}

		Date controlDeadline = getControlDeadline();

		if (controlDeadline != null) {
			controlRequirementCacheModel.controlDeadline = controlDeadline.getTime();
		}
		else {
			controlRequirementCacheModel.controlDeadline = Long.MIN_VALUE;
		}

		controlRequirementCacheModel.attachedFile = getAttachedFile();

		controlRequirementCacheModel.requirementContent = getRequirementContent();

		String requirementContent = controlRequirementCacheModel.requirementContent;

		if ((requirementContent != null) && (requirementContent.length() == 0)) {
			controlRequirementCacheModel.requirementContent = null;
		}

		Date controlReportDeadline = getControlReportDeadline();

		if (controlReportDeadline != null) {
			controlRequirementCacheModel.controlReportDeadline = controlReportDeadline.getTime();
		}
		else {
			controlRequirementCacheModel.controlReportDeadline = Long.MIN_VALUE;
		}

		controlRequirementCacheModel.remarks = getRemarks();

		String remarks = controlRequirementCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			controlRequirementCacheModel.remarks = null;
		}

		controlRequirementCacheModel.signName = getSignName();

		String signName = controlRequirementCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			controlRequirementCacheModel.signName = null;
		}

		controlRequirementCacheModel.signTitle = getSignTitle();

		String signTitle = controlRequirementCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			controlRequirementCacheModel.signTitle = null;
		}

		controlRequirementCacheModel.signPlace = getSignPlace();

		String signPlace = controlRequirementCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			controlRequirementCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			controlRequirementCacheModel.signDate = signDate.getTime();
		}
		else {
			controlRequirementCacheModel.signDate = Long.MIN_VALUE;
		}

		controlRequirementCacheModel.inspectionrecordId = getInspectionrecordId();

		controlRequirementCacheModel.phieuxulyphuId = getPhieuxulyphuId();

		return controlRequirementCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", registeredInspectionId=");
		sb.append(getRegisteredInspectionId());
		sb.append(", requirementNumber=");
		sb.append(getRequirementNumber());
		sb.append(", requirementDate=");
		sb.append(getRequirementDate());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", controlContent=");
		sb.append(getControlContent());
		sb.append(", controlDeadline=");
		sb.append(getControlDeadline());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append(", requirementContent=");
		sb.append(getRequirementContent());
		sb.append(", controlReportDeadline=");
		sb.append(getControlReportDeadline());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", inspectionrecordId=");
		sb.append(getInspectionrecordId());
		sb.append(", phieuxulyphuId=");
		sb.append(getPhieuxulyphuId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.ControlRequirement");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredInspectionId</column-name><column-value><![CDATA[");
		sb.append(getRegisteredInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requirementNumber</column-name><column-value><![CDATA[");
		sb.append(getRequirementNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requirementDate</column-name><column-value><![CDATA[");
		sb.append(getRequirementDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>controlContent</column-name><column-value><![CDATA[");
		sb.append(getControlContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>controlDeadline</column-name><column-value><![CDATA[");
		sb.append(getControlDeadline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requirementContent</column-name><column-value><![CDATA[");
		sb.append(getRequirementContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>controlReportDeadline</column-name><column-value><![CDATA[");
		sb.append(getControlReportDeadline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionrecordId</column-name><column-value><![CDATA[");
		sb.append(getInspectionrecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phieuxulyphuId</column-name><column-value><![CDATA[");
		sb.append(getPhieuxulyphuId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ControlRequirement.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ControlRequirement.class
		};
	private long _id;
	private long _registeredInspectionId;
	private long _originalRegisteredInspectionId;
	private boolean _setOriginalRegisteredInspectionId;
	private String _requirementNumber;
	private Date _requirementDate;
	private String _corporationId;
	private String _controlContent;
	private Date _controlDeadline;
	private int _attachedFile;
	private String _requirementContent;
	private Date _controlReportDeadline;
	private String _remarks;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private Date _signDate;
	private long _inspectionrecordId;
	private long _originalInspectionrecordId;
	private boolean _setOriginalInspectionrecordId;
	private long _phieuxulyphuId;
	private long _originalPhieuxulyphuId;
	private boolean _setOriginalPhieuxulyphuId;
	private long _columnBitmask;
	private ControlRequirement _escapedModel;
}