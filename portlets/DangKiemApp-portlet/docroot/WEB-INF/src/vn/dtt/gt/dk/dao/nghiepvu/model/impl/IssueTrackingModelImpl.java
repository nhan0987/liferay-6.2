/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.IssueTracking;
import vn.dtt.gt.dk.dao.nghiepvu.model.IssueTrackingModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.IssueTrackingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IssueTracking service. Represents a row in the &quot;vr_assessmentissuetracking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.IssueTrackingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssueTrackingImpl}.
 * </p>
 *
 * @author win_64
 * @see IssueTrackingImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.IssueTracking
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.IssueTrackingModel
 * @generated
 */
@JSON(strict = true)
public class IssueTrackingModelImpl extends BaseModelImpl<IssueTracking>
	implements IssueTrackingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a issue tracking model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.IssueTracking} interface instead.
	 */
	public static final String TABLE_NAME = "vr_assessmentissuetracking";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "importercode", Types.VARCHAR },
			{ "importername", Types.VARCHAR },
			{ "registerednumber", Types.VARCHAR },
			{ "inspectionrecordno", Types.VARCHAR },
			{ "inspectionrecorddate", Types.TIMESTAMP },
			{ "corporationid", Types.VARCHAR },
			{ "inspectorid", Types.BIGINT },
			{ "vehicleclass", Types.VARCHAR },
			{ "productcode", Types.VARCHAR },
			{ "productname", Types.VARCHAR },
			{ "totalvehicle", Types.BIGINT },
			{ "codenumber", Types.BIGINT },
			{ "chassisnumber", Types.VARCHAR },
			{ "enginenumber", Types.VARCHAR },
			{ "importedorassembled", Types.VARCHAR },
			{ "issuetrackingfromcustomer", Types.VARCHAR },
			{ "issuetrackingbycorporation", Types.VARCHAR },
			{ "issuetrackingbyimportedgroup", Types.VARCHAR },
			{ "issuediscovery", Types.BIGINT },
			{ "issuedescription", Types.VARCHAR },
			{ "issueVAQ1reason", Types.VARCHAR },
			{ "issueVAQ2troubleshooting", Types.VARCHAR },
			{ "issueVAQ3longtermsolution", Types.VARCHAR },
			{ "issueVAQ4precaution", Types.VARCHAR },
			{ "creator", Types.VARCHAR },
			{ "createddate", Types.TIMESTAMP },
			{ "markupissueVAQ4", Types.INTEGER },
			{ "makerVAQ4", Types.VARCHAR },
			{ "checkerVAQ4", Types.VARCHAR },
			{ "approverVAQ4", Types.VARCHAR },
			{ "makerVAQ4modified", Types.TIMESTAMP },
			{ "checkerVAQ4modified", Types.TIMESTAMP },
			{ "approverVAQ4modified", Types.TIMESTAMP },
			{ "markupissueVAQ1", Types.INTEGER },
			{ "makerVAQ1", Types.VARCHAR },
			{ "checkerVAQ1", Types.VARCHAR },
			{ "makerVAQ1modified", Types.TIMESTAMP },
			{ "checkerVAQ1modified", Types.TIMESTAMP },
			{ "markupissueVAQ2", Types.INTEGER },
			{ "makerVAQ2", Types.VARCHAR },
			{ "checkerVAQ2", Types.VARCHAR },
			{ "makerVAQ2modified", Types.TIMESTAMP },
			{ "checkerVAQ2modified", Types.TIMESTAMP },
			{ "markupissueVAQ3", Types.INTEGER },
			{ "makerVAQ3", Types.VARCHAR },
			{ "checkerVAQ3", Types.VARCHAR },
			{ "approverVAQ3", Types.VARCHAR },
			{ "makerVAQ3modified", Types.TIMESTAMP },
			{ "checkerVAQ3modified", Types.TIMESTAMP },
			{ "approverVAQ3modified", Types.TIMESTAMP },
			{ "defectstatus", Types.INTEGER },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_assessmentissuetracking (id LONG not null primary key,importercode VARCHAR(75) null,importername VARCHAR(75) null,registerednumber VARCHAR(75) null,inspectionrecordno VARCHAR(75) null,inspectionrecorddate DATE null,corporationid VARCHAR(75) null,inspectorid LONG,vehicleclass VARCHAR(75) null,productcode VARCHAR(75) null,productname VARCHAR(75) null,totalvehicle LONG,codenumber LONG,chassisnumber VARCHAR(75) null,enginenumber VARCHAR(75) null,importedorassembled VARCHAR(75) null,issuetrackingfromcustomer VARCHAR(75) null,issuetrackingbycorporation VARCHAR(75) null,issuetrackingbyimportedgroup VARCHAR(75) null,issuediscovery LONG,issuedescription VARCHAR(75) null,issueVAQ1reason VARCHAR(75) null,issueVAQ2troubleshooting VARCHAR(75) null,issueVAQ3longtermsolution VARCHAR(75) null,issueVAQ4precaution VARCHAR(75) null,creator VARCHAR(75) null,createddate DATE null,markupissueVAQ4 INTEGER,makerVAQ4 VARCHAR(75) null,checkerVAQ4 VARCHAR(75) null,approverVAQ4 VARCHAR(75) null,makerVAQ4modified DATE null,checkerVAQ4modified DATE null,approverVAQ4modified DATE null,markupissueVAQ1 INTEGER,makerVAQ1 VARCHAR(75) null,checkerVAQ1 VARCHAR(75) null,makerVAQ1modified DATE null,checkerVAQ1modified DATE null,markupissueVAQ2 INTEGER,makerVAQ2 VARCHAR(75) null,checkerVAQ2 VARCHAR(75) null,makerVAQ2modified DATE null,checkerVAQ2modified DATE null,markupissueVAQ3 INTEGER,makerVAQ3 VARCHAR(75) null,checkerVAQ3 VARCHAR(75) null,approverVAQ3 VARCHAR(75) null,makerVAQ3modified DATE null,checkerVAQ3modified DATE null,approverVAQ3modified DATE null,defectstatus INTEGER,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_assessmentissuetracking";
	public static final String ORDER_BY_JPQL = " ORDER BY issueTracking.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_assessmentissuetracking.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.IssueTracking"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.IssueTracking"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.IssueTracking"),
			true);
	public static long DEFECTSTATUS_COLUMN_BITMASK = 1L;
	public static long IMPORTERCODE_COLUMN_BITMASK = 2L;
	public static long IMPORTERNAME_COLUMN_BITMASK = 4L;
	public static long INSPECTIONRECORDNO_COLUMN_BITMASK = 8L;
	public static long PRODUCTCODE_COLUMN_BITMASK = 16L;
	public static long REGISTEREDNUMBER_COLUMN_BITMASK = 32L;
	public static long ID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IssueTracking toModel(IssueTrackingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		IssueTracking model = new IssueTrackingImpl();

		model.setId(soapModel.getId());
		model.setImportercode(soapModel.getImportercode());
		model.setImportername(soapModel.getImportername());
		model.setRegisterednumber(soapModel.getRegisterednumber());
		model.setInspectionrecordno(soapModel.getInspectionrecordno());
		model.setInspectionRecordDate(soapModel.getInspectionRecordDate());
		model.setCorporationId(soapModel.getCorporationId());
		model.setInspectorId(soapModel.getInspectorId());
		model.setVehicleClass(soapModel.getVehicleClass());
		model.setProductcode(soapModel.getProductcode());
		model.setProductname(soapModel.getProductname());
		model.setTotalvehicle(soapModel.getTotalvehicle());
		model.setCodeNumber(soapModel.getCodeNumber());
		model.setChassisNumber(soapModel.getChassisNumber());
		model.setEngineNumber(soapModel.getEngineNumber());
		model.setImportedorassembled(soapModel.getImportedorassembled());
		model.setIssuetrackingfromcustomer(soapModel.getIssuetrackingfromcustomer());
		model.setIssuetrackingbycorporation(soapModel.getIssuetrackingbycorporation());
		model.setIssuetrackingbyimportedgroup(soapModel.getIssuetrackingbyimportedgroup());
		model.setIssuediscovery(soapModel.getIssuediscovery());
		model.setIssuedescription(soapModel.getIssuedescription());
		model.setIssueVAQ1reason(soapModel.getIssueVAQ1reason());
		model.setIssueVAQ2troubleshooting(soapModel.getIssueVAQ2troubleshooting());
		model.setIssueVAQ3longtermsolution(soapModel.getIssueVAQ3longtermsolution());
		model.setIssueVAQ4precaution(soapModel.getIssueVAQ4precaution());
		model.setCreator(soapModel.getCreator());
		model.setCreateddate(soapModel.getCreateddate());
		model.setMarkupissueVAQ4(soapModel.getMarkupissueVAQ4());
		model.setMakerVAQ4(soapModel.getMakerVAQ4());
		model.setCheckerVAQ4(soapModel.getCheckerVAQ4());
		model.setApproverVAQ4(soapModel.getApproverVAQ4());
		model.setMakerVAQ4modified(soapModel.getMakerVAQ4modified());
		model.setCheckerVAQ4modified(soapModel.getCheckerVAQ4modified());
		model.setApproverVAQ4modified(soapModel.getApproverVAQ4modified());
		model.setMarkupissueVAQ1(soapModel.getMarkupissueVAQ1());
		model.setMakerVAQ1(soapModel.getMakerVAQ1());
		model.setCheckerVAQ1(soapModel.getCheckerVAQ1());
		model.setMakerVAQ1modified(soapModel.getMakerVAQ1modified());
		model.setCheckerVAQ1modified(soapModel.getCheckerVAQ1modified());
		model.setMarkupissueVAQ2(soapModel.getMarkupissueVAQ2());
		model.setMakerVAQ2(soapModel.getMakerVAQ2());
		model.setCheckerVAQ2(soapModel.getCheckerVAQ2());
		model.setMakerVAQ2modified(soapModel.getMakerVAQ2modified());
		model.setCheckerVAQ2modified(soapModel.getCheckerVAQ2modified());
		model.setMarkupissueVAQ3(soapModel.getMarkupissueVAQ3());
		model.setMakerVAQ3(soapModel.getMakerVAQ3());
		model.setCheckerVAQ3(soapModel.getCheckerVAQ3());
		model.setApproverVAQ3(soapModel.getApproverVAQ3());
		model.setMakerVAQ3modified(soapModel.getMakerVAQ3modified());
		model.setCheckerVAQ3modified(soapModel.getCheckerVAQ3modified());
		model.setApproverVAQ3modified(soapModel.getApproverVAQ3modified());
		model.setDefectStatus(soapModel.getDefectStatus());
		model.setSynchdate(soapModel.getSynchdate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IssueTracking> toModels(IssueTrackingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<IssueTracking> models = new ArrayList<IssueTracking>(soapModels.length);

		for (IssueTrackingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.IssueTracking"));

	public IssueTrackingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IssueTracking.class;
	}

	@Override
	public String getModelClassName() {
		return IssueTracking.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("importercode", getImportercode());
		attributes.put("importername", getImportername());
		attributes.put("registerednumber", getRegisterednumber());
		attributes.put("inspectionrecordno", getInspectionrecordno());
		attributes.put("inspectionRecordDate", getInspectionRecordDate());
		attributes.put("corporationId", getCorporationId());
		attributes.put("inspectorId", getInspectorId());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("productcode", getProductcode());
		attributes.put("productname", getProductname());
		attributes.put("totalvehicle", getTotalvehicle());
		attributes.put("codeNumber", getCodeNumber());
		attributes.put("chassisNumber", getChassisNumber());
		attributes.put("engineNumber", getEngineNumber());
		attributes.put("importedorassembled", getImportedorassembled());
		attributes.put("issuetrackingfromcustomer",
			getIssuetrackingfromcustomer());
		attributes.put("issuetrackingbycorporation",
			getIssuetrackingbycorporation());
		attributes.put("issuetrackingbyimportedgroup",
			getIssuetrackingbyimportedgroup());
		attributes.put("issuediscovery", getIssuediscovery());
		attributes.put("issuedescription", getIssuedescription());
		attributes.put("issueVAQ1reason", getIssueVAQ1reason());
		attributes.put("issueVAQ2troubleshooting", getIssueVAQ2troubleshooting());
		attributes.put("issueVAQ3longtermsolution",
			getIssueVAQ3longtermsolution());
		attributes.put("issueVAQ4precaution", getIssueVAQ4precaution());
		attributes.put("creator", getCreator());
		attributes.put("createddate", getCreateddate());
		attributes.put("markupissueVAQ4", getMarkupissueVAQ4());
		attributes.put("makerVAQ4", getMakerVAQ4());
		attributes.put("checkerVAQ4", getCheckerVAQ4());
		attributes.put("approverVAQ4", getApproverVAQ4());
		attributes.put("makerVAQ4modified", getMakerVAQ4modified());
		attributes.put("checkerVAQ4modified", getCheckerVAQ4modified());
		attributes.put("approverVAQ4modified", getApproverVAQ4modified());
		attributes.put("markupissueVAQ1", getMarkupissueVAQ1());
		attributes.put("makerVAQ1", getMakerVAQ1());
		attributes.put("checkerVAQ1", getCheckerVAQ1());
		attributes.put("makerVAQ1modified", getMakerVAQ1modified());
		attributes.put("checkerVAQ1modified", getCheckerVAQ1modified());
		attributes.put("markupissueVAQ2", getMarkupissueVAQ2());
		attributes.put("makerVAQ2", getMakerVAQ2());
		attributes.put("checkerVAQ2", getCheckerVAQ2());
		attributes.put("makerVAQ2modified", getMakerVAQ2modified());
		attributes.put("checkerVAQ2modified", getCheckerVAQ2modified());
		attributes.put("markupissueVAQ3", getMarkupissueVAQ3());
		attributes.put("makerVAQ3", getMakerVAQ3());
		attributes.put("checkerVAQ3", getCheckerVAQ3());
		attributes.put("approverVAQ3", getApproverVAQ3());
		attributes.put("makerVAQ3modified", getMakerVAQ3modified());
		attributes.put("checkerVAQ3modified", getCheckerVAQ3modified());
		attributes.put("approverVAQ3modified", getApproverVAQ3modified());
		attributes.put("defectStatus", getDefectStatus());
		attributes.put("synchdate", getSynchdate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String importercode = (String)attributes.get("importercode");

		if (importercode != null) {
			setImportercode(importercode);
		}

		String importername = (String)attributes.get("importername");

		if (importername != null) {
			setImportername(importername);
		}

		String registerednumber = (String)attributes.get("registerednumber");

		if (registerednumber != null) {
			setRegisterednumber(registerednumber);
		}

		String inspectionrecordno = (String)attributes.get("inspectionrecordno");

		if (inspectionrecordno != null) {
			setInspectionrecordno(inspectionrecordno);
		}

		Date inspectionRecordDate = (Date)attributes.get("inspectionRecordDate");

		if (inspectionRecordDate != null) {
			setInspectionRecordDate(inspectionRecordDate);
		}

		String corporationId = (String)attributes.get("corporationId");

		if (corporationId != null) {
			setCorporationId(corporationId);
		}

		Long inspectorId = (Long)attributes.get("inspectorId");

		if (inspectorId != null) {
			setInspectorId(inspectorId);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		String productcode = (String)attributes.get("productcode");

		if (productcode != null) {
			setProductcode(productcode);
		}

		String productname = (String)attributes.get("productname");

		if (productname != null) {
			setProductname(productname);
		}

		Long totalvehicle = (Long)attributes.get("totalvehicle");

		if (totalvehicle != null) {
			setTotalvehicle(totalvehicle);
		}

		Long codeNumber = (Long)attributes.get("codeNumber");

		if (codeNumber != null) {
			setCodeNumber(codeNumber);
		}

		String chassisNumber = (String)attributes.get("chassisNumber");

		if (chassisNumber != null) {
			setChassisNumber(chassisNumber);
		}

		String engineNumber = (String)attributes.get("engineNumber");

		if (engineNumber != null) {
			setEngineNumber(engineNumber);
		}

		String importedorassembled = (String)attributes.get(
				"importedorassembled");

		if (importedorassembled != null) {
			setImportedorassembled(importedorassembled);
		}

		String issuetrackingfromcustomer = (String)attributes.get(
				"issuetrackingfromcustomer");

		if (issuetrackingfromcustomer != null) {
			setIssuetrackingfromcustomer(issuetrackingfromcustomer);
		}

		String issuetrackingbycorporation = (String)attributes.get(
				"issuetrackingbycorporation");

		if (issuetrackingbycorporation != null) {
			setIssuetrackingbycorporation(issuetrackingbycorporation);
		}

		String issuetrackingbyimportedgroup = (String)attributes.get(
				"issuetrackingbyimportedgroup");

		if (issuetrackingbyimportedgroup != null) {
			setIssuetrackingbyimportedgroup(issuetrackingbyimportedgroup);
		}

		Long issuediscovery = (Long)attributes.get("issuediscovery");

		if (issuediscovery != null) {
			setIssuediscovery(issuediscovery);
		}

		String issuedescription = (String)attributes.get("issuedescription");

		if (issuedescription != null) {
			setIssuedescription(issuedescription);
		}

		String issueVAQ1reason = (String)attributes.get("issueVAQ1reason");

		if (issueVAQ1reason != null) {
			setIssueVAQ1reason(issueVAQ1reason);
		}

		String issueVAQ2troubleshooting = (String)attributes.get(
				"issueVAQ2troubleshooting");

		if (issueVAQ2troubleshooting != null) {
			setIssueVAQ2troubleshooting(issueVAQ2troubleshooting);
		}

		String issueVAQ3longtermsolution = (String)attributes.get(
				"issueVAQ3longtermsolution");

		if (issueVAQ3longtermsolution != null) {
			setIssueVAQ3longtermsolution(issueVAQ3longtermsolution);
		}

		String issueVAQ4precaution = (String)attributes.get(
				"issueVAQ4precaution");

		if (issueVAQ4precaution != null) {
			setIssueVAQ4precaution(issueVAQ4precaution);
		}

		String creator = (String)attributes.get("creator");

		if (creator != null) {
			setCreator(creator);
		}

		Date createddate = (Date)attributes.get("createddate");

		if (createddate != null) {
			setCreateddate(createddate);
		}

		Integer markupissueVAQ4 = (Integer)attributes.get("markupissueVAQ4");

		if (markupissueVAQ4 != null) {
			setMarkupissueVAQ4(markupissueVAQ4);
		}

		String makerVAQ4 = (String)attributes.get("makerVAQ4");

		if (makerVAQ4 != null) {
			setMakerVAQ4(makerVAQ4);
		}

		String checkerVAQ4 = (String)attributes.get("checkerVAQ4");

		if (checkerVAQ4 != null) {
			setCheckerVAQ4(checkerVAQ4);
		}

		String approverVAQ4 = (String)attributes.get("approverVAQ4");

		if (approverVAQ4 != null) {
			setApproverVAQ4(approverVAQ4);
		}

		Date makerVAQ4modified = (Date)attributes.get("makerVAQ4modified");

		if (makerVAQ4modified != null) {
			setMakerVAQ4modified(makerVAQ4modified);
		}

		Date checkerVAQ4modified = (Date)attributes.get("checkerVAQ4modified");

		if (checkerVAQ4modified != null) {
			setCheckerVAQ4modified(checkerVAQ4modified);
		}

		Date approverVAQ4modified = (Date)attributes.get("approverVAQ4modified");

		if (approverVAQ4modified != null) {
			setApproverVAQ4modified(approverVAQ4modified);
		}

		Integer markupissueVAQ1 = (Integer)attributes.get("markupissueVAQ1");

		if (markupissueVAQ1 != null) {
			setMarkupissueVAQ1(markupissueVAQ1);
		}

		String makerVAQ1 = (String)attributes.get("makerVAQ1");

		if (makerVAQ1 != null) {
			setMakerVAQ1(makerVAQ1);
		}

		String checkerVAQ1 = (String)attributes.get("checkerVAQ1");

		if (checkerVAQ1 != null) {
			setCheckerVAQ1(checkerVAQ1);
		}

		Date makerVAQ1modified = (Date)attributes.get("makerVAQ1modified");

		if (makerVAQ1modified != null) {
			setMakerVAQ1modified(makerVAQ1modified);
		}

		Date checkerVAQ1modified = (Date)attributes.get("checkerVAQ1modified");

		if (checkerVAQ1modified != null) {
			setCheckerVAQ1modified(checkerVAQ1modified);
		}

		Integer markupissueVAQ2 = (Integer)attributes.get("markupissueVAQ2");

		if (markupissueVAQ2 != null) {
			setMarkupissueVAQ2(markupissueVAQ2);
		}

		String makerVAQ2 = (String)attributes.get("makerVAQ2");

		if (makerVAQ2 != null) {
			setMakerVAQ2(makerVAQ2);
		}

		String checkerVAQ2 = (String)attributes.get("checkerVAQ2");

		if (checkerVAQ2 != null) {
			setCheckerVAQ2(checkerVAQ2);
		}

		Date makerVAQ2modified = (Date)attributes.get("makerVAQ2modified");

		if (makerVAQ2modified != null) {
			setMakerVAQ2modified(makerVAQ2modified);
		}

		Date checkerVAQ2modified = (Date)attributes.get("checkerVAQ2modified");

		if (checkerVAQ2modified != null) {
			setCheckerVAQ2modified(checkerVAQ2modified);
		}

		Integer markupissueVAQ3 = (Integer)attributes.get("markupissueVAQ3");

		if (markupissueVAQ3 != null) {
			setMarkupissueVAQ3(markupissueVAQ3);
		}

		String makerVAQ3 = (String)attributes.get("makerVAQ3");

		if (makerVAQ3 != null) {
			setMakerVAQ3(makerVAQ3);
		}

		String checkerVAQ3 = (String)attributes.get("checkerVAQ3");

		if (checkerVAQ3 != null) {
			setCheckerVAQ3(checkerVAQ3);
		}

		String approverVAQ3 = (String)attributes.get("approverVAQ3");

		if (approverVAQ3 != null) {
			setApproverVAQ3(approverVAQ3);
		}

		Date makerVAQ3modified = (Date)attributes.get("makerVAQ3modified");

		if (makerVAQ3modified != null) {
			setMakerVAQ3modified(makerVAQ3modified);
		}

		Date checkerVAQ3modified = (Date)attributes.get("checkerVAQ3modified");

		if (checkerVAQ3modified != null) {
			setCheckerVAQ3modified(checkerVAQ3modified);
		}

		Date approverVAQ3modified = (Date)attributes.get("approverVAQ3modified");

		if (approverVAQ3modified != null) {
			setApproverVAQ3modified(approverVAQ3modified);
		}

		Integer defectStatus = (Integer)attributes.get("defectStatus");

		if (defectStatus != null) {
			setDefectStatus(defectStatus);
		}

		Date synchdate = (Date)attributes.get("synchdate");

		if (synchdate != null) {
			setSynchdate(synchdate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getImportercode() {
		if (_importercode == null) {
			return StringPool.BLANK;
		}
		else {
			return _importercode;
		}
	}

	@Override
	public void setImportercode(String importercode) {
		_columnBitmask |= IMPORTERCODE_COLUMN_BITMASK;

		if (_originalImportercode == null) {
			_originalImportercode = _importercode;
		}

		_importercode = importercode;
	}

	public String getOriginalImportercode() {
		return GetterUtil.getString(_originalImportercode);
	}

	@JSON
	@Override
	public String getImportername() {
		if (_importername == null) {
			return StringPool.BLANK;
		}
		else {
			return _importername;
		}
	}

	@Override
	public void setImportername(String importername) {
		_columnBitmask |= IMPORTERNAME_COLUMN_BITMASK;

		if (_originalImportername == null) {
			_originalImportername = _importername;
		}

		_importername = importername;
	}

	public String getOriginalImportername() {
		return GetterUtil.getString(_originalImportername);
	}

	@JSON
	@Override
	public String getRegisterednumber() {
		if (_registerednumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registerednumber;
		}
	}

	@Override
	public void setRegisterednumber(String registerednumber) {
		_columnBitmask |= REGISTEREDNUMBER_COLUMN_BITMASK;

		if (_originalRegisterednumber == null) {
			_originalRegisterednumber = _registerednumber;
		}

		_registerednumber = registerednumber;
	}

	public String getOriginalRegisterednumber() {
		return GetterUtil.getString(_originalRegisterednumber);
	}

	@JSON
	@Override
	public String getInspectionrecordno() {
		if (_inspectionrecordno == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionrecordno;
		}
	}

	@Override
	public void setInspectionrecordno(String inspectionrecordno) {
		_columnBitmask |= INSPECTIONRECORDNO_COLUMN_BITMASK;

		if (_originalInspectionrecordno == null) {
			_originalInspectionrecordno = _inspectionrecordno;
		}

		_inspectionrecordno = inspectionrecordno;
	}

	public String getOriginalInspectionrecordno() {
		return GetterUtil.getString(_originalInspectionrecordno);
	}

	@JSON
	@Override
	public Date getInspectionRecordDate() {
		return _inspectionRecordDate;
	}

	@Override
	public void setInspectionRecordDate(Date inspectionRecordDate) {
		_inspectionRecordDate = inspectionRecordDate;
	}

	@JSON
	@Override
	public String getCorporationId() {
		if (_corporationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _corporationId;
		}
	}

	@Override
	public void setCorporationId(String corporationId) {
		_corporationId = corporationId;
	}

	@JSON
	@Override
	public long getInspectorId() {
		return _inspectorId;
	}

	@Override
	public void setInspectorId(long inspectorId) {
		_inspectorId = inspectorId;
	}

	@JSON
	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_vehicleClass = vehicleClass;
	}

	@JSON
	@Override
	public String getProductcode() {
		if (_productcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _productcode;
		}
	}

	@Override
	public void setProductcode(String productcode) {
		_columnBitmask |= PRODUCTCODE_COLUMN_BITMASK;

		if (_originalProductcode == null) {
			_originalProductcode = _productcode;
		}

		_productcode = productcode;
	}

	public String getOriginalProductcode() {
		return GetterUtil.getString(_originalProductcode);
	}

	@JSON
	@Override
	public String getProductname() {
		if (_productname == null) {
			return StringPool.BLANK;
		}
		else {
			return _productname;
		}
	}

	@Override
	public void setProductname(String productname) {
		_productname = productname;
	}

	@JSON
	@Override
	public long getTotalvehicle() {
		return _totalvehicle;
	}

	@Override
	public void setTotalvehicle(long totalvehicle) {
		_totalvehicle = totalvehicle;
	}

	@JSON
	@Override
	public long getCodeNumber() {
		return _codeNumber;
	}

	@Override
	public void setCodeNumber(long codeNumber) {
		_codeNumber = codeNumber;
	}

	@JSON
	@Override
	public String getChassisNumber() {
		if (_chassisNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _chassisNumber;
		}
	}

	@Override
	public void setChassisNumber(String chassisNumber) {
		_chassisNumber = chassisNumber;
	}

	@JSON
	@Override
	public String getEngineNumber() {
		if (_engineNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineNumber;
		}
	}

	@Override
	public void setEngineNumber(String engineNumber) {
		_engineNumber = engineNumber;
	}

	@JSON
	@Override
	public String getImportedorassembled() {
		if (_importedorassembled == null) {
			return StringPool.BLANK;
		}
		else {
			return _importedorassembled;
		}
	}

	@Override
	public void setImportedorassembled(String importedorassembled) {
		_importedorassembled = importedorassembled;
	}

	@JSON
	@Override
	public String getIssuetrackingfromcustomer() {
		if (_issuetrackingfromcustomer == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuetrackingfromcustomer;
		}
	}

	@Override
	public void setIssuetrackingfromcustomer(String issuetrackingfromcustomer) {
		_issuetrackingfromcustomer = issuetrackingfromcustomer;
	}

	@JSON
	@Override
	public String getIssuetrackingbycorporation() {
		if (_issuetrackingbycorporation == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuetrackingbycorporation;
		}
	}

	@Override
	public void setIssuetrackingbycorporation(String issuetrackingbycorporation) {
		_issuetrackingbycorporation = issuetrackingbycorporation;
	}

	@JSON
	@Override
	public String getIssuetrackingbyimportedgroup() {
		if (_issuetrackingbyimportedgroup == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuetrackingbyimportedgroup;
		}
	}

	@Override
	public void setIssuetrackingbyimportedgroup(
		String issuetrackingbyimportedgroup) {
		_issuetrackingbyimportedgroup = issuetrackingbyimportedgroup;
	}

	@JSON
	@Override
	public long getIssuediscovery() {
		return _issuediscovery;
	}

	@Override
	public void setIssuediscovery(long issuediscovery) {
		_issuediscovery = issuediscovery;
	}

	@JSON
	@Override
	public String getIssuedescription() {
		if (_issuedescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuedescription;
		}
	}

	@Override
	public void setIssuedescription(String issuedescription) {
		_issuedescription = issuedescription;
	}

	@JSON
	@Override
	public String getIssueVAQ1reason() {
		if (_issueVAQ1reason == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueVAQ1reason;
		}
	}

	@Override
	public void setIssueVAQ1reason(String issueVAQ1reason) {
		_issueVAQ1reason = issueVAQ1reason;
	}

	@JSON
	@Override
	public String getIssueVAQ2troubleshooting() {
		if (_issueVAQ2troubleshooting == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueVAQ2troubleshooting;
		}
	}

	@Override
	public void setIssueVAQ2troubleshooting(String issueVAQ2troubleshooting) {
		_issueVAQ2troubleshooting = issueVAQ2troubleshooting;
	}

	@JSON
	@Override
	public String getIssueVAQ3longtermsolution() {
		if (_issueVAQ3longtermsolution == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueVAQ3longtermsolution;
		}
	}

	@Override
	public void setIssueVAQ3longtermsolution(String issueVAQ3longtermsolution) {
		_issueVAQ3longtermsolution = issueVAQ3longtermsolution;
	}

	@JSON
	@Override
	public String getIssueVAQ4precaution() {
		if (_issueVAQ4precaution == null) {
			return StringPool.BLANK;
		}
		else {
			return _issueVAQ4precaution;
		}
	}

	@Override
	public void setIssueVAQ4precaution(String issueVAQ4precaution) {
		_issueVAQ4precaution = issueVAQ4precaution;
	}

	@JSON
	@Override
	public String getCreator() {
		if (_creator == null) {
			return StringPool.BLANK;
		}
		else {
			return _creator;
		}
	}

	@Override
	public void setCreator(String creator) {
		_creator = creator;
	}

	@JSON
	@Override
	public Date getCreateddate() {
		return _createddate;
	}

	@Override
	public void setCreateddate(Date createddate) {
		_createddate = createddate;
	}

	@JSON
	@Override
	public int getMarkupissueVAQ4() {
		return _markupissueVAQ4;
	}

	@Override
	public void setMarkupissueVAQ4(int markupissueVAQ4) {
		_markupissueVAQ4 = markupissueVAQ4;
	}

	@JSON
	@Override
	public String getMakerVAQ4() {
		if (_makerVAQ4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _makerVAQ4;
		}
	}

	@Override
	public void setMakerVAQ4(String makerVAQ4) {
		_makerVAQ4 = makerVAQ4;
	}

	@JSON
	@Override
	public String getCheckerVAQ4() {
		if (_checkerVAQ4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _checkerVAQ4;
		}
	}

	@Override
	public void setCheckerVAQ4(String checkerVAQ4) {
		_checkerVAQ4 = checkerVAQ4;
	}

	@JSON
	@Override
	public String getApproverVAQ4() {
		if (_approverVAQ4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _approverVAQ4;
		}
	}

	@Override
	public void setApproverVAQ4(String approverVAQ4) {
		_approverVAQ4 = approverVAQ4;
	}

	@JSON
	@Override
	public Date getMakerVAQ4modified() {
		return _makerVAQ4modified;
	}

	@Override
	public void setMakerVAQ4modified(Date makerVAQ4modified) {
		_makerVAQ4modified = makerVAQ4modified;
	}

	@JSON
	@Override
	public Date getCheckerVAQ4modified() {
		return _checkerVAQ4modified;
	}

	@Override
	public void setCheckerVAQ4modified(Date checkerVAQ4modified) {
		_checkerVAQ4modified = checkerVAQ4modified;
	}

	@JSON
	@Override
	public Date getApproverVAQ4modified() {
		return _approverVAQ4modified;
	}

	@Override
	public void setApproverVAQ4modified(Date approverVAQ4modified) {
		_approverVAQ4modified = approverVAQ4modified;
	}

	@JSON
	@Override
	public int getMarkupissueVAQ1() {
		return _markupissueVAQ1;
	}

	@Override
	public void setMarkupissueVAQ1(int markupissueVAQ1) {
		_markupissueVAQ1 = markupissueVAQ1;
	}

	@JSON
	@Override
	public String getMakerVAQ1() {
		if (_makerVAQ1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _makerVAQ1;
		}
	}

	@Override
	public void setMakerVAQ1(String makerVAQ1) {
		_makerVAQ1 = makerVAQ1;
	}

	@JSON
	@Override
	public String getCheckerVAQ1() {
		if (_checkerVAQ1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _checkerVAQ1;
		}
	}

	@Override
	public void setCheckerVAQ1(String checkerVAQ1) {
		_checkerVAQ1 = checkerVAQ1;
	}

	@JSON
	@Override
	public Date getMakerVAQ1modified() {
		return _makerVAQ1modified;
	}

	@Override
	public void setMakerVAQ1modified(Date makerVAQ1modified) {
		_makerVAQ1modified = makerVAQ1modified;
	}

	@JSON
	@Override
	public Date getCheckerVAQ1modified() {
		return _checkerVAQ1modified;
	}

	@Override
	public void setCheckerVAQ1modified(Date checkerVAQ1modified) {
		_checkerVAQ1modified = checkerVAQ1modified;
	}

	@JSON
	@Override
	public int getMarkupissueVAQ2() {
		return _markupissueVAQ2;
	}

	@Override
	public void setMarkupissueVAQ2(int markupissueVAQ2) {
		_markupissueVAQ2 = markupissueVAQ2;
	}

	@JSON
	@Override
	public String getMakerVAQ2() {
		if (_makerVAQ2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _makerVAQ2;
		}
	}

	@Override
	public void setMakerVAQ2(String makerVAQ2) {
		_makerVAQ2 = makerVAQ2;
	}

	@JSON
	@Override
	public String getCheckerVAQ2() {
		if (_checkerVAQ2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _checkerVAQ2;
		}
	}

	@Override
	public void setCheckerVAQ2(String checkerVAQ2) {
		_checkerVAQ2 = checkerVAQ2;
	}

	@JSON
	@Override
	public Date getMakerVAQ2modified() {
		return _makerVAQ2modified;
	}

	@Override
	public void setMakerVAQ2modified(Date makerVAQ2modified) {
		_makerVAQ2modified = makerVAQ2modified;
	}

	@JSON
	@Override
	public Date getCheckerVAQ2modified() {
		return _checkerVAQ2modified;
	}

	@Override
	public void setCheckerVAQ2modified(Date checkerVAQ2modified) {
		_checkerVAQ2modified = checkerVAQ2modified;
	}

	@JSON
	@Override
	public int getMarkupissueVAQ3() {
		return _markupissueVAQ3;
	}

	@Override
	public void setMarkupissueVAQ3(int markupissueVAQ3) {
		_markupissueVAQ3 = markupissueVAQ3;
	}

	@JSON
	@Override
	public String getMakerVAQ3() {
		if (_makerVAQ3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _makerVAQ3;
		}
	}

	@Override
	public void setMakerVAQ3(String makerVAQ3) {
		_makerVAQ3 = makerVAQ3;
	}

	@JSON
	@Override
	public String getCheckerVAQ3() {
		if (_checkerVAQ3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _checkerVAQ3;
		}
	}

	@Override
	public void setCheckerVAQ3(String checkerVAQ3) {
		_checkerVAQ3 = checkerVAQ3;
	}

	@JSON
	@Override
	public String getApproverVAQ3() {
		if (_approverVAQ3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _approverVAQ3;
		}
	}

	@Override
	public void setApproverVAQ3(String approverVAQ3) {
		_approverVAQ3 = approverVAQ3;
	}

	@JSON
	@Override
	public Date getMakerVAQ3modified() {
		return _makerVAQ3modified;
	}

	@Override
	public void setMakerVAQ3modified(Date makerVAQ3modified) {
		_makerVAQ3modified = makerVAQ3modified;
	}

	@JSON
	@Override
	public Date getCheckerVAQ3modified() {
		return _checkerVAQ3modified;
	}

	@Override
	public void setCheckerVAQ3modified(Date checkerVAQ3modified) {
		_checkerVAQ3modified = checkerVAQ3modified;
	}

	@JSON
	@Override
	public Date getApproverVAQ3modified() {
		return _approverVAQ3modified;
	}

	@Override
	public void setApproverVAQ3modified(Date approverVAQ3modified) {
		_approverVAQ3modified = approverVAQ3modified;
	}

	@JSON
	@Override
	public int getDefectStatus() {
		return _defectStatus;
	}

	@Override
	public void setDefectStatus(int defectStatus) {
		_columnBitmask |= DEFECTSTATUS_COLUMN_BITMASK;

		if (!_setOriginalDefectStatus) {
			_setOriginalDefectStatus = true;

			_originalDefectStatus = _defectStatus;
		}

		_defectStatus = defectStatus;
	}

	public int getOriginalDefectStatus() {
		return _originalDefectStatus;
	}

	@JSON
	@Override
	public Date getSynchdate() {
		return _synchdate;
	}

	@Override
	public void setSynchdate(Date synchdate) {
		_synchdate = synchdate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			IssueTracking.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public IssueTracking toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IssueTracking)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IssueTrackingImpl issueTrackingImpl = new IssueTrackingImpl();

		issueTrackingImpl.setId(getId());
		issueTrackingImpl.setImportercode(getImportercode());
		issueTrackingImpl.setImportername(getImportername());
		issueTrackingImpl.setRegisterednumber(getRegisterednumber());
		issueTrackingImpl.setInspectionrecordno(getInspectionrecordno());
		issueTrackingImpl.setInspectionRecordDate(getInspectionRecordDate());
		issueTrackingImpl.setCorporationId(getCorporationId());
		issueTrackingImpl.setInspectorId(getInspectorId());
		issueTrackingImpl.setVehicleClass(getVehicleClass());
		issueTrackingImpl.setProductcode(getProductcode());
		issueTrackingImpl.setProductname(getProductname());
		issueTrackingImpl.setTotalvehicle(getTotalvehicle());
		issueTrackingImpl.setCodeNumber(getCodeNumber());
		issueTrackingImpl.setChassisNumber(getChassisNumber());
		issueTrackingImpl.setEngineNumber(getEngineNumber());
		issueTrackingImpl.setImportedorassembled(getImportedorassembled());
		issueTrackingImpl.setIssuetrackingfromcustomer(getIssuetrackingfromcustomer());
		issueTrackingImpl.setIssuetrackingbycorporation(getIssuetrackingbycorporation());
		issueTrackingImpl.setIssuetrackingbyimportedgroup(getIssuetrackingbyimportedgroup());
		issueTrackingImpl.setIssuediscovery(getIssuediscovery());
		issueTrackingImpl.setIssuedescription(getIssuedescription());
		issueTrackingImpl.setIssueVAQ1reason(getIssueVAQ1reason());
		issueTrackingImpl.setIssueVAQ2troubleshooting(getIssueVAQ2troubleshooting());
		issueTrackingImpl.setIssueVAQ3longtermsolution(getIssueVAQ3longtermsolution());
		issueTrackingImpl.setIssueVAQ4precaution(getIssueVAQ4precaution());
		issueTrackingImpl.setCreator(getCreator());
		issueTrackingImpl.setCreateddate(getCreateddate());
		issueTrackingImpl.setMarkupissueVAQ4(getMarkupissueVAQ4());
		issueTrackingImpl.setMakerVAQ4(getMakerVAQ4());
		issueTrackingImpl.setCheckerVAQ4(getCheckerVAQ4());
		issueTrackingImpl.setApproverVAQ4(getApproverVAQ4());
		issueTrackingImpl.setMakerVAQ4modified(getMakerVAQ4modified());
		issueTrackingImpl.setCheckerVAQ4modified(getCheckerVAQ4modified());
		issueTrackingImpl.setApproverVAQ4modified(getApproverVAQ4modified());
		issueTrackingImpl.setMarkupissueVAQ1(getMarkupissueVAQ1());
		issueTrackingImpl.setMakerVAQ1(getMakerVAQ1());
		issueTrackingImpl.setCheckerVAQ1(getCheckerVAQ1());
		issueTrackingImpl.setMakerVAQ1modified(getMakerVAQ1modified());
		issueTrackingImpl.setCheckerVAQ1modified(getCheckerVAQ1modified());
		issueTrackingImpl.setMarkupissueVAQ2(getMarkupissueVAQ2());
		issueTrackingImpl.setMakerVAQ2(getMakerVAQ2());
		issueTrackingImpl.setCheckerVAQ2(getCheckerVAQ2());
		issueTrackingImpl.setMakerVAQ2modified(getMakerVAQ2modified());
		issueTrackingImpl.setCheckerVAQ2modified(getCheckerVAQ2modified());
		issueTrackingImpl.setMarkupissueVAQ3(getMarkupissueVAQ3());
		issueTrackingImpl.setMakerVAQ3(getMakerVAQ3());
		issueTrackingImpl.setCheckerVAQ3(getCheckerVAQ3());
		issueTrackingImpl.setApproverVAQ3(getApproverVAQ3());
		issueTrackingImpl.setMakerVAQ3modified(getMakerVAQ3modified());
		issueTrackingImpl.setCheckerVAQ3modified(getCheckerVAQ3modified());
		issueTrackingImpl.setApproverVAQ3modified(getApproverVAQ3modified());
		issueTrackingImpl.setDefectStatus(getDefectStatus());
		issueTrackingImpl.setSynchdate(getSynchdate());

		issueTrackingImpl.resetOriginalValues();

		return issueTrackingImpl;
	}

	@Override
	public int compareTo(IssueTracking issueTracking) {
		int value = 0;

		if (getId() < issueTracking.getId()) {
			value = -1;
		}
		else if (getId() > issueTracking.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IssueTracking)) {
			return false;
		}

		IssueTracking issueTracking = (IssueTracking)obj;

		long primaryKey = issueTracking.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		IssueTrackingModelImpl issueTrackingModelImpl = this;

		issueTrackingModelImpl._originalImportercode = issueTrackingModelImpl._importercode;

		issueTrackingModelImpl._originalImportername = issueTrackingModelImpl._importername;

		issueTrackingModelImpl._originalRegisterednumber = issueTrackingModelImpl._registerednumber;

		issueTrackingModelImpl._originalInspectionrecordno = issueTrackingModelImpl._inspectionrecordno;

		issueTrackingModelImpl._originalProductcode = issueTrackingModelImpl._productcode;

		issueTrackingModelImpl._originalDefectStatus = issueTrackingModelImpl._defectStatus;

		issueTrackingModelImpl._setOriginalDefectStatus = false;

		issueTrackingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IssueTracking> toCacheModel() {
		IssueTrackingCacheModel issueTrackingCacheModel = new IssueTrackingCacheModel();

		issueTrackingCacheModel.id = getId();

		issueTrackingCacheModel.importercode = getImportercode();

		String importercode = issueTrackingCacheModel.importercode;

		if ((importercode != null) && (importercode.length() == 0)) {
			issueTrackingCacheModel.importercode = null;
		}

		issueTrackingCacheModel.importername = getImportername();

		String importername = issueTrackingCacheModel.importername;

		if ((importername != null) && (importername.length() == 0)) {
			issueTrackingCacheModel.importername = null;
		}

		issueTrackingCacheModel.registerednumber = getRegisterednumber();

		String registerednumber = issueTrackingCacheModel.registerednumber;

		if ((registerednumber != null) && (registerednumber.length() == 0)) {
			issueTrackingCacheModel.registerednumber = null;
		}

		issueTrackingCacheModel.inspectionrecordno = getInspectionrecordno();

		String inspectionrecordno = issueTrackingCacheModel.inspectionrecordno;

		if ((inspectionrecordno != null) && (inspectionrecordno.length() == 0)) {
			issueTrackingCacheModel.inspectionrecordno = null;
		}

		Date inspectionRecordDate = getInspectionRecordDate();

		if (inspectionRecordDate != null) {
			issueTrackingCacheModel.inspectionRecordDate = inspectionRecordDate.getTime();
		}
		else {
			issueTrackingCacheModel.inspectionRecordDate = Long.MIN_VALUE;
		}

		issueTrackingCacheModel.corporationId = getCorporationId();

		String corporationId = issueTrackingCacheModel.corporationId;

		if ((corporationId != null) && (corporationId.length() == 0)) {
			issueTrackingCacheModel.corporationId = null;
		}

		issueTrackingCacheModel.inspectorId = getInspectorId();

		issueTrackingCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = issueTrackingCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			issueTrackingCacheModel.vehicleClass = null;
		}

		issueTrackingCacheModel.productcode = getProductcode();

		String productcode = issueTrackingCacheModel.productcode;

		if ((productcode != null) && (productcode.length() == 0)) {
			issueTrackingCacheModel.productcode = null;
		}

		issueTrackingCacheModel.productname = getProductname();

		String productname = issueTrackingCacheModel.productname;

		if ((productname != null) && (productname.length() == 0)) {
			issueTrackingCacheModel.productname = null;
		}

		issueTrackingCacheModel.totalvehicle = getTotalvehicle();

		issueTrackingCacheModel.codeNumber = getCodeNumber();

		issueTrackingCacheModel.chassisNumber = getChassisNumber();

		String chassisNumber = issueTrackingCacheModel.chassisNumber;

		if ((chassisNumber != null) && (chassisNumber.length() == 0)) {
			issueTrackingCacheModel.chassisNumber = null;
		}

		issueTrackingCacheModel.engineNumber = getEngineNumber();

		String engineNumber = issueTrackingCacheModel.engineNumber;

		if ((engineNumber != null) && (engineNumber.length() == 0)) {
			issueTrackingCacheModel.engineNumber = null;
		}

		issueTrackingCacheModel.importedorassembled = getImportedorassembled();

		String importedorassembled = issueTrackingCacheModel.importedorassembled;

		if ((importedorassembled != null) &&
				(importedorassembled.length() == 0)) {
			issueTrackingCacheModel.importedorassembled = null;
		}

		issueTrackingCacheModel.issuetrackingfromcustomer = getIssuetrackingfromcustomer();

		String issuetrackingfromcustomer = issueTrackingCacheModel.issuetrackingfromcustomer;

		if ((issuetrackingfromcustomer != null) &&
				(issuetrackingfromcustomer.length() == 0)) {
			issueTrackingCacheModel.issuetrackingfromcustomer = null;
		}

		issueTrackingCacheModel.issuetrackingbycorporation = getIssuetrackingbycorporation();

		String issuetrackingbycorporation = issueTrackingCacheModel.issuetrackingbycorporation;

		if ((issuetrackingbycorporation != null) &&
				(issuetrackingbycorporation.length() == 0)) {
			issueTrackingCacheModel.issuetrackingbycorporation = null;
		}

		issueTrackingCacheModel.issuetrackingbyimportedgroup = getIssuetrackingbyimportedgroup();

		String issuetrackingbyimportedgroup = issueTrackingCacheModel.issuetrackingbyimportedgroup;

		if ((issuetrackingbyimportedgroup != null) &&
				(issuetrackingbyimportedgroup.length() == 0)) {
			issueTrackingCacheModel.issuetrackingbyimportedgroup = null;
		}

		issueTrackingCacheModel.issuediscovery = getIssuediscovery();

		issueTrackingCacheModel.issuedescription = getIssuedescription();

		String issuedescription = issueTrackingCacheModel.issuedescription;

		if ((issuedescription != null) && (issuedescription.length() == 0)) {
			issueTrackingCacheModel.issuedescription = null;
		}

		issueTrackingCacheModel.issueVAQ1reason = getIssueVAQ1reason();

		String issueVAQ1reason = issueTrackingCacheModel.issueVAQ1reason;

		if ((issueVAQ1reason != null) && (issueVAQ1reason.length() == 0)) {
			issueTrackingCacheModel.issueVAQ1reason = null;
		}

		issueTrackingCacheModel.issueVAQ2troubleshooting = getIssueVAQ2troubleshooting();

		String issueVAQ2troubleshooting = issueTrackingCacheModel.issueVAQ2troubleshooting;

		if ((issueVAQ2troubleshooting != null) &&
				(issueVAQ2troubleshooting.length() == 0)) {
			issueTrackingCacheModel.issueVAQ2troubleshooting = null;
		}

		issueTrackingCacheModel.issueVAQ3longtermsolution = getIssueVAQ3longtermsolution();

		String issueVAQ3longtermsolution = issueTrackingCacheModel.issueVAQ3longtermsolution;

		if ((issueVAQ3longtermsolution != null) &&
				(issueVAQ3longtermsolution.length() == 0)) {
			issueTrackingCacheModel.issueVAQ3longtermsolution = null;
		}

		issueTrackingCacheModel.issueVAQ4precaution = getIssueVAQ4precaution();

		String issueVAQ4precaution = issueTrackingCacheModel.issueVAQ4precaution;

		if ((issueVAQ4precaution != null) &&
				(issueVAQ4precaution.length() == 0)) {
			issueTrackingCacheModel.issueVAQ4precaution = null;
		}

		issueTrackingCacheModel.creator = getCreator();

		String creator = issueTrackingCacheModel.creator;

		if ((creator != null) && (creator.length() == 0)) {
			issueTrackingCacheModel.creator = null;
		}

		Date createddate = getCreateddate();

		if (createddate != null) {
			issueTrackingCacheModel.createddate = createddate.getTime();
		}
		else {
			issueTrackingCacheModel.createddate = Long.MIN_VALUE;
		}

		issueTrackingCacheModel.markupissueVAQ4 = getMarkupissueVAQ4();

		issueTrackingCacheModel.makerVAQ4 = getMakerVAQ4();

		String makerVAQ4 = issueTrackingCacheModel.makerVAQ4;

		if ((makerVAQ4 != null) && (makerVAQ4.length() == 0)) {
			issueTrackingCacheModel.makerVAQ4 = null;
		}

		issueTrackingCacheModel.checkerVAQ4 = getCheckerVAQ4();

		String checkerVAQ4 = issueTrackingCacheModel.checkerVAQ4;

		if ((checkerVAQ4 != null) && (checkerVAQ4.length() == 0)) {
			issueTrackingCacheModel.checkerVAQ4 = null;
		}

		issueTrackingCacheModel.approverVAQ4 = getApproverVAQ4();

		String approverVAQ4 = issueTrackingCacheModel.approverVAQ4;

		if ((approverVAQ4 != null) && (approverVAQ4.length() == 0)) {
			issueTrackingCacheModel.approverVAQ4 = null;
		}

		Date makerVAQ4modified = getMakerVAQ4modified();

		if (makerVAQ4modified != null) {
			issueTrackingCacheModel.makerVAQ4modified = makerVAQ4modified.getTime();
		}
		else {
			issueTrackingCacheModel.makerVAQ4modified = Long.MIN_VALUE;
		}

		Date checkerVAQ4modified = getCheckerVAQ4modified();

		if (checkerVAQ4modified != null) {
			issueTrackingCacheModel.checkerVAQ4modified = checkerVAQ4modified.getTime();
		}
		else {
			issueTrackingCacheModel.checkerVAQ4modified = Long.MIN_VALUE;
		}

		Date approverVAQ4modified = getApproverVAQ4modified();

		if (approverVAQ4modified != null) {
			issueTrackingCacheModel.approverVAQ4modified = approverVAQ4modified.getTime();
		}
		else {
			issueTrackingCacheModel.approverVAQ4modified = Long.MIN_VALUE;
		}

		issueTrackingCacheModel.markupissueVAQ1 = getMarkupissueVAQ1();

		issueTrackingCacheModel.makerVAQ1 = getMakerVAQ1();

		String makerVAQ1 = issueTrackingCacheModel.makerVAQ1;

		if ((makerVAQ1 != null) && (makerVAQ1.length() == 0)) {
			issueTrackingCacheModel.makerVAQ1 = null;
		}

		issueTrackingCacheModel.checkerVAQ1 = getCheckerVAQ1();

		String checkerVAQ1 = issueTrackingCacheModel.checkerVAQ1;

		if ((checkerVAQ1 != null) && (checkerVAQ1.length() == 0)) {
			issueTrackingCacheModel.checkerVAQ1 = null;
		}

		Date makerVAQ1modified = getMakerVAQ1modified();

		if (makerVAQ1modified != null) {
			issueTrackingCacheModel.makerVAQ1modified = makerVAQ1modified.getTime();
		}
		else {
			issueTrackingCacheModel.makerVAQ1modified = Long.MIN_VALUE;
		}

		Date checkerVAQ1modified = getCheckerVAQ1modified();

		if (checkerVAQ1modified != null) {
			issueTrackingCacheModel.checkerVAQ1modified = checkerVAQ1modified.getTime();
		}
		else {
			issueTrackingCacheModel.checkerVAQ1modified = Long.MIN_VALUE;
		}

		issueTrackingCacheModel.markupissueVAQ2 = getMarkupissueVAQ2();

		issueTrackingCacheModel.makerVAQ2 = getMakerVAQ2();

		String makerVAQ2 = issueTrackingCacheModel.makerVAQ2;

		if ((makerVAQ2 != null) && (makerVAQ2.length() == 0)) {
			issueTrackingCacheModel.makerVAQ2 = null;
		}

		issueTrackingCacheModel.checkerVAQ2 = getCheckerVAQ2();

		String checkerVAQ2 = issueTrackingCacheModel.checkerVAQ2;

		if ((checkerVAQ2 != null) && (checkerVAQ2.length() == 0)) {
			issueTrackingCacheModel.checkerVAQ2 = null;
		}

		Date makerVAQ2modified = getMakerVAQ2modified();

		if (makerVAQ2modified != null) {
			issueTrackingCacheModel.makerVAQ2modified = makerVAQ2modified.getTime();
		}
		else {
			issueTrackingCacheModel.makerVAQ2modified = Long.MIN_VALUE;
		}

		Date checkerVAQ2modified = getCheckerVAQ2modified();

		if (checkerVAQ2modified != null) {
			issueTrackingCacheModel.checkerVAQ2modified = checkerVAQ2modified.getTime();
		}
		else {
			issueTrackingCacheModel.checkerVAQ2modified = Long.MIN_VALUE;
		}

		issueTrackingCacheModel.markupissueVAQ3 = getMarkupissueVAQ3();

		issueTrackingCacheModel.makerVAQ3 = getMakerVAQ3();

		String makerVAQ3 = issueTrackingCacheModel.makerVAQ3;

		if ((makerVAQ3 != null) && (makerVAQ3.length() == 0)) {
			issueTrackingCacheModel.makerVAQ3 = null;
		}

		issueTrackingCacheModel.checkerVAQ3 = getCheckerVAQ3();

		String checkerVAQ3 = issueTrackingCacheModel.checkerVAQ3;

		if ((checkerVAQ3 != null) && (checkerVAQ3.length() == 0)) {
			issueTrackingCacheModel.checkerVAQ3 = null;
		}

		issueTrackingCacheModel.approverVAQ3 = getApproverVAQ3();

		String approverVAQ3 = issueTrackingCacheModel.approverVAQ3;

		if ((approverVAQ3 != null) && (approverVAQ3.length() == 0)) {
			issueTrackingCacheModel.approverVAQ3 = null;
		}

		Date makerVAQ3modified = getMakerVAQ3modified();

		if (makerVAQ3modified != null) {
			issueTrackingCacheModel.makerVAQ3modified = makerVAQ3modified.getTime();
		}
		else {
			issueTrackingCacheModel.makerVAQ3modified = Long.MIN_VALUE;
		}

		Date checkerVAQ3modified = getCheckerVAQ3modified();

		if (checkerVAQ3modified != null) {
			issueTrackingCacheModel.checkerVAQ3modified = checkerVAQ3modified.getTime();
		}
		else {
			issueTrackingCacheModel.checkerVAQ3modified = Long.MIN_VALUE;
		}

		Date approverVAQ3modified = getApproverVAQ3modified();

		if (approverVAQ3modified != null) {
			issueTrackingCacheModel.approverVAQ3modified = approverVAQ3modified.getTime();
		}
		else {
			issueTrackingCacheModel.approverVAQ3modified = Long.MIN_VALUE;
		}

		issueTrackingCacheModel.defectStatus = getDefectStatus();

		Date synchdate = getSynchdate();

		if (synchdate != null) {
			issueTrackingCacheModel.synchdate = synchdate.getTime();
		}
		else {
			issueTrackingCacheModel.synchdate = Long.MIN_VALUE;
		}

		return issueTrackingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(107);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", importercode=");
		sb.append(getImportercode());
		sb.append(", importername=");
		sb.append(getImportername());
		sb.append(", registerednumber=");
		sb.append(getRegisterednumber());
		sb.append(", inspectionrecordno=");
		sb.append(getInspectionrecordno());
		sb.append(", inspectionRecordDate=");
		sb.append(getInspectionRecordDate());
		sb.append(", corporationId=");
		sb.append(getCorporationId());
		sb.append(", inspectorId=");
		sb.append(getInspectorId());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", productcode=");
		sb.append(getProductcode());
		sb.append(", productname=");
		sb.append(getProductname());
		sb.append(", totalvehicle=");
		sb.append(getTotalvehicle());
		sb.append(", codeNumber=");
		sb.append(getCodeNumber());
		sb.append(", chassisNumber=");
		sb.append(getChassisNumber());
		sb.append(", engineNumber=");
		sb.append(getEngineNumber());
		sb.append(", importedorassembled=");
		sb.append(getImportedorassembled());
		sb.append(", issuetrackingfromcustomer=");
		sb.append(getIssuetrackingfromcustomer());
		sb.append(", issuetrackingbycorporation=");
		sb.append(getIssuetrackingbycorporation());
		sb.append(", issuetrackingbyimportedgroup=");
		sb.append(getIssuetrackingbyimportedgroup());
		sb.append(", issuediscovery=");
		sb.append(getIssuediscovery());
		sb.append(", issuedescription=");
		sb.append(getIssuedescription());
		sb.append(", issueVAQ1reason=");
		sb.append(getIssueVAQ1reason());
		sb.append(", issueVAQ2troubleshooting=");
		sb.append(getIssueVAQ2troubleshooting());
		sb.append(", issueVAQ3longtermsolution=");
		sb.append(getIssueVAQ3longtermsolution());
		sb.append(", issueVAQ4precaution=");
		sb.append(getIssueVAQ4precaution());
		sb.append(", creator=");
		sb.append(getCreator());
		sb.append(", createddate=");
		sb.append(getCreateddate());
		sb.append(", markupissueVAQ4=");
		sb.append(getMarkupissueVAQ4());
		sb.append(", makerVAQ4=");
		sb.append(getMakerVAQ4());
		sb.append(", checkerVAQ4=");
		sb.append(getCheckerVAQ4());
		sb.append(", approverVAQ4=");
		sb.append(getApproverVAQ4());
		sb.append(", makerVAQ4modified=");
		sb.append(getMakerVAQ4modified());
		sb.append(", checkerVAQ4modified=");
		sb.append(getCheckerVAQ4modified());
		sb.append(", approverVAQ4modified=");
		sb.append(getApproverVAQ4modified());
		sb.append(", markupissueVAQ1=");
		sb.append(getMarkupissueVAQ1());
		sb.append(", makerVAQ1=");
		sb.append(getMakerVAQ1());
		sb.append(", checkerVAQ1=");
		sb.append(getCheckerVAQ1());
		sb.append(", makerVAQ1modified=");
		sb.append(getMakerVAQ1modified());
		sb.append(", checkerVAQ1modified=");
		sb.append(getCheckerVAQ1modified());
		sb.append(", markupissueVAQ2=");
		sb.append(getMarkupissueVAQ2());
		sb.append(", makerVAQ2=");
		sb.append(getMakerVAQ2());
		sb.append(", checkerVAQ2=");
		sb.append(getCheckerVAQ2());
		sb.append(", makerVAQ2modified=");
		sb.append(getMakerVAQ2modified());
		sb.append(", checkerVAQ2modified=");
		sb.append(getCheckerVAQ2modified());
		sb.append(", markupissueVAQ3=");
		sb.append(getMarkupissueVAQ3());
		sb.append(", makerVAQ3=");
		sb.append(getMakerVAQ3());
		sb.append(", checkerVAQ3=");
		sb.append(getCheckerVAQ3());
		sb.append(", approverVAQ3=");
		sb.append(getApproverVAQ3());
		sb.append(", makerVAQ3modified=");
		sb.append(getMakerVAQ3modified());
		sb.append(", checkerVAQ3modified=");
		sb.append(getCheckerVAQ3modified());
		sb.append(", approverVAQ3modified=");
		sb.append(getApproverVAQ3modified());
		sb.append(", defectStatus=");
		sb.append(getDefectStatus());
		sb.append(", synchdate=");
		sb.append(getSynchdate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(163);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.IssueTracking");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importercode</column-name><column-value><![CDATA[");
		sb.append(getImportercode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importername</column-name><column-value><![CDATA[");
		sb.append(getImportername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerednumber</column-name><column-value><![CDATA[");
		sb.append(getRegisterednumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionrecordno</column-name><column-value><![CDATA[");
		sb.append(getInspectionrecordno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporationId</column-name><column-value><![CDATA[");
		sb.append(getCorporationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorId</column-name><column-value><![CDATA[");
		sb.append(getInspectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productcode</column-name><column-value><![CDATA[");
		sb.append(getProductcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productname</column-name><column-value><![CDATA[");
		sb.append(getProductname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalvehicle</column-name><column-value><![CDATA[");
		sb.append(getTotalvehicle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeNumber</column-name><column-value><![CDATA[");
		sb.append(getCodeNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chassisNumber</column-name><column-value><![CDATA[");
		sb.append(getChassisNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineNumber</column-name><column-value><![CDATA[");
		sb.append(getEngineNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importedorassembled</column-name><column-value><![CDATA[");
		sb.append(getImportedorassembled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuetrackingfromcustomer</column-name><column-value><![CDATA[");
		sb.append(getIssuetrackingfromcustomer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuetrackingbycorporation</column-name><column-value><![CDATA[");
		sb.append(getIssuetrackingbycorporation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuetrackingbyimportedgroup</column-name><column-value><![CDATA[");
		sb.append(getIssuetrackingbyimportedgroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuediscovery</column-name><column-value><![CDATA[");
		sb.append(getIssuediscovery());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuedescription</column-name><column-value><![CDATA[");
		sb.append(getIssuedescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueVAQ1reason</column-name><column-value><![CDATA[");
		sb.append(getIssueVAQ1reason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueVAQ2troubleshooting</column-name><column-value><![CDATA[");
		sb.append(getIssueVAQ2troubleshooting());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueVAQ3longtermsolution</column-name><column-value><![CDATA[");
		sb.append(getIssueVAQ3longtermsolution());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueVAQ4precaution</column-name><column-value><![CDATA[");
		sb.append(getIssueVAQ4precaution());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creator</column-name><column-value><![CDATA[");
		sb.append(getCreator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createddate</column-name><column-value><![CDATA[");
		sb.append(getCreateddate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupissueVAQ4</column-name><column-value><![CDATA[");
		sb.append(getMarkupissueVAQ4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makerVAQ4</column-name><column-value><![CDATA[");
		sb.append(getMakerVAQ4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkerVAQ4</column-name><column-value><![CDATA[");
		sb.append(getCheckerVAQ4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approverVAQ4</column-name><column-value><![CDATA[");
		sb.append(getApproverVAQ4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makerVAQ4modified</column-name><column-value><![CDATA[");
		sb.append(getMakerVAQ4modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkerVAQ4modified</column-name><column-value><![CDATA[");
		sb.append(getCheckerVAQ4modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approverVAQ4modified</column-name><column-value><![CDATA[");
		sb.append(getApproverVAQ4modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupissueVAQ1</column-name><column-value><![CDATA[");
		sb.append(getMarkupissueVAQ1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makerVAQ1</column-name><column-value><![CDATA[");
		sb.append(getMakerVAQ1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkerVAQ1</column-name><column-value><![CDATA[");
		sb.append(getCheckerVAQ1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makerVAQ1modified</column-name><column-value><![CDATA[");
		sb.append(getMakerVAQ1modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkerVAQ1modified</column-name><column-value><![CDATA[");
		sb.append(getCheckerVAQ1modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupissueVAQ2</column-name><column-value><![CDATA[");
		sb.append(getMarkupissueVAQ2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makerVAQ2</column-name><column-value><![CDATA[");
		sb.append(getMakerVAQ2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkerVAQ2</column-name><column-value><![CDATA[");
		sb.append(getCheckerVAQ2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makerVAQ2modified</column-name><column-value><![CDATA[");
		sb.append(getMakerVAQ2modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkerVAQ2modified</column-name><column-value><![CDATA[");
		sb.append(getCheckerVAQ2modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markupissueVAQ3</column-name><column-value><![CDATA[");
		sb.append(getMarkupissueVAQ3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makerVAQ3</column-name><column-value><![CDATA[");
		sb.append(getMakerVAQ3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkerVAQ3</column-name><column-value><![CDATA[");
		sb.append(getCheckerVAQ3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approverVAQ3</column-name><column-value><![CDATA[");
		sb.append(getApproverVAQ3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>makerVAQ3modified</column-name><column-value><![CDATA[");
		sb.append(getMakerVAQ3modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checkerVAQ3modified</column-name><column-value><![CDATA[");
		sb.append(getCheckerVAQ3modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approverVAQ3modified</column-name><column-value><![CDATA[");
		sb.append(getApproverVAQ3modified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defectStatus</column-name><column-value><![CDATA[");
		sb.append(getDefectStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synchdate</column-name><column-value><![CDATA[");
		sb.append(getSynchdate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IssueTracking.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			IssueTracking.class
		};
	private long _id;
	private String _importercode;
	private String _originalImportercode;
	private String _importername;
	private String _originalImportername;
	private String _registerednumber;
	private String _originalRegisterednumber;
	private String _inspectionrecordno;
	private String _originalInspectionrecordno;
	private Date _inspectionRecordDate;
	private String _corporationId;
	private long _inspectorId;
	private String _vehicleClass;
	private String _productcode;
	private String _originalProductcode;
	private String _productname;
	private long _totalvehicle;
	private long _codeNumber;
	private String _chassisNumber;
	private String _engineNumber;
	private String _importedorassembled;
	private String _issuetrackingfromcustomer;
	private String _issuetrackingbycorporation;
	private String _issuetrackingbyimportedgroup;
	private long _issuediscovery;
	private String _issuedescription;
	private String _issueVAQ1reason;
	private String _issueVAQ2troubleshooting;
	private String _issueVAQ3longtermsolution;
	private String _issueVAQ4precaution;
	private String _creator;
	private Date _createddate;
	private int _markupissueVAQ4;
	private String _makerVAQ4;
	private String _checkerVAQ4;
	private String _approverVAQ4;
	private Date _makerVAQ4modified;
	private Date _checkerVAQ4modified;
	private Date _approverVAQ4modified;
	private int _markupissueVAQ1;
	private String _makerVAQ1;
	private String _checkerVAQ1;
	private Date _makerVAQ1modified;
	private Date _checkerVAQ1modified;
	private int _markupissueVAQ2;
	private String _makerVAQ2;
	private String _checkerVAQ2;
	private Date _makerVAQ2modified;
	private Date _checkerVAQ2modified;
	private int _markupissueVAQ3;
	private String _makerVAQ3;
	private String _checkerVAQ3;
	private String _approverVAQ3;
	private Date _makerVAQ3modified;
	private Date _checkerVAQ3modified;
	private Date _approverVAQ3modified;
	private int _defectStatus;
	private int _originalDefectStatus;
	private boolean _setOriginalDefectStatus;
	private Date _synchdate;
	private long _columnBitmask;
	private IssueTracking _escapedModel;
}