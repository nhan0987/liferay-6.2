/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.aswmsg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebservice;
import vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebserviceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AswmsgWebservice service. Represents a row in the &quot;aswmsg_webservice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebserviceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AswmsgWebserviceImpl}.
 * </p>
 *
 * @author win_64
 * @see AswmsgWebserviceImpl
 * @see vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebservice
 * @see vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebserviceModel
 * @generated
 */
public class AswmsgWebserviceModelImpl extends BaseModelImpl<AswmsgWebservice>
	implements AswmsgWebserviceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a aswmsg webservice model instance should use the {@link vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebservice} interface instead.
	 */
	public static final String TABLE_NAME = "aswmsg_webservice";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "servicecode", Types.VARCHAR },
			{ "servicename", Types.VARCHAR },
			{ "serviceurl", Types.VARCHAR },
			{ "username", Types.VARCHAR },
			{ "password", Types.VARCHAR },
			{ "domain", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table aswmsg_webservice (id LONG not null primary key,servicecode VARCHAR(75) null,servicename VARCHAR(75) null,serviceurl VARCHAR(75) null,username VARCHAR(75) null,password VARCHAR(75) null,domain VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table aswmsg_webservice";
	public static final String ORDER_BY_JPQL = " ORDER BY aswmsgWebservice.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY aswmsg_webservice.id ASC";
	public static final String DATA_SOURCE = "tthcDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebservice"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebservice"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebservice"));

	public AswmsgWebserviceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AswmsgWebservice.class;
	}

	@Override
	public String getModelClassName() {
		return AswmsgWebservice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("ServiceCode", getServiceCode());
		attributes.put("ServiceName", getServiceName());
		attributes.put("ServiceURL", getServiceURL());
		attributes.put("UserName", getUserName());
		attributes.put("Password", getPassword());
		attributes.put("Domain", getDomain());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		String ServiceCode = (String)attributes.get("ServiceCode");

		if (ServiceCode != null) {
			setServiceCode(ServiceCode);
		}

		String ServiceName = (String)attributes.get("ServiceName");

		if (ServiceName != null) {
			setServiceName(ServiceName);
		}

		String ServiceURL = (String)attributes.get("ServiceURL");

		if (ServiceURL != null) {
			setServiceURL(ServiceURL);
		}

		String UserName = (String)attributes.get("UserName");

		if (UserName != null) {
			setUserName(UserName);
		}

		String Password = (String)attributes.get("Password");

		if (Password != null) {
			setPassword(Password);
		}

		String Domain = (String)attributes.get("Domain");

		if (Domain != null) {
			setDomain(Domain);
		}
	}

	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@Override
	public String getServiceCode() {
		if (_ServiceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _ServiceCode;
		}
	}

	@Override
	public void setServiceCode(String ServiceCode) {
		_ServiceCode = ServiceCode;
	}

	@Override
	public String getServiceName() {
		if (_ServiceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _ServiceName;
		}
	}

	@Override
	public void setServiceName(String ServiceName) {
		_ServiceName = ServiceName;
	}

	@Override
	public String getServiceURL() {
		if (_ServiceURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _ServiceURL;
		}
	}

	@Override
	public void setServiceURL(String ServiceURL) {
		_ServiceURL = ServiceURL;
	}

	@Override
	public String getUserName() {
		if (_UserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _UserName;
		}
	}

	@Override
	public void setUserName(String UserName) {
		_UserName = UserName;
	}

	@Override
	public String getPassword() {
		if (_Password == null) {
			return StringPool.BLANK;
		}
		else {
			return _Password;
		}
	}

	@Override
	public void setPassword(String Password) {
		_Password = Password;
	}

	@Override
	public String getDomain() {
		if (_Domain == null) {
			return StringPool.BLANK;
		}
		else {
			return _Domain;
		}
	}

	@Override
	public void setDomain(String Domain) {
		_Domain = Domain;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AswmsgWebservice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AswmsgWebservice toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AswmsgWebservice)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AswmsgWebserviceImpl aswmsgWebserviceImpl = new AswmsgWebserviceImpl();

		aswmsgWebserviceImpl.setId(getId());
		aswmsgWebserviceImpl.setServiceCode(getServiceCode());
		aswmsgWebserviceImpl.setServiceName(getServiceName());
		aswmsgWebserviceImpl.setServiceURL(getServiceURL());
		aswmsgWebserviceImpl.setUserName(getUserName());
		aswmsgWebserviceImpl.setPassword(getPassword());
		aswmsgWebserviceImpl.setDomain(getDomain());

		aswmsgWebserviceImpl.resetOriginalValues();

		return aswmsgWebserviceImpl;
	}

	@Override
	public int compareTo(AswmsgWebservice aswmsgWebservice) {
		int value = 0;

		if (getId() < aswmsgWebservice.getId()) {
			value = -1;
		}
		else if (getId() > aswmsgWebservice.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AswmsgWebservice)) {
			return false;
		}

		AswmsgWebservice aswmsgWebservice = (AswmsgWebservice)obj;

		long primaryKey = aswmsgWebservice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AswmsgWebservice> toCacheModel() {
		AswmsgWebserviceCacheModel aswmsgWebserviceCacheModel = new AswmsgWebserviceCacheModel();

		aswmsgWebserviceCacheModel.Id = getId();

		aswmsgWebserviceCacheModel.ServiceCode = getServiceCode();

		String ServiceCode = aswmsgWebserviceCacheModel.ServiceCode;

		if ((ServiceCode != null) && (ServiceCode.length() == 0)) {
			aswmsgWebserviceCacheModel.ServiceCode = null;
		}

		aswmsgWebserviceCacheModel.ServiceName = getServiceName();

		String ServiceName = aswmsgWebserviceCacheModel.ServiceName;

		if ((ServiceName != null) && (ServiceName.length() == 0)) {
			aswmsgWebserviceCacheModel.ServiceName = null;
		}

		aswmsgWebserviceCacheModel.ServiceURL = getServiceURL();

		String ServiceURL = aswmsgWebserviceCacheModel.ServiceURL;

		if ((ServiceURL != null) && (ServiceURL.length() == 0)) {
			aswmsgWebserviceCacheModel.ServiceURL = null;
		}

		aswmsgWebserviceCacheModel.UserName = getUserName();

		String UserName = aswmsgWebserviceCacheModel.UserName;

		if ((UserName != null) && (UserName.length() == 0)) {
			aswmsgWebserviceCacheModel.UserName = null;
		}

		aswmsgWebserviceCacheModel.Password = getPassword();

		String Password = aswmsgWebserviceCacheModel.Password;

		if ((Password != null) && (Password.length() == 0)) {
			aswmsgWebserviceCacheModel.Password = null;
		}

		aswmsgWebserviceCacheModel.Domain = getDomain();

		String Domain = aswmsgWebserviceCacheModel.Domain;

		if ((Domain != null) && (Domain.length() == 0)) {
			aswmsgWebserviceCacheModel.Domain = null;
		}

		return aswmsgWebserviceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", ServiceCode=");
		sb.append(getServiceCode());
		sb.append(", ServiceName=");
		sb.append(getServiceName());
		sb.append(", ServiceURL=");
		sb.append(getServiceURL());
		sb.append(", UserName=");
		sb.append(getUserName());
		sb.append(", Password=");
		sb.append(getPassword());
		sb.append(", Domain=");
		sb.append(getDomain());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.aswmsg.model.AswmsgWebservice");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ServiceCode</column-name><column-value><![CDATA[");
		sb.append(getServiceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ServiceName</column-name><column-value><![CDATA[");
		sb.append(getServiceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ServiceURL</column-name><column-value><![CDATA[");
		sb.append(getServiceURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UserName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Domain</column-name><column-value><![CDATA[");
		sb.append(getDomain());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AswmsgWebservice.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AswmsgWebservice.class
		};
	private long _Id;
	private String _ServiceCode;
	private String _ServiceName;
	private String _ServiceURL;
	private String _UserName;
	private String _Password;
	private String _Domain;
	private AswmsgWebservice _escapedModel;
}