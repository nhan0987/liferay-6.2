/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspection;
import vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspectionModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspectionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RegisteredInspection service. Represents a row in the &quot;vr_registeredinspection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegisteredInspectionImpl}.
 * </p>
 *
 * @author win_64
 * @see RegisteredInspectionImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspection
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspectionModel
 * @generated
 */
@JSON(strict = true)
public class RegisteredInspectionModelImpl extends BaseModelImpl<RegisteredInspection>
	implements RegisteredInspectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a registered inspection model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspection} interface instead.
	 */
	public static final String TABLE_NAME = "vr_registeredinspection";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "registerednumber", Types.VARCHAR },
			{ "dossierid", Types.BIGINT },
			{ "attachedfile", Types.BIGINT },
			{ "importercode", Types.VARCHAR },
			{ "importername", Types.VARCHAR },
			{ "importeraddress", Types.VARCHAR },
			{ "representative", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "fax", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "inspectiondate", Types.TIMESTAMP },
			{ "inspectionsite", Types.VARCHAR },
			{ "inspectiondistrictcode", Types.VARCHAR },
			{ "inspectionprovincecode", Types.VARCHAR },
			{ "contactname", Types.VARCHAR },
			{ "contactphone", Types.VARCHAR },
			{ "contactemail", Types.VARCHAR },
			{ "importersignname", Types.VARCHAR },
			{ "importersigntitle", Types.VARCHAR },
			{ "importersignplace", Types.VARCHAR },
			{ "importersigndate", Types.TIMESTAMP },
			{ "inspectororganization", Types.VARCHAR },
			{ "inspectordivision", Types.VARCHAR },
			{ "inspectorsignname", Types.VARCHAR },
			{ "inspectorsigntitle", Types.VARCHAR },
			{ "inspectorsignplace", Types.VARCHAR },
			{ "inspectorsigndate", Types.TIMESTAMP },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_registeredinspection (id LONG not null primary key,registerednumber VARCHAR(75) null,dossierid LONG,attachedfile LONG,importercode VARCHAR(75) null,importername VARCHAR(75) null,importeraddress VARCHAR(75) null,representative VARCHAR(75) null,phone VARCHAR(75) null,fax VARCHAR(75) null,email VARCHAR(75) null,inspectiondate DATE null,inspectionsite VARCHAR(75) null,inspectiondistrictcode VARCHAR(75) null,inspectionprovincecode VARCHAR(75) null,contactname VARCHAR(75) null,contactphone VARCHAR(75) null,contactemail VARCHAR(75) null,importersignname VARCHAR(75) null,importersigntitle VARCHAR(75) null,importersignplace VARCHAR(75) null,importersigndate DATE null,inspectororganization VARCHAR(75) null,inspectordivision VARCHAR(75) null,inspectorsignname VARCHAR(75) null,inspectorsigntitle VARCHAR(75) null,inspectorsignplace VARCHAR(75) null,inspectorsigndate DATE null,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_registeredinspection";
	public static final String ORDER_BY_JPQL = " ORDER BY registeredInspection.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_registeredinspection.id ASC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspection"),
			true);
	public static long DOSSIERID_COLUMN_BITMASK = 1L;
	public static long REGISTEREDNUMBER_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RegisteredInspection toModel(
		RegisteredInspectionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RegisteredInspection model = new RegisteredInspectionImpl();

		model.setId(soapModel.getId());
		model.setRegisteredNumber(soapModel.getRegisteredNumber());
		model.setDossierId(soapModel.getDossierId());
		model.setAttachedFile(soapModel.getAttachedFile());
		model.setImporterCode(soapModel.getImporterCode());
		model.setImporterName(soapModel.getImporterName());
		model.setImporterAddress(soapModel.getImporterAddress());
		model.setRepresentative(soapModel.getRepresentative());
		model.setPhone(soapModel.getPhone());
		model.setFax(soapModel.getFax());
		model.setEmail(soapModel.getEmail());
		model.setInspectionDate(soapModel.getInspectionDate());
		model.setInspectionSite(soapModel.getInspectionSite());
		model.setInspectionDistrictCode(soapModel.getInspectionDistrictCode());
		model.setInspectionProvinceCode(soapModel.getInspectionProvinceCode());
		model.setContactName(soapModel.getContactName());
		model.setContactPhone(soapModel.getContactPhone());
		model.setContactEmail(soapModel.getContactEmail());
		model.setImporterSignName(soapModel.getImporterSignName());
		model.setImporterSignTitle(soapModel.getImporterSignTitle());
		model.setImporterSignPlace(soapModel.getImporterSignPlace());
		model.setImporterSignDate(soapModel.getImporterSignDate());
		model.setInspectorOrganization(soapModel.getInspectorOrganization());
		model.setInspectorDivision(soapModel.getInspectorDivision());
		model.setInspectorSigNname(soapModel.getInspectorSigNname());
		model.setInspectorSignTitle(soapModel.getInspectorSignTitle());
		model.setInspectorSignPlace(soapModel.getInspectorSignPlace());
		model.setInspectorSignDate(soapModel.getInspectorSignDate());
		model.setSynchDate(soapModel.getSynchDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RegisteredInspection> toModels(
		RegisteredInspectionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RegisteredInspection> models = new ArrayList<RegisteredInspection>(soapModels.length);

		for (RegisteredInspectionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspection"));

	public RegisteredInspectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegisteredInspection.class;
	}

	@Override
	public String getModelClassName() {
		return RegisteredInspection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("registeredNumber", getRegisteredNumber());
		attributes.put("dossierId", getDossierId());
		attributes.put("attachedFile", getAttachedFile());
		attributes.put("importerCode", getImporterCode());
		attributes.put("importerName", getImporterName());
		attributes.put("importerAddress", getImporterAddress());
		attributes.put("representative", getRepresentative());
		attributes.put("phone", getPhone());
		attributes.put("fax", getFax());
		attributes.put("email", getEmail());
		attributes.put("inspectionDate", getInspectionDate());
		attributes.put("inspectionSite", getInspectionSite());
		attributes.put("inspectionDistrictCode", getInspectionDistrictCode());
		attributes.put("inspectionProvinceCode", getInspectionProvinceCode());
		attributes.put("contactName", getContactName());
		attributes.put("contactPhone", getContactPhone());
		attributes.put("contactEmail", getContactEmail());
		attributes.put("importerSignName", getImporterSignName());
		attributes.put("importerSignTitle", getImporterSignTitle());
		attributes.put("importerSignPlace", getImporterSignPlace());
		attributes.put("importerSignDate", getImporterSignDate());
		attributes.put("inspectorOrganization", getInspectorOrganization());
		attributes.put("inspectorDivision", getInspectorDivision());
		attributes.put("inspectorSigNname", getInspectorSigNname());
		attributes.put("inspectorSignTitle", getInspectorSignTitle());
		attributes.put("inspectorSignPlace", getInspectorSignPlace());
		attributes.put("inspectorSignDate", getInspectorSignDate());
		attributes.put("SynchDate", getSynchDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String registeredNumber = (String)attributes.get("registeredNumber");

		if (registeredNumber != null) {
			setRegisteredNumber(registeredNumber);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}

		String importerCode = (String)attributes.get("importerCode");

		if (importerCode != null) {
			setImporterCode(importerCode);
		}

		String importerName = (String)attributes.get("importerName");

		if (importerName != null) {
			setImporterName(importerName);
		}

		String importerAddress = (String)attributes.get("importerAddress");

		if (importerAddress != null) {
			setImporterAddress(importerAddress);
		}

		String representative = (String)attributes.get("representative");

		if (representative != null) {
			setRepresentative(representative);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String fax = (String)attributes.get("fax");

		if (fax != null) {
			setFax(fax);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Date inspectionDate = (Date)attributes.get("inspectionDate");

		if (inspectionDate != null) {
			setInspectionDate(inspectionDate);
		}

		String inspectionSite = (String)attributes.get("inspectionSite");

		if (inspectionSite != null) {
			setInspectionSite(inspectionSite);
		}

		String inspectionDistrictCode = (String)attributes.get(
				"inspectionDistrictCode");

		if (inspectionDistrictCode != null) {
			setInspectionDistrictCode(inspectionDistrictCode);
		}

		String inspectionProvinceCode = (String)attributes.get(
				"inspectionProvinceCode");

		if (inspectionProvinceCode != null) {
			setInspectionProvinceCode(inspectionProvinceCode);
		}

		String contactName = (String)attributes.get("contactName");

		if (contactName != null) {
			setContactName(contactName);
		}

		String contactPhone = (String)attributes.get("contactPhone");

		if (contactPhone != null) {
			setContactPhone(contactPhone);
		}

		String contactEmail = (String)attributes.get("contactEmail");

		if (contactEmail != null) {
			setContactEmail(contactEmail);
		}

		String importerSignName = (String)attributes.get("importerSignName");

		if (importerSignName != null) {
			setImporterSignName(importerSignName);
		}

		String importerSignTitle = (String)attributes.get("importerSignTitle");

		if (importerSignTitle != null) {
			setImporterSignTitle(importerSignTitle);
		}

		String importerSignPlace = (String)attributes.get("importerSignPlace");

		if (importerSignPlace != null) {
			setImporterSignPlace(importerSignPlace);
		}

		Date importerSignDate = (Date)attributes.get("importerSignDate");

		if (importerSignDate != null) {
			setImporterSignDate(importerSignDate);
		}

		String inspectorOrganization = (String)attributes.get(
				"inspectorOrganization");

		if (inspectorOrganization != null) {
			setInspectorOrganization(inspectorOrganization);
		}

		String inspectorDivision = (String)attributes.get("inspectorDivision");

		if (inspectorDivision != null) {
			setInspectorDivision(inspectorDivision);
		}

		String inspectorSigNname = (String)attributes.get("inspectorSigNname");

		if (inspectorSigNname != null) {
			setInspectorSigNname(inspectorSigNname);
		}

		String inspectorSignTitle = (String)attributes.get("inspectorSignTitle");

		if (inspectorSignTitle != null) {
			setInspectorSignTitle(inspectorSignTitle);
		}

		String inspectorSignPlace = (String)attributes.get("inspectorSignPlace");

		if (inspectorSignPlace != null) {
			setInspectorSignPlace(inspectorSignPlace);
		}

		Date inspectorSignDate = (Date)attributes.get("inspectorSignDate");

		if (inspectorSignDate != null) {
			setInspectorSignDate(inspectorSignDate);
		}

		Date SynchDate = (Date)attributes.get("SynchDate");

		if (SynchDate != null) {
			setSynchDate(SynchDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRegisteredNumber() {
		if (_registeredNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registeredNumber;
		}
	}

	@Override
	public void setRegisteredNumber(String registeredNumber) {
		_columnBitmask |= REGISTEREDNUMBER_COLUMN_BITMASK;

		if (_originalRegisteredNumber == null) {
			_originalRegisteredNumber = _registeredNumber;
		}

		_registeredNumber = registeredNumber;
	}

	public String getOriginalRegisteredNumber() {
		return GetterUtil.getString(_originalRegisteredNumber);
	}

	@JSON
	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@JSON
	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	@JSON
	@Override
	public String getImporterCode() {
		if (_importerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerCode;
		}
	}

	@Override
	public void setImporterCode(String importerCode) {
		_importerCode = importerCode;
	}

	@JSON
	@Override
	public String getImporterName() {
		if (_importerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerName;
		}
	}

	@Override
	public void setImporterName(String importerName) {
		_importerName = importerName;
	}

	@JSON
	@Override
	public String getImporterAddress() {
		if (_importerAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerAddress;
		}
	}

	@Override
	public void setImporterAddress(String importerAddress) {
		_importerAddress = importerAddress;
	}

	@JSON
	@Override
	public String getRepresentative() {
		if (_representative == null) {
			return StringPool.BLANK;
		}
		else {
			return _representative;
		}
	}

	@Override
	public void setRepresentative(String representative) {
		_representative = representative;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getFax() {
		if (_fax == null) {
			return StringPool.BLANK;
		}
		else {
			return _fax;
		}
	}

	@Override
	public void setFax(String fax) {
		_fax = fax;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public Date getInspectionDate() {
		return _inspectionDate;
	}

	@Override
	public void setInspectionDate(Date inspectionDate) {
		_inspectionDate = inspectionDate;
	}

	@JSON
	@Override
	public String getInspectionSite() {
		if (_inspectionSite == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionSite;
		}
	}

	@Override
	public void setInspectionSite(String inspectionSite) {
		_inspectionSite = inspectionSite;
	}

	@JSON
	@Override
	public String getInspectionDistrictCode() {
		if (_inspectionDistrictCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionDistrictCode;
		}
	}

	@Override
	public void setInspectionDistrictCode(String inspectionDistrictCode) {
		_inspectionDistrictCode = inspectionDistrictCode;
	}

	@JSON
	@Override
	public String getInspectionProvinceCode() {
		if (_inspectionProvinceCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectionProvinceCode;
		}
	}

	@Override
	public void setInspectionProvinceCode(String inspectionProvinceCode) {
		_inspectionProvinceCode = inspectionProvinceCode;
	}

	@JSON
	@Override
	public String getContactName() {
		if (_contactName == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactName;
		}
	}

	@Override
	public void setContactName(String contactName) {
		_contactName = contactName;
	}

	@JSON
	@Override
	public String getContactPhone() {
		if (_contactPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactPhone;
		}
	}

	@Override
	public void setContactPhone(String contactPhone) {
		_contactPhone = contactPhone;
	}

	@JSON
	@Override
	public String getContactEmail() {
		if (_contactEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactEmail;
		}
	}

	@Override
	public void setContactEmail(String contactEmail) {
		_contactEmail = contactEmail;
	}

	@JSON
	@Override
	public String getImporterSignName() {
		if (_importerSignName == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerSignName;
		}
	}

	@Override
	public void setImporterSignName(String importerSignName) {
		_importerSignName = importerSignName;
	}

	@JSON
	@Override
	public String getImporterSignTitle() {
		if (_importerSignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerSignTitle;
		}
	}

	@Override
	public void setImporterSignTitle(String importerSignTitle) {
		_importerSignTitle = importerSignTitle;
	}

	@JSON
	@Override
	public String getImporterSignPlace() {
		if (_importerSignPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _importerSignPlace;
		}
	}

	@Override
	public void setImporterSignPlace(String importerSignPlace) {
		_importerSignPlace = importerSignPlace;
	}

	@JSON
	@Override
	public Date getImporterSignDate() {
		return _importerSignDate;
	}

	@Override
	public void setImporterSignDate(Date importerSignDate) {
		_importerSignDate = importerSignDate;
	}

	@JSON
	@Override
	public String getInspectorOrganization() {
		if (_inspectorOrganization == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorOrganization;
		}
	}

	@Override
	public void setInspectorOrganization(String inspectorOrganization) {
		_inspectorOrganization = inspectorOrganization;
	}

	@JSON
	@Override
	public String getInspectorDivision() {
		if (_inspectorDivision == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorDivision;
		}
	}

	@Override
	public void setInspectorDivision(String inspectorDivision) {
		_inspectorDivision = inspectorDivision;
	}

	@JSON
	@Override
	public String getInspectorSigNname() {
		if (_inspectorSigNname == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSigNname;
		}
	}

	@Override
	public void setInspectorSigNname(String inspectorSigNname) {
		_inspectorSigNname = inspectorSigNname;
	}

	@JSON
	@Override
	public String getInspectorSignTitle() {
		if (_inspectorSignTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSignTitle;
		}
	}

	@Override
	public void setInspectorSignTitle(String inspectorSignTitle) {
		_inspectorSignTitle = inspectorSignTitle;
	}

	@JSON
	@Override
	public String getInspectorSignPlace() {
		if (_inspectorSignPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _inspectorSignPlace;
		}
	}

	@Override
	public void setInspectorSignPlace(String inspectorSignPlace) {
		_inspectorSignPlace = inspectorSignPlace;
	}

	@JSON
	@Override
	public Date getInspectorSignDate() {
		return _inspectorSignDate;
	}

	@Override
	public void setInspectorSignDate(Date inspectorSignDate) {
		_inspectorSignDate = inspectorSignDate;
	}

	@JSON
	@Override
	public Date getSynchDate() {
		return _SynchDate;
	}

	@Override
	public void setSynchDate(Date SynchDate) {
		_SynchDate = SynchDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RegisteredInspection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegisteredInspection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RegisteredInspection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegisteredInspectionImpl registeredInspectionImpl = new RegisteredInspectionImpl();

		registeredInspectionImpl.setId(getId());
		registeredInspectionImpl.setRegisteredNumber(getRegisteredNumber());
		registeredInspectionImpl.setDossierId(getDossierId());
		registeredInspectionImpl.setAttachedFile(getAttachedFile());
		registeredInspectionImpl.setImporterCode(getImporterCode());
		registeredInspectionImpl.setImporterName(getImporterName());
		registeredInspectionImpl.setImporterAddress(getImporterAddress());
		registeredInspectionImpl.setRepresentative(getRepresentative());
		registeredInspectionImpl.setPhone(getPhone());
		registeredInspectionImpl.setFax(getFax());
		registeredInspectionImpl.setEmail(getEmail());
		registeredInspectionImpl.setInspectionDate(getInspectionDate());
		registeredInspectionImpl.setInspectionSite(getInspectionSite());
		registeredInspectionImpl.setInspectionDistrictCode(getInspectionDistrictCode());
		registeredInspectionImpl.setInspectionProvinceCode(getInspectionProvinceCode());
		registeredInspectionImpl.setContactName(getContactName());
		registeredInspectionImpl.setContactPhone(getContactPhone());
		registeredInspectionImpl.setContactEmail(getContactEmail());
		registeredInspectionImpl.setImporterSignName(getImporterSignName());
		registeredInspectionImpl.setImporterSignTitle(getImporterSignTitle());
		registeredInspectionImpl.setImporterSignPlace(getImporterSignPlace());
		registeredInspectionImpl.setImporterSignDate(getImporterSignDate());
		registeredInspectionImpl.setInspectorOrganization(getInspectorOrganization());
		registeredInspectionImpl.setInspectorDivision(getInspectorDivision());
		registeredInspectionImpl.setInspectorSigNname(getInspectorSigNname());
		registeredInspectionImpl.setInspectorSignTitle(getInspectorSignTitle());
		registeredInspectionImpl.setInspectorSignPlace(getInspectorSignPlace());
		registeredInspectionImpl.setInspectorSignDate(getInspectorSignDate());
		registeredInspectionImpl.setSynchDate(getSynchDate());

		registeredInspectionImpl.resetOriginalValues();

		return registeredInspectionImpl;
	}

	@Override
	public int compareTo(RegisteredInspection registeredInspection) {
		int value = 0;

		if (getId() < registeredInspection.getId()) {
			value = -1;
		}
		else if (getId() > registeredInspection.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RegisteredInspection)) {
			return false;
		}

		RegisteredInspection registeredInspection = (RegisteredInspection)obj;

		long primaryKey = registeredInspection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RegisteredInspectionModelImpl registeredInspectionModelImpl = this;

		registeredInspectionModelImpl._originalRegisteredNumber = registeredInspectionModelImpl._registeredNumber;

		registeredInspectionModelImpl._originalDossierId = registeredInspectionModelImpl._dossierId;

		registeredInspectionModelImpl._setOriginalDossierId = false;

		registeredInspectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RegisteredInspection> toCacheModel() {
		RegisteredInspectionCacheModel registeredInspectionCacheModel = new RegisteredInspectionCacheModel();

		registeredInspectionCacheModel.id = getId();

		registeredInspectionCacheModel.registeredNumber = getRegisteredNumber();

		String registeredNumber = registeredInspectionCacheModel.registeredNumber;

		if ((registeredNumber != null) && (registeredNumber.length() == 0)) {
			registeredInspectionCacheModel.registeredNumber = null;
		}

		registeredInspectionCacheModel.dossierId = getDossierId();

		registeredInspectionCacheModel.attachedFile = getAttachedFile();

		registeredInspectionCacheModel.importerCode = getImporterCode();

		String importerCode = registeredInspectionCacheModel.importerCode;

		if ((importerCode != null) && (importerCode.length() == 0)) {
			registeredInspectionCacheModel.importerCode = null;
		}

		registeredInspectionCacheModel.importerName = getImporterName();

		String importerName = registeredInspectionCacheModel.importerName;

		if ((importerName != null) && (importerName.length() == 0)) {
			registeredInspectionCacheModel.importerName = null;
		}

		registeredInspectionCacheModel.importerAddress = getImporterAddress();

		String importerAddress = registeredInspectionCacheModel.importerAddress;

		if ((importerAddress != null) && (importerAddress.length() == 0)) {
			registeredInspectionCacheModel.importerAddress = null;
		}

		registeredInspectionCacheModel.representative = getRepresentative();

		String representative = registeredInspectionCacheModel.representative;

		if ((representative != null) && (representative.length() == 0)) {
			registeredInspectionCacheModel.representative = null;
		}

		registeredInspectionCacheModel.phone = getPhone();

		String phone = registeredInspectionCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			registeredInspectionCacheModel.phone = null;
		}

		registeredInspectionCacheModel.fax = getFax();

		String fax = registeredInspectionCacheModel.fax;

		if ((fax != null) && (fax.length() == 0)) {
			registeredInspectionCacheModel.fax = null;
		}

		registeredInspectionCacheModel.email = getEmail();

		String email = registeredInspectionCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			registeredInspectionCacheModel.email = null;
		}

		Date inspectionDate = getInspectionDate();

		if (inspectionDate != null) {
			registeredInspectionCacheModel.inspectionDate = inspectionDate.getTime();
		}
		else {
			registeredInspectionCacheModel.inspectionDate = Long.MIN_VALUE;
		}

		registeredInspectionCacheModel.inspectionSite = getInspectionSite();

		String inspectionSite = registeredInspectionCacheModel.inspectionSite;

		if ((inspectionSite != null) && (inspectionSite.length() == 0)) {
			registeredInspectionCacheModel.inspectionSite = null;
		}

		registeredInspectionCacheModel.inspectionDistrictCode = getInspectionDistrictCode();

		String inspectionDistrictCode = registeredInspectionCacheModel.inspectionDistrictCode;

		if ((inspectionDistrictCode != null) &&
				(inspectionDistrictCode.length() == 0)) {
			registeredInspectionCacheModel.inspectionDistrictCode = null;
		}

		registeredInspectionCacheModel.inspectionProvinceCode = getInspectionProvinceCode();

		String inspectionProvinceCode = registeredInspectionCacheModel.inspectionProvinceCode;

		if ((inspectionProvinceCode != null) &&
				(inspectionProvinceCode.length() == 0)) {
			registeredInspectionCacheModel.inspectionProvinceCode = null;
		}

		registeredInspectionCacheModel.contactName = getContactName();

		String contactName = registeredInspectionCacheModel.contactName;

		if ((contactName != null) && (contactName.length() == 0)) {
			registeredInspectionCacheModel.contactName = null;
		}

		registeredInspectionCacheModel.contactPhone = getContactPhone();

		String contactPhone = registeredInspectionCacheModel.contactPhone;

		if ((contactPhone != null) && (contactPhone.length() == 0)) {
			registeredInspectionCacheModel.contactPhone = null;
		}

		registeredInspectionCacheModel.contactEmail = getContactEmail();

		String contactEmail = registeredInspectionCacheModel.contactEmail;

		if ((contactEmail != null) && (contactEmail.length() == 0)) {
			registeredInspectionCacheModel.contactEmail = null;
		}

		registeredInspectionCacheModel.importerSignName = getImporterSignName();

		String importerSignName = registeredInspectionCacheModel.importerSignName;

		if ((importerSignName != null) && (importerSignName.length() == 0)) {
			registeredInspectionCacheModel.importerSignName = null;
		}

		registeredInspectionCacheModel.importerSignTitle = getImporterSignTitle();

		String importerSignTitle = registeredInspectionCacheModel.importerSignTitle;

		if ((importerSignTitle != null) && (importerSignTitle.length() == 0)) {
			registeredInspectionCacheModel.importerSignTitle = null;
		}

		registeredInspectionCacheModel.importerSignPlace = getImporterSignPlace();

		String importerSignPlace = registeredInspectionCacheModel.importerSignPlace;

		if ((importerSignPlace != null) && (importerSignPlace.length() == 0)) {
			registeredInspectionCacheModel.importerSignPlace = null;
		}

		Date importerSignDate = getImporterSignDate();

		if (importerSignDate != null) {
			registeredInspectionCacheModel.importerSignDate = importerSignDate.getTime();
		}
		else {
			registeredInspectionCacheModel.importerSignDate = Long.MIN_VALUE;
		}

		registeredInspectionCacheModel.inspectorOrganization = getInspectorOrganization();

		String inspectorOrganization = registeredInspectionCacheModel.inspectorOrganization;

		if ((inspectorOrganization != null) &&
				(inspectorOrganization.length() == 0)) {
			registeredInspectionCacheModel.inspectorOrganization = null;
		}

		registeredInspectionCacheModel.inspectorDivision = getInspectorDivision();

		String inspectorDivision = registeredInspectionCacheModel.inspectorDivision;

		if ((inspectorDivision != null) && (inspectorDivision.length() == 0)) {
			registeredInspectionCacheModel.inspectorDivision = null;
		}

		registeredInspectionCacheModel.inspectorSigNname = getInspectorSigNname();

		String inspectorSigNname = registeredInspectionCacheModel.inspectorSigNname;

		if ((inspectorSigNname != null) && (inspectorSigNname.length() == 0)) {
			registeredInspectionCacheModel.inspectorSigNname = null;
		}

		registeredInspectionCacheModel.inspectorSignTitle = getInspectorSignTitle();

		String inspectorSignTitle = registeredInspectionCacheModel.inspectorSignTitle;

		if ((inspectorSignTitle != null) && (inspectorSignTitle.length() == 0)) {
			registeredInspectionCacheModel.inspectorSignTitle = null;
		}

		registeredInspectionCacheModel.inspectorSignPlace = getInspectorSignPlace();

		String inspectorSignPlace = registeredInspectionCacheModel.inspectorSignPlace;

		if ((inspectorSignPlace != null) && (inspectorSignPlace.length() == 0)) {
			registeredInspectionCacheModel.inspectorSignPlace = null;
		}

		Date inspectorSignDate = getInspectorSignDate();

		if (inspectorSignDate != null) {
			registeredInspectionCacheModel.inspectorSignDate = inspectorSignDate.getTime();
		}
		else {
			registeredInspectionCacheModel.inspectorSignDate = Long.MIN_VALUE;
		}

		Date SynchDate = getSynchDate();

		if (SynchDate != null) {
			registeredInspectionCacheModel.SynchDate = SynchDate.getTime();
		}
		else {
			registeredInspectionCacheModel.SynchDate = Long.MIN_VALUE;
		}

		return registeredInspectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(59);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", registeredNumber=");
		sb.append(getRegisteredNumber());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append(", importerCode=");
		sb.append(getImporterCode());
		sb.append(", importerName=");
		sb.append(getImporterName());
		sb.append(", importerAddress=");
		sb.append(getImporterAddress());
		sb.append(", representative=");
		sb.append(getRepresentative());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", fax=");
		sb.append(getFax());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", inspectionDate=");
		sb.append(getInspectionDate());
		sb.append(", inspectionSite=");
		sb.append(getInspectionSite());
		sb.append(", inspectionDistrictCode=");
		sb.append(getInspectionDistrictCode());
		sb.append(", inspectionProvinceCode=");
		sb.append(getInspectionProvinceCode());
		sb.append(", contactName=");
		sb.append(getContactName());
		sb.append(", contactPhone=");
		sb.append(getContactPhone());
		sb.append(", contactEmail=");
		sb.append(getContactEmail());
		sb.append(", importerSignName=");
		sb.append(getImporterSignName());
		sb.append(", importerSignTitle=");
		sb.append(getImporterSignTitle());
		sb.append(", importerSignPlace=");
		sb.append(getImporterSignPlace());
		sb.append(", importerSignDate=");
		sb.append(getImporterSignDate());
		sb.append(", inspectorOrganization=");
		sb.append(getInspectorOrganization());
		sb.append(", inspectorDivision=");
		sb.append(getInspectorDivision());
		sb.append(", inspectorSigNname=");
		sb.append(getInspectorSigNname());
		sb.append(", inspectorSignTitle=");
		sb.append(getInspectorSignTitle());
		sb.append(", inspectorSignPlace=");
		sb.append(getInspectorSignPlace());
		sb.append(", inspectorSignDate=");
		sb.append(getInspectorSignDate());
		sb.append(", SynchDate=");
		sb.append(getSynchDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(91);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.RegisteredInspection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registeredNumber</column-name><column-value><![CDATA[");
		sb.append(getRegisteredNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerCode</column-name><column-value><![CDATA[");
		sb.append(getImporterCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerName</column-name><column-value><![CDATA[");
		sb.append(getImporterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerAddress</column-name><column-value><![CDATA[");
		sb.append(getImporterAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>representative</column-name><column-value><![CDATA[");
		sb.append(getRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fax</column-name><column-value><![CDATA[");
		sb.append(getFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDate</column-name><column-value><![CDATA[");
		sb.append(getInspectionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionSite</column-name><column-value><![CDATA[");
		sb.append(getInspectionSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionDistrictCode</column-name><column-value><![CDATA[");
		sb.append(getInspectionDistrictCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionProvinceCode</column-name><column-value><![CDATA[");
		sb.append(getInspectionProvinceCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactName</column-name><column-value><![CDATA[");
		sb.append(getContactName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPhone</column-name><column-value><![CDATA[");
		sb.append(getContactPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactEmail</column-name><column-value><![CDATA[");
		sb.append(getContactEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerSignName</column-name><column-value><![CDATA[");
		sb.append(getImporterSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerSignTitle</column-name><column-value><![CDATA[");
		sb.append(getImporterSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerSignPlace</column-name><column-value><![CDATA[");
		sb.append(getImporterSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importerSignDate</column-name><column-value><![CDATA[");
		sb.append(getImporterSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorOrganization</column-name><column-value><![CDATA[");
		sb.append(getInspectorOrganization());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorDivision</column-name><column-value><![CDATA[");
		sb.append(getInspectorDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSigNname</column-name><column-value><![CDATA[");
		sb.append(getInspectorSigNname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignTitle</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignPlace</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectorSignDate</column-name><column-value><![CDATA[");
		sb.append(getInspectorSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SynchDate</column-name><column-value><![CDATA[");
		sb.append(getSynchDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RegisteredInspection.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RegisteredInspection.class
		};
	private long _id;
	private String _registeredNumber;
	private String _originalRegisteredNumber;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private long _attachedFile;
	private String _importerCode;
	private String _importerName;
	private String _importerAddress;
	private String _representative;
	private String _phone;
	private String _fax;
	private String _email;
	private Date _inspectionDate;
	private String _inspectionSite;
	private String _inspectionDistrictCode;
	private String _inspectionProvinceCode;
	private String _contactName;
	private String _contactPhone;
	private String _contactEmail;
	private String _importerSignName;
	private String _importerSignTitle;
	private String _importerSignPlace;
	private Date _importerSignDate;
	private String _inspectorOrganization;
	private String _inspectorDivision;
	private String _inspectorSigNname;
	private String _inspectorSignTitle;
	private String _inspectorSignPlace;
	private Date _inspectorSignDate;
	private Date _SynchDate;
	private long _columnBitmask;
	private RegisteredInspection _escapedModel;
}