/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.common.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.common.model.DmDataVersion;
import vn.dtt.gt.dk.dao.common.model.DmDataVersionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DmDataVersion service. Represents a row in the &quot;dm_dataversion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.common.model.DmDataVersionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmDataVersionImpl}.
 * </p>
 *
 * @author win_64
 * @see DmDataVersionImpl
 * @see vn.dtt.gt.dk.dao.common.model.DmDataVersion
 * @see vn.dtt.gt.dk.dao.common.model.DmDataVersionModel
 * @generated
 */
public class DmDataVersionModelImpl extends BaseModelImpl<DmDataVersion>
	implements DmDataVersionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm data version model instance should use the {@link vn.dtt.gt.dk.dao.common.model.DmDataVersion} interface instead.
	 */
	public static final String TABLE_NAME = "dm_dataversion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "datagroupid", Types.BIGINT },
			{ "version", Types.VARCHAR },
			{ "issuedtime", Types.TIMESTAMP },
			{ "validatedfrom", Types.TIMESTAMP },
			{ "validatedto", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table dm_dataversion (id LONG not null primary key,datagroupid LONG,version VARCHAR(75) null,issuedtime DATE null,validatedfrom DATE null,validatedto DATE null)";
	public static final String TABLE_SQL_DROP = "drop table dm_dataversion";
	public static final String ORDER_BY_JPQL = " ORDER BY dmDataVersion.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dm_dataversion.id ASC";
	public static final String DATA_SOURCE = "tthcDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.common.model.DmDataVersion"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.common.model.DmDataVersion"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.common.model.DmDataVersion"));

	public DmDataVersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DmDataVersion.class;
	}

	@Override
	public String getModelClassName() {
		return DmDataVersion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("Id", getId());
		attributes.put("DataGroupId", getDataGroupId());
		attributes.put("Version", getVersion());
		attributes.put("IssuedTime", getIssuedTime());
		attributes.put("ValidateDFrom", getValidateDFrom());
		attributes.put("ValidatedTo", getValidatedTo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}

		Long DataGroupId = (Long)attributes.get("DataGroupId");

		if (DataGroupId != null) {
			setDataGroupId(DataGroupId);
		}

		String Version = (String)attributes.get("Version");

		if (Version != null) {
			setVersion(Version);
		}

		Date IssuedTime = (Date)attributes.get("IssuedTime");

		if (IssuedTime != null) {
			setIssuedTime(IssuedTime);
		}

		Date ValidateDFrom = (Date)attributes.get("ValidateDFrom");

		if (ValidateDFrom != null) {
			setValidateDFrom(ValidateDFrom);
		}

		Date ValidatedTo = (Date)attributes.get("ValidatedTo");

		if (ValidatedTo != null) {
			setValidatedTo(ValidatedTo);
		}
	}

	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@Override
	public long getDataGroupId() {
		return _DataGroupId;
	}

	@Override
	public void setDataGroupId(long DataGroupId) {
		_DataGroupId = DataGroupId;
	}

	@Override
	public String getVersion() {
		if (_Version == null) {
			return StringPool.BLANK;
		}
		else {
			return _Version;
		}
	}

	@Override
	public void setVersion(String Version) {
		_Version = Version;
	}

	@Override
	public Date getIssuedTime() {
		return _IssuedTime;
	}

	@Override
	public void setIssuedTime(Date IssuedTime) {
		_IssuedTime = IssuedTime;
	}

	@Override
	public Date getValidateDFrom() {
		return _ValidateDFrom;
	}

	@Override
	public void setValidateDFrom(Date ValidateDFrom) {
		_ValidateDFrom = ValidateDFrom;
	}

	@Override
	public Date getValidatedTo() {
		return _ValidatedTo;
	}

	@Override
	public void setValidatedTo(Date ValidatedTo) {
		_ValidatedTo = ValidatedTo;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DmDataVersion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DmDataVersion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DmDataVersion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DmDataVersionImpl dmDataVersionImpl = new DmDataVersionImpl();

		dmDataVersionImpl.setId(getId());
		dmDataVersionImpl.setDataGroupId(getDataGroupId());
		dmDataVersionImpl.setVersion(getVersion());
		dmDataVersionImpl.setIssuedTime(getIssuedTime());
		dmDataVersionImpl.setValidateDFrom(getValidateDFrom());
		dmDataVersionImpl.setValidatedTo(getValidatedTo());

		dmDataVersionImpl.resetOriginalValues();

		return dmDataVersionImpl;
	}

	@Override
	public int compareTo(DmDataVersion dmDataVersion) {
		int value = 0;

		if (getId() < dmDataVersion.getId()) {
			value = -1;
		}
		else if (getId() > dmDataVersion.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DmDataVersion)) {
			return false;
		}

		DmDataVersion dmDataVersion = (DmDataVersion)obj;

		long primaryKey = dmDataVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DmDataVersion> toCacheModel() {
		DmDataVersionCacheModel dmDataVersionCacheModel = new DmDataVersionCacheModel();

		dmDataVersionCacheModel.Id = getId();

		dmDataVersionCacheModel.DataGroupId = getDataGroupId();

		dmDataVersionCacheModel.Version = getVersion();

		String Version = dmDataVersionCacheModel.Version;

		if ((Version != null) && (Version.length() == 0)) {
			dmDataVersionCacheModel.Version = null;
		}

		Date IssuedTime = getIssuedTime();

		if (IssuedTime != null) {
			dmDataVersionCacheModel.IssuedTime = IssuedTime.getTime();
		}
		else {
			dmDataVersionCacheModel.IssuedTime = Long.MIN_VALUE;
		}

		Date ValidateDFrom = getValidateDFrom();

		if (ValidateDFrom != null) {
			dmDataVersionCacheModel.ValidateDFrom = ValidateDFrom.getTime();
		}
		else {
			dmDataVersionCacheModel.ValidateDFrom = Long.MIN_VALUE;
		}

		Date ValidatedTo = getValidatedTo();

		if (ValidatedTo != null) {
			dmDataVersionCacheModel.ValidatedTo = ValidatedTo.getTime();
		}
		else {
			dmDataVersionCacheModel.ValidatedTo = Long.MIN_VALUE;
		}

		return dmDataVersionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{Id=");
		sb.append(getId());
		sb.append(", DataGroupId=");
		sb.append(getDataGroupId());
		sb.append(", Version=");
		sb.append(getVersion());
		sb.append(", IssuedTime=");
		sb.append(getIssuedTime());
		sb.append(", ValidateDFrom=");
		sb.append(getValidateDFrom());
		sb.append(", ValidatedTo=");
		sb.append(getValidatedTo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.common.model.DmDataVersion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DataGroupId</column-name><column-value><![CDATA[");
		sb.append(getDataGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IssuedTime</column-name><column-value><![CDATA[");
		sb.append(getIssuedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ValidateDFrom</column-name><column-value><![CDATA[");
		sb.append(getValidateDFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ValidatedTo</column-name><column-value><![CDATA[");
		sb.append(getValidatedTo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmDataVersion.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DmDataVersion.class
		};
	private long _Id;
	private long _DataGroupId;
	private String _Version;
	private Date _IssuedTime;
	private Date _ValidateDFrom;
	private Date _ValidatedTo;
	private DmDataVersion _escapedModel;
}