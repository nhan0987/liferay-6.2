/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatus;
import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatusModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatusSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InspectionCommonStatus service. Represents a row in the &quot;vr_inspectionCommonStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InspectionCommonStatusImpl}.
 * </p>
 *
 * @author win_64
 * @see InspectionCommonStatusImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatus
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatusModel
 * @generated
 */
@JSON(strict = true)
public class InspectionCommonStatusModelImpl extends BaseModelImpl<InspectionCommonStatus>
	implements InspectionCommonStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a inspection common status model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatus} interface instead.
	 */
	public static final String TABLE_NAME = "vr_inspectionCommonStatus";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "vehicleClass", Types.VARCHAR },
			{ "sequenceNo", Types.BIGINT },
			{ "type", Types.BIGINT },
			{ "groupName", Types.VARCHAR },
			{ "itemName", Types.VARCHAR },
			{ "commonStatus", Types.BIGINT },
			{ "inspectionRecordId", Types.BIGINT },
			{ "CommonCode", Types.VARCHAR },
			{ "AllowEdit", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_inspectionCommonStatus (id LONG not null primary key,vehicleClass VARCHAR(75) null,sequenceNo LONG,type LONG,groupName VARCHAR(75) null,itemName VARCHAR(75) null,commonStatus LONG,inspectionRecordId LONG,CommonCode VARCHAR(75) null,AllowEdit INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table vr_inspectionCommonStatus";
	public static final String ORDER_BY_JPQL = " ORDER BY inspectionCommonStatus.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_inspectionCommonStatus.id DESC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatus"),
			true);
	public static long INSPECTIONRECORDID_COLUMN_BITMASK = 1L;
	public static long TYPE_COLUMN_BITMASK = 2L;
	public static long VEHICLECLASS_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InspectionCommonStatus toModel(
		InspectionCommonStatusSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InspectionCommonStatus model = new InspectionCommonStatusImpl();

		model.setId(soapModel.getId());
		model.setVehicleClass(soapModel.getVehicleClass());
		model.setSequenceNo(soapModel.getSequenceNo());
		model.setType(soapModel.getType());
		model.setGroupName(soapModel.getGroupName());
		model.setItemName(soapModel.getItemName());
		model.setCommonStatus(soapModel.getCommonStatus());
		model.setInspectionRecordId(soapModel.getInspectionRecordId());
		model.setCommonCode(soapModel.getCommonCode());
		model.setAllowEdit(soapModel.getAllowEdit());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InspectionCommonStatus> toModels(
		InspectionCommonStatusSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InspectionCommonStatus> models = new ArrayList<InspectionCommonStatus>(soapModels.length);

		for (InspectionCommonStatusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatus"));

	public InspectionCommonStatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return InspectionCommonStatus.class;
	}

	@Override
	public String getModelClassName() {
		return InspectionCommonStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vehicleClass", getVehicleClass());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("type", getType());
		attributes.put("groupName", getGroupName());
		attributes.put("itemName", getItemName());
		attributes.put("commonStatus", getCommonStatus());
		attributes.put("inspectionRecordId", getInspectionRecordId());
		attributes.put("commonCode", getCommonCode());
		attributes.put("allowEdit", getAllowEdit());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String vehicleClass = (String)attributes.get("vehicleClass");

		if (vehicleClass != null) {
			setVehicleClass(vehicleClass);
		}

		Long sequenceNo = (Long)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		Long type = (Long)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String groupName = (String)attributes.get("groupName");

		if (groupName != null) {
			setGroupName(groupName);
		}

		String itemName = (String)attributes.get("itemName");

		if (itemName != null) {
			setItemName(itemName);
		}

		Long commonStatus = (Long)attributes.get("commonStatus");

		if (commonStatus != null) {
			setCommonStatus(commonStatus);
		}

		Long inspectionRecordId = (Long)attributes.get("inspectionRecordId");

		if (inspectionRecordId != null) {
			setInspectionRecordId(inspectionRecordId);
		}

		String commonCode = (String)attributes.get("commonCode");

		if (commonCode != null) {
			setCommonCode(commonCode);
		}

		Integer allowEdit = (Integer)attributes.get("allowEdit");

		if (allowEdit != null) {
			setAllowEdit(allowEdit);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getVehicleClass() {
		if (_vehicleClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleClass;
		}
	}

	@Override
	public void setVehicleClass(String vehicleClass) {
		_columnBitmask |= VEHICLECLASS_COLUMN_BITMASK;

		if (_originalVehicleClass == null) {
			_originalVehicleClass = _vehicleClass;
		}

		_vehicleClass = vehicleClass;
	}

	public String getOriginalVehicleClass() {
		return GetterUtil.getString(_originalVehicleClass);
	}

	@JSON
	@Override
	public long getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(long sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@JSON
	@Override
	public long getType() {
		return _type;
	}

	@Override
	public void setType(long type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public long getOriginalType() {
		return _originalType;
	}

	@JSON
	@Override
	public String getGroupName() {
		if (_groupName == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupName;
		}
	}

	@Override
	public void setGroupName(String groupName) {
		_groupName = groupName;
	}

	@JSON
	@Override
	public String getItemName() {
		if (_itemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemName;
		}
	}

	@Override
	public void setItemName(String itemName) {
		_itemName = itemName;
	}

	@JSON
	@Override
	public long getCommonStatus() {
		return _commonStatus;
	}

	@Override
	public void setCommonStatus(long commonStatus) {
		_commonStatus = commonStatus;
	}

	@JSON
	@Override
	public long getInspectionRecordId() {
		return _inspectionRecordId;
	}

	@Override
	public void setInspectionRecordId(long inspectionRecordId) {
		_columnBitmask |= INSPECTIONRECORDID_COLUMN_BITMASK;

		if (!_setOriginalInspectionRecordId) {
			_setOriginalInspectionRecordId = true;

			_originalInspectionRecordId = _inspectionRecordId;
		}

		_inspectionRecordId = inspectionRecordId;
	}

	public long getOriginalInspectionRecordId() {
		return _originalInspectionRecordId;
	}

	@JSON
	@Override
	public String getCommonCode() {
		if (_commonCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _commonCode;
		}
	}

	@Override
	public void setCommonCode(String commonCode) {
		_commonCode = commonCode;
	}

	@JSON
	@Override
	public int getAllowEdit() {
		return _allowEdit;
	}

	@Override
	public void setAllowEdit(int allowEdit) {
		_allowEdit = allowEdit;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			InspectionCommonStatus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public InspectionCommonStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (InspectionCommonStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InspectionCommonStatusImpl inspectionCommonStatusImpl = new InspectionCommonStatusImpl();

		inspectionCommonStatusImpl.setId(getId());
		inspectionCommonStatusImpl.setVehicleClass(getVehicleClass());
		inspectionCommonStatusImpl.setSequenceNo(getSequenceNo());
		inspectionCommonStatusImpl.setType(getType());
		inspectionCommonStatusImpl.setGroupName(getGroupName());
		inspectionCommonStatusImpl.setItemName(getItemName());
		inspectionCommonStatusImpl.setCommonStatus(getCommonStatus());
		inspectionCommonStatusImpl.setInspectionRecordId(getInspectionRecordId());
		inspectionCommonStatusImpl.setCommonCode(getCommonCode());
		inspectionCommonStatusImpl.setAllowEdit(getAllowEdit());

		inspectionCommonStatusImpl.resetOriginalValues();

		return inspectionCommonStatusImpl;
	}

	@Override
	public int compareTo(InspectionCommonStatus inspectionCommonStatus) {
		int value = 0;

		if (getId() < inspectionCommonStatus.getId()) {
			value = -1;
		}
		else if (getId() > inspectionCommonStatus.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof InspectionCommonStatus)) {
			return false;
		}

		InspectionCommonStatus inspectionCommonStatus = (InspectionCommonStatus)obj;

		long primaryKey = inspectionCommonStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		InspectionCommonStatusModelImpl inspectionCommonStatusModelImpl = this;

		inspectionCommonStatusModelImpl._originalVehicleClass = inspectionCommonStatusModelImpl._vehicleClass;

		inspectionCommonStatusModelImpl._originalType = inspectionCommonStatusModelImpl._type;

		inspectionCommonStatusModelImpl._setOriginalType = false;

		inspectionCommonStatusModelImpl._originalInspectionRecordId = inspectionCommonStatusModelImpl._inspectionRecordId;

		inspectionCommonStatusModelImpl._setOriginalInspectionRecordId = false;

		inspectionCommonStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<InspectionCommonStatus> toCacheModel() {
		InspectionCommonStatusCacheModel inspectionCommonStatusCacheModel = new InspectionCommonStatusCacheModel();

		inspectionCommonStatusCacheModel.id = getId();

		inspectionCommonStatusCacheModel.vehicleClass = getVehicleClass();

		String vehicleClass = inspectionCommonStatusCacheModel.vehicleClass;

		if ((vehicleClass != null) && (vehicleClass.length() == 0)) {
			inspectionCommonStatusCacheModel.vehicleClass = null;
		}

		inspectionCommonStatusCacheModel.sequenceNo = getSequenceNo();

		inspectionCommonStatusCacheModel.type = getType();

		inspectionCommonStatusCacheModel.groupName = getGroupName();

		String groupName = inspectionCommonStatusCacheModel.groupName;

		if ((groupName != null) && (groupName.length() == 0)) {
			inspectionCommonStatusCacheModel.groupName = null;
		}

		inspectionCommonStatusCacheModel.itemName = getItemName();

		String itemName = inspectionCommonStatusCacheModel.itemName;

		if ((itemName != null) && (itemName.length() == 0)) {
			inspectionCommonStatusCacheModel.itemName = null;
		}

		inspectionCommonStatusCacheModel.commonStatus = getCommonStatus();

		inspectionCommonStatusCacheModel.inspectionRecordId = getInspectionRecordId();

		inspectionCommonStatusCacheModel.commonCode = getCommonCode();

		String commonCode = inspectionCommonStatusCacheModel.commonCode;

		if ((commonCode != null) && (commonCode.length() == 0)) {
			inspectionCommonStatusCacheModel.commonCode = null;
		}

		inspectionCommonStatusCacheModel.allowEdit = getAllowEdit();

		return inspectionCommonStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vehicleClass=");
		sb.append(getVehicleClass());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", groupName=");
		sb.append(getGroupName());
		sb.append(", itemName=");
		sb.append(getItemName());
		sb.append(", commonStatus=");
		sb.append(getCommonStatus());
		sb.append(", inspectionRecordId=");
		sb.append(getInspectionRecordId());
		sb.append(", commonCode=");
		sb.append(getCommonCode());
		sb.append(", allowEdit=");
		sb.append(getAllowEdit());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.InspectionCommonStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleClass</column-name><column-value><![CDATA[");
		sb.append(getVehicleClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupName</column-name><column-value><![CDATA[");
		sb.append(getGroupName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemName</column-name><column-value><![CDATA[");
		sb.append(getItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commonStatus</column-name><column-value><![CDATA[");
		sb.append(getCommonStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordId</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commonCode</column-name><column-value><![CDATA[");
		sb.append(getCommonCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowEdit</column-name><column-value><![CDATA[");
		sb.append(getAllowEdit());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = InspectionCommonStatus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			InspectionCommonStatus.class
		};
	private long _id;
	private String _vehicleClass;
	private String _originalVehicleClass;
	private long _sequenceNo;
	private long _type;
	private long _originalType;
	private boolean _setOriginalType;
	private String _groupName;
	private String _itemName;
	private long _commonStatus;
	private long _inspectionRecordId;
	private long _originalInspectionRecordId;
	private boolean _setOriginalInspectionRecordId;
	private String _commonCode;
	private int _allowEdit;
	private long _columnBitmask;
	private InspectionCommonStatus _escapedModel;
}