/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.gt.dk.dao.nghiepvu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecord;
import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecordModel;
import vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecordSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the VehicleRecord service. Represents a row in the &quot;vr_vehiclerecord&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VehicleRecordImpl}.
 * </p>
 *
 * @author win_64
 * @see VehicleRecordImpl
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecord
 * @see vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecordModel
 * @generated
 */
@JSON(strict = true)
public class VehicleRecordModelImpl extends BaseModelImpl<VehicleRecord>
	implements VehicleRecordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a vehicle record model instance should use the {@link vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecord} interface instead.
	 */
	public static final String TABLE_NAME = "vr_vehiclerecord";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "vehiclegroupid", Types.BIGINT },
			{ "debitnoteid", Types.BIGINT },
			{ "sequenceno", Types.BIGINT },
			{ "codenumber", Types.BIGINT },
			{ "chassisnumber", Types.VARCHAR },
			{ "enginenumber", Types.VARCHAR },
			{ "productionyear", Types.VARCHAR },
			{ "vehicleenginestatus", Types.VARCHAR },
			{ "vehiclecolor", Types.VARCHAR },
			{ "unitprice", Types.DOUBLE },
			{ "currency", Types.VARCHAR },
			{ "remarks", Types.VARCHAR },
			{ "confirmedinspectionid", Types.BIGINT },
			{ "inspectionrecordid", Types.BIGINT },
			{ "draftcertificateid", Types.BIGINT },
			{ "certificaterecordid", Types.BIGINT },
			{ "markupstatus", Types.BIGINT },
			{ "safetestrequirementid", Types.BIGINT },
			{ "emissiontestrequirementid", Types.BIGINT },
			{ "controlrequirementid", Types.BIGINT },
			{ "MarkAsSample", Types.INTEGER },
			{ "synchdate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table vr_vehiclerecord (id LONG not null primary key,vehiclegroupid LONG,debitnoteid LONG,sequenceno LONG,codenumber LONG,chassisnumber VARCHAR(75) null,enginenumber VARCHAR(75) null,productionyear VARCHAR(75) null,vehicleenginestatus VARCHAR(75) null,vehiclecolor VARCHAR(75) null,unitprice DOUBLE,currency VARCHAR(75) null,remarks VARCHAR(75) null,confirmedinspectionid LONG,inspectionrecordid LONG,draftcertificateid LONG,certificaterecordid LONG,markupstatus LONG,safetestrequirementid LONG,emissiontestrequirementid LONG,controlrequirementid LONG,MarkAsSample INTEGER,synchdate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table vr_vehiclerecord";
	public static final String ORDER_BY_JPQL = " ORDER BY vehicleRecord.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY vr_vehiclerecord.id DESC";
	public static final String DATA_SOURCE = "vrDataSource";
	public static final String SESSION_FACTORY = "vrSessionFactory";
	public static final String TX_MANAGER = "vrTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecord"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecord"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecord"),
			true);
	public static long CERTIFICATERECORDID_COLUMN_BITMASK = 1L;
	public static long CODENUMBER_COLUMN_BITMASK = 2L;
	public static long CONFIRMEDINSPECTIONID_COLUMN_BITMASK = 4L;
	public static long CONTROLREQUIREMENTID_COLUMN_BITMASK = 8L;
	public static long DEBITNOTEID_COLUMN_BITMASK = 16L;
	public static long DRAFTCERTIFICATEID_COLUMN_BITMASK = 32L;
	public static long EMISSIONTESTREQUIREMENTID_COLUMN_BITMASK = 64L;
	public static long INSPECTIONRECORDID_COLUMN_BITMASK = 128L;
	public static long SAFETESTREQUIREMENTID_COLUMN_BITMASK = 256L;
	public static long VEHICLEGROUPID_COLUMN_BITMASK = 512L;
	public static long ID_COLUMN_BITMASK = 1024L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VehicleRecord toModel(VehicleRecordSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VehicleRecord model = new VehicleRecordImpl();

		model.setId(soapModel.getId());
		model.setVehicleGroupId(soapModel.getVehicleGroupId());
		model.setDebitNoteId(soapModel.getDebitNoteId());
		model.setSequenceNo(soapModel.getSequenceNo());
		model.setCodeNumber(soapModel.getCodeNumber());
		model.setChassisNumber(soapModel.getChassisNumber());
		model.setEngineNumber(soapModel.getEngineNumber());
		model.setProductionYear(soapModel.getProductionYear());
		model.setVehicleEngineStatus(soapModel.getVehicleEngineStatus());
		model.setVehicleColor(soapModel.getVehicleColor());
		model.setUnitPrice(soapModel.getUnitPrice());
		model.setCurrency(soapModel.getCurrency());
		model.setRemarks(soapModel.getRemarks());
		model.setConfirmedInspectionId(soapModel.getConfirmedInspectionId());
		model.setInspectionRecordId(soapModel.getInspectionRecordId());
		model.setDraftCertificateId(soapModel.getDraftCertificateId());
		model.setCertificateRecordId(soapModel.getCertificateRecordId());
		model.setMarkUpStatus(soapModel.getMarkUpStatus());
		model.setSafeTestRequirementId(soapModel.getSafeTestRequirementId());
		model.setEmissionTestRequirementId(soapModel.getEmissionTestRequirementId());
		model.setControlRequirementId(soapModel.getControlRequirementId());
		model.setMarkAsSample(soapModel.getMarkAsSample());
		model.setSynchDate(soapModel.getSynchDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VehicleRecord> toModels(VehicleRecordSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VehicleRecord> models = new ArrayList<VehicleRecord>(soapModels.length);

		for (VehicleRecordSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecord"));

	public VehicleRecordModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VehicleRecord.class;
	}

	@Override
	public String getModelClassName() {
		return VehicleRecord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vehicleGroupId", getVehicleGroupId());
		attributes.put("debitNoteId", getDebitNoteId());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("codeNumber", getCodeNumber());
		attributes.put("chassisNumber", getChassisNumber());
		attributes.put("engineNumber", getEngineNumber());
		attributes.put("productionYear", getProductionYear());
		attributes.put("vehicleEngineStatus", getVehicleEngineStatus());
		attributes.put("vehicleColor", getVehicleColor());
		attributes.put("unitPrice", getUnitPrice());
		attributes.put("currency", getCurrency());
		attributes.put("remarks", getRemarks());
		attributes.put("confirmedInspectionId", getConfirmedInspectionId());
		attributes.put("inspectionRecordId", getInspectionRecordId());
		attributes.put("draftCertificateId", getDraftCertificateId());
		attributes.put("certificateRecordId", getCertificateRecordId());
		attributes.put("markUpStatus", getMarkUpStatus());
		attributes.put("safeTestRequirementId", getSafeTestRequirementId());
		attributes.put("emissionTestRequirementId",
			getEmissionTestRequirementId());
		attributes.put("controlRequirementId", getControlRequirementId());
		attributes.put("markAsSample", getMarkAsSample());
		attributes.put("SynchDate", getSynchDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long vehicleGroupId = (Long)attributes.get("vehicleGroupId");

		if (vehicleGroupId != null) {
			setVehicleGroupId(vehicleGroupId);
		}

		Long debitNoteId = (Long)attributes.get("debitNoteId");

		if (debitNoteId != null) {
			setDebitNoteId(debitNoteId);
		}

		Long sequenceNo = (Long)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		Long codeNumber = (Long)attributes.get("codeNumber");

		if (codeNumber != null) {
			setCodeNumber(codeNumber);
		}

		String chassisNumber = (String)attributes.get("chassisNumber");

		if (chassisNumber != null) {
			setChassisNumber(chassisNumber);
		}

		String engineNumber = (String)attributes.get("engineNumber");

		if (engineNumber != null) {
			setEngineNumber(engineNumber);
		}

		String productionYear = (String)attributes.get("productionYear");

		if (productionYear != null) {
			setProductionYear(productionYear);
		}

		String vehicleEngineStatus = (String)attributes.get(
				"vehicleEngineStatus");

		if (vehicleEngineStatus != null) {
			setVehicleEngineStatus(vehicleEngineStatus);
		}

		String vehicleColor = (String)attributes.get("vehicleColor");

		if (vehicleColor != null) {
			setVehicleColor(vehicleColor);
		}

		Double unitPrice = (Double)attributes.get("unitPrice");

		if (unitPrice != null) {
			setUnitPrice(unitPrice);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		Long confirmedInspectionId = (Long)attributes.get(
				"confirmedInspectionId");

		if (confirmedInspectionId != null) {
			setConfirmedInspectionId(confirmedInspectionId);
		}

		Long inspectionRecordId = (Long)attributes.get("inspectionRecordId");

		if (inspectionRecordId != null) {
			setInspectionRecordId(inspectionRecordId);
		}

		Long draftCertificateId = (Long)attributes.get("draftCertificateId");

		if (draftCertificateId != null) {
			setDraftCertificateId(draftCertificateId);
		}

		Long certificateRecordId = (Long)attributes.get("certificateRecordId");

		if (certificateRecordId != null) {
			setCertificateRecordId(certificateRecordId);
		}

		Long markUpStatus = (Long)attributes.get("markUpStatus");

		if (markUpStatus != null) {
			setMarkUpStatus(markUpStatus);
		}

		Long safeTestRequirementId = (Long)attributes.get(
				"safeTestRequirementId");

		if (safeTestRequirementId != null) {
			setSafeTestRequirementId(safeTestRequirementId);
		}

		Long emissionTestRequirementId = (Long)attributes.get(
				"emissionTestRequirementId");

		if (emissionTestRequirementId != null) {
			setEmissionTestRequirementId(emissionTestRequirementId);
		}

		Long controlRequirementId = (Long)attributes.get("controlRequirementId");

		if (controlRequirementId != null) {
			setControlRequirementId(controlRequirementId);
		}

		Integer markAsSample = (Integer)attributes.get("markAsSample");

		if (markAsSample != null) {
			setMarkAsSample(markAsSample);
		}

		Date SynchDate = (Date)attributes.get("SynchDate");

		if (SynchDate != null) {
			setSynchDate(SynchDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getVehicleGroupId() {
		return _vehicleGroupId;
	}

	@Override
	public void setVehicleGroupId(long vehicleGroupId) {
		_columnBitmask |= VEHICLEGROUPID_COLUMN_BITMASK;

		if (!_setOriginalVehicleGroupId) {
			_setOriginalVehicleGroupId = true;

			_originalVehicleGroupId = _vehicleGroupId;
		}

		_vehicleGroupId = vehicleGroupId;
	}

	public long getOriginalVehicleGroupId() {
		return _originalVehicleGroupId;
	}

	@JSON
	@Override
	public long getDebitNoteId() {
		return _debitNoteId;
	}

	@Override
	public void setDebitNoteId(long debitNoteId) {
		_columnBitmask |= DEBITNOTEID_COLUMN_BITMASK;

		if (!_setOriginalDebitNoteId) {
			_setOriginalDebitNoteId = true;

			_originalDebitNoteId = _debitNoteId;
		}

		_debitNoteId = debitNoteId;
	}

	public long getOriginalDebitNoteId() {
		return _originalDebitNoteId;
	}

	@JSON
	@Override
	public long getSequenceNo() {
		return _sequenceNo;
	}

	@Override
	public void setSequenceNo(long sequenceNo) {
		_sequenceNo = sequenceNo;
	}

	@JSON
	@Override
	public long getCodeNumber() {
		return _codeNumber;
	}

	@Override
	public void setCodeNumber(long codeNumber) {
		_columnBitmask |= CODENUMBER_COLUMN_BITMASK;

		if (!_setOriginalCodeNumber) {
			_setOriginalCodeNumber = true;

			_originalCodeNumber = _codeNumber;
		}

		_codeNumber = codeNumber;
	}

	public long getOriginalCodeNumber() {
		return _originalCodeNumber;
	}

	@JSON
	@Override
	public String getChassisNumber() {
		if (_chassisNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _chassisNumber;
		}
	}

	@Override
	public void setChassisNumber(String chassisNumber) {
		_chassisNumber = chassisNumber;
	}

	@JSON
	@Override
	public String getEngineNumber() {
		if (_engineNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _engineNumber;
		}
	}

	@Override
	public void setEngineNumber(String engineNumber) {
		_engineNumber = engineNumber;
	}

	@JSON
	@Override
	public String getProductionYear() {
		if (_productionYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _productionYear;
		}
	}

	@Override
	public void setProductionYear(String productionYear) {
		_productionYear = productionYear;
	}

	@JSON
	@Override
	public String getVehicleEngineStatus() {
		if (_vehicleEngineStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleEngineStatus;
		}
	}

	@Override
	public void setVehicleEngineStatus(String vehicleEngineStatus) {
		_vehicleEngineStatus = vehicleEngineStatus;
	}

	@JSON
	@Override
	public String getVehicleColor() {
		if (_vehicleColor == null) {
			return StringPool.BLANK;
		}
		else {
			return _vehicleColor;
		}
	}

	@Override
	public void setVehicleColor(String vehicleColor) {
		_vehicleColor = vehicleColor;
	}

	@JSON
	@Override
	public double getUnitPrice() {
		return _unitPrice;
	}

	@Override
	public void setUnitPrice(double unitPrice) {
		_unitPrice = unitPrice;
	}

	@JSON
	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public long getConfirmedInspectionId() {
		return _confirmedInspectionId;
	}

	@Override
	public void setConfirmedInspectionId(long confirmedInspectionId) {
		_columnBitmask |= CONFIRMEDINSPECTIONID_COLUMN_BITMASK;

		if (!_setOriginalConfirmedInspectionId) {
			_setOriginalConfirmedInspectionId = true;

			_originalConfirmedInspectionId = _confirmedInspectionId;
		}

		_confirmedInspectionId = confirmedInspectionId;
	}

	public long getOriginalConfirmedInspectionId() {
		return _originalConfirmedInspectionId;
	}

	@JSON
	@Override
	public long getInspectionRecordId() {
		return _inspectionRecordId;
	}

	@Override
	public void setInspectionRecordId(long inspectionRecordId) {
		_columnBitmask |= INSPECTIONRECORDID_COLUMN_BITMASK;

		if (!_setOriginalInspectionRecordId) {
			_setOriginalInspectionRecordId = true;

			_originalInspectionRecordId = _inspectionRecordId;
		}

		_inspectionRecordId = inspectionRecordId;
	}

	public long getOriginalInspectionRecordId() {
		return _originalInspectionRecordId;
	}

	@JSON
	@Override
	public long getDraftCertificateId() {
		return _draftCertificateId;
	}

	@Override
	public void setDraftCertificateId(long draftCertificateId) {
		_columnBitmask |= DRAFTCERTIFICATEID_COLUMN_BITMASK;

		if (!_setOriginalDraftCertificateId) {
			_setOriginalDraftCertificateId = true;

			_originalDraftCertificateId = _draftCertificateId;
		}

		_draftCertificateId = draftCertificateId;
	}

	public long getOriginalDraftCertificateId() {
		return _originalDraftCertificateId;
	}

	@JSON
	@Override
	public long getCertificateRecordId() {
		return _certificateRecordId;
	}

	@Override
	public void setCertificateRecordId(long certificateRecordId) {
		_columnBitmask |= CERTIFICATERECORDID_COLUMN_BITMASK;

		if (!_setOriginalCertificateRecordId) {
			_setOriginalCertificateRecordId = true;

			_originalCertificateRecordId = _certificateRecordId;
		}

		_certificateRecordId = certificateRecordId;
	}

	public long getOriginalCertificateRecordId() {
		return _originalCertificateRecordId;
	}

	@JSON
	@Override
	public long getMarkUpStatus() {
		return _markUpStatus;
	}

	@Override
	public void setMarkUpStatus(long markUpStatus) {
		_markUpStatus = markUpStatus;
	}

	@JSON
	@Override
	public long getSafeTestRequirementId() {
		return _safeTestRequirementId;
	}

	@Override
	public void setSafeTestRequirementId(long safeTestRequirementId) {
		_columnBitmask |= SAFETESTREQUIREMENTID_COLUMN_BITMASK;

		if (!_setOriginalSafeTestRequirementId) {
			_setOriginalSafeTestRequirementId = true;

			_originalSafeTestRequirementId = _safeTestRequirementId;
		}

		_safeTestRequirementId = safeTestRequirementId;
	}

	public long getOriginalSafeTestRequirementId() {
		return _originalSafeTestRequirementId;
	}

	@JSON
	@Override
	public long getEmissionTestRequirementId() {
		return _emissionTestRequirementId;
	}

	@Override
	public void setEmissionTestRequirementId(long emissionTestRequirementId) {
		_columnBitmask |= EMISSIONTESTREQUIREMENTID_COLUMN_BITMASK;

		if (!_setOriginalEmissionTestRequirementId) {
			_setOriginalEmissionTestRequirementId = true;

			_originalEmissionTestRequirementId = _emissionTestRequirementId;
		}

		_emissionTestRequirementId = emissionTestRequirementId;
	}

	public long getOriginalEmissionTestRequirementId() {
		return _originalEmissionTestRequirementId;
	}

	@JSON
	@Override
	public long getControlRequirementId() {
		return _controlRequirementId;
	}

	@Override
	public void setControlRequirementId(long controlRequirementId) {
		_columnBitmask |= CONTROLREQUIREMENTID_COLUMN_BITMASK;

		if (!_setOriginalControlRequirementId) {
			_setOriginalControlRequirementId = true;

			_originalControlRequirementId = _controlRequirementId;
		}

		_controlRequirementId = controlRequirementId;
	}

	public long getOriginalControlRequirementId() {
		return _originalControlRequirementId;
	}

	@JSON
	@Override
	public int getMarkAsSample() {
		return _markAsSample;
	}

	@Override
	public void setMarkAsSample(int markAsSample) {
		_markAsSample = markAsSample;
	}

	@JSON
	@Override
	public Date getSynchDate() {
		return _SynchDate;
	}

	@Override
	public void setSynchDate(Date SynchDate) {
		_SynchDate = SynchDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			VehicleRecord.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VehicleRecord toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VehicleRecord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VehicleRecordImpl vehicleRecordImpl = new VehicleRecordImpl();

		vehicleRecordImpl.setId(getId());
		vehicleRecordImpl.setVehicleGroupId(getVehicleGroupId());
		vehicleRecordImpl.setDebitNoteId(getDebitNoteId());
		vehicleRecordImpl.setSequenceNo(getSequenceNo());
		vehicleRecordImpl.setCodeNumber(getCodeNumber());
		vehicleRecordImpl.setChassisNumber(getChassisNumber());
		vehicleRecordImpl.setEngineNumber(getEngineNumber());
		vehicleRecordImpl.setProductionYear(getProductionYear());
		vehicleRecordImpl.setVehicleEngineStatus(getVehicleEngineStatus());
		vehicleRecordImpl.setVehicleColor(getVehicleColor());
		vehicleRecordImpl.setUnitPrice(getUnitPrice());
		vehicleRecordImpl.setCurrency(getCurrency());
		vehicleRecordImpl.setRemarks(getRemarks());
		vehicleRecordImpl.setConfirmedInspectionId(getConfirmedInspectionId());
		vehicleRecordImpl.setInspectionRecordId(getInspectionRecordId());
		vehicleRecordImpl.setDraftCertificateId(getDraftCertificateId());
		vehicleRecordImpl.setCertificateRecordId(getCertificateRecordId());
		vehicleRecordImpl.setMarkUpStatus(getMarkUpStatus());
		vehicleRecordImpl.setSafeTestRequirementId(getSafeTestRequirementId());
		vehicleRecordImpl.setEmissionTestRequirementId(getEmissionTestRequirementId());
		vehicleRecordImpl.setControlRequirementId(getControlRequirementId());
		vehicleRecordImpl.setMarkAsSample(getMarkAsSample());
		vehicleRecordImpl.setSynchDate(getSynchDate());

		vehicleRecordImpl.resetOriginalValues();

		return vehicleRecordImpl;
	}

	@Override
	public int compareTo(VehicleRecord vehicleRecord) {
		int value = 0;

		if (getId() < vehicleRecord.getId()) {
			value = -1;
		}
		else if (getId() > vehicleRecord.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VehicleRecord)) {
			return false;
		}

		VehicleRecord vehicleRecord = (VehicleRecord)obj;

		long primaryKey = vehicleRecord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VehicleRecordModelImpl vehicleRecordModelImpl = this;

		vehicleRecordModelImpl._originalVehicleGroupId = vehicleRecordModelImpl._vehicleGroupId;

		vehicleRecordModelImpl._setOriginalVehicleGroupId = false;

		vehicleRecordModelImpl._originalDebitNoteId = vehicleRecordModelImpl._debitNoteId;

		vehicleRecordModelImpl._setOriginalDebitNoteId = false;

		vehicleRecordModelImpl._originalCodeNumber = vehicleRecordModelImpl._codeNumber;

		vehicleRecordModelImpl._setOriginalCodeNumber = false;

		vehicleRecordModelImpl._originalConfirmedInspectionId = vehicleRecordModelImpl._confirmedInspectionId;

		vehicleRecordModelImpl._setOriginalConfirmedInspectionId = false;

		vehicleRecordModelImpl._originalInspectionRecordId = vehicleRecordModelImpl._inspectionRecordId;

		vehicleRecordModelImpl._setOriginalInspectionRecordId = false;

		vehicleRecordModelImpl._originalDraftCertificateId = vehicleRecordModelImpl._draftCertificateId;

		vehicleRecordModelImpl._setOriginalDraftCertificateId = false;

		vehicleRecordModelImpl._originalCertificateRecordId = vehicleRecordModelImpl._certificateRecordId;

		vehicleRecordModelImpl._setOriginalCertificateRecordId = false;

		vehicleRecordModelImpl._originalSafeTestRequirementId = vehicleRecordModelImpl._safeTestRequirementId;

		vehicleRecordModelImpl._setOriginalSafeTestRequirementId = false;

		vehicleRecordModelImpl._originalEmissionTestRequirementId = vehicleRecordModelImpl._emissionTestRequirementId;

		vehicleRecordModelImpl._setOriginalEmissionTestRequirementId = false;

		vehicleRecordModelImpl._originalControlRequirementId = vehicleRecordModelImpl._controlRequirementId;

		vehicleRecordModelImpl._setOriginalControlRequirementId = false;

		vehicleRecordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VehicleRecord> toCacheModel() {
		VehicleRecordCacheModel vehicleRecordCacheModel = new VehicleRecordCacheModel();

		vehicleRecordCacheModel.id = getId();

		vehicleRecordCacheModel.vehicleGroupId = getVehicleGroupId();

		vehicleRecordCacheModel.debitNoteId = getDebitNoteId();

		vehicleRecordCacheModel.sequenceNo = getSequenceNo();

		vehicleRecordCacheModel.codeNumber = getCodeNumber();

		vehicleRecordCacheModel.chassisNumber = getChassisNumber();

		String chassisNumber = vehicleRecordCacheModel.chassisNumber;

		if ((chassisNumber != null) && (chassisNumber.length() == 0)) {
			vehicleRecordCacheModel.chassisNumber = null;
		}

		vehicleRecordCacheModel.engineNumber = getEngineNumber();

		String engineNumber = vehicleRecordCacheModel.engineNumber;

		if ((engineNumber != null) && (engineNumber.length() == 0)) {
			vehicleRecordCacheModel.engineNumber = null;
		}

		vehicleRecordCacheModel.productionYear = getProductionYear();

		String productionYear = vehicleRecordCacheModel.productionYear;

		if ((productionYear != null) && (productionYear.length() == 0)) {
			vehicleRecordCacheModel.productionYear = null;
		}

		vehicleRecordCacheModel.vehicleEngineStatus = getVehicleEngineStatus();

		String vehicleEngineStatus = vehicleRecordCacheModel.vehicleEngineStatus;

		if ((vehicleEngineStatus != null) &&
				(vehicleEngineStatus.length() == 0)) {
			vehicleRecordCacheModel.vehicleEngineStatus = null;
		}

		vehicleRecordCacheModel.vehicleColor = getVehicleColor();

		String vehicleColor = vehicleRecordCacheModel.vehicleColor;

		if ((vehicleColor != null) && (vehicleColor.length() == 0)) {
			vehicleRecordCacheModel.vehicleColor = null;
		}

		vehicleRecordCacheModel.unitPrice = getUnitPrice();

		vehicleRecordCacheModel.currency = getCurrency();

		String currency = vehicleRecordCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			vehicleRecordCacheModel.currency = null;
		}

		vehicleRecordCacheModel.remarks = getRemarks();

		String remarks = vehicleRecordCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			vehicleRecordCacheModel.remarks = null;
		}

		vehicleRecordCacheModel.confirmedInspectionId = getConfirmedInspectionId();

		vehicleRecordCacheModel.inspectionRecordId = getInspectionRecordId();

		vehicleRecordCacheModel.draftCertificateId = getDraftCertificateId();

		vehicleRecordCacheModel.certificateRecordId = getCertificateRecordId();

		vehicleRecordCacheModel.markUpStatus = getMarkUpStatus();

		vehicleRecordCacheModel.safeTestRequirementId = getSafeTestRequirementId();

		vehicleRecordCacheModel.emissionTestRequirementId = getEmissionTestRequirementId();

		vehicleRecordCacheModel.controlRequirementId = getControlRequirementId();

		vehicleRecordCacheModel.markAsSample = getMarkAsSample();

		Date SynchDate = getSynchDate();

		if (SynchDate != null) {
			vehicleRecordCacheModel.SynchDate = SynchDate.getTime();
		}
		else {
			vehicleRecordCacheModel.SynchDate = Long.MIN_VALUE;
		}

		return vehicleRecordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vehicleGroupId=");
		sb.append(getVehicleGroupId());
		sb.append(", debitNoteId=");
		sb.append(getDebitNoteId());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", codeNumber=");
		sb.append(getCodeNumber());
		sb.append(", chassisNumber=");
		sb.append(getChassisNumber());
		sb.append(", engineNumber=");
		sb.append(getEngineNumber());
		sb.append(", productionYear=");
		sb.append(getProductionYear());
		sb.append(", vehicleEngineStatus=");
		sb.append(getVehicleEngineStatus());
		sb.append(", vehicleColor=");
		sb.append(getVehicleColor());
		sb.append(", unitPrice=");
		sb.append(getUnitPrice());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", confirmedInspectionId=");
		sb.append(getConfirmedInspectionId());
		sb.append(", inspectionRecordId=");
		sb.append(getInspectionRecordId());
		sb.append(", draftCertificateId=");
		sb.append(getDraftCertificateId());
		sb.append(", certificateRecordId=");
		sb.append(getCertificateRecordId());
		sb.append(", markUpStatus=");
		sb.append(getMarkUpStatus());
		sb.append(", safeTestRequirementId=");
		sb.append(getSafeTestRequirementId());
		sb.append(", emissionTestRequirementId=");
		sb.append(getEmissionTestRequirementId());
		sb.append(", controlRequirementId=");
		sb.append(getControlRequirementId());
		sb.append(", markAsSample=");
		sb.append(getMarkAsSample());
		sb.append(", SynchDate=");
		sb.append(getSynchDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.gt.dk.dao.nghiepvu.model.VehicleRecord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleGroupId</column-name><column-value><![CDATA[");
		sb.append(getVehicleGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debitNoteId</column-name><column-value><![CDATA[");
		sb.append(getDebitNoteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeNumber</column-name><column-value><![CDATA[");
		sb.append(getCodeNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chassisNumber</column-name><column-value><![CDATA[");
		sb.append(getChassisNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>engineNumber</column-name><column-value><![CDATA[");
		sb.append(getEngineNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productionYear</column-name><column-value><![CDATA[");
		sb.append(getProductionYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleEngineStatus</column-name><column-value><![CDATA[");
		sb.append(getVehicleEngineStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vehicleColor</column-name><column-value><![CDATA[");
		sb.append(getVehicleColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitPrice</column-name><column-value><![CDATA[");
		sb.append(getUnitPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmedInspectionId</column-name><column-value><![CDATA[");
		sb.append(getConfirmedInspectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inspectionRecordId</column-name><column-value><![CDATA[");
		sb.append(getInspectionRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>draftCertificateId</column-name><column-value><![CDATA[");
		sb.append(getDraftCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateRecordId</column-name><column-value><![CDATA[");
		sb.append(getCertificateRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markUpStatus</column-name><column-value><![CDATA[");
		sb.append(getMarkUpStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>safeTestRequirementId</column-name><column-value><![CDATA[");
		sb.append(getSafeTestRequirementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emissionTestRequirementId</column-name><column-value><![CDATA[");
		sb.append(getEmissionTestRequirementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>controlRequirementId</column-name><column-value><![CDATA[");
		sb.append(getControlRequirementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markAsSample</column-name><column-value><![CDATA[");
		sb.append(getMarkAsSample());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SynchDate</column-name><column-value><![CDATA[");
		sb.append(getSynchDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = VehicleRecord.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			VehicleRecord.class
		};
	private long _id;
	private long _vehicleGroupId;
	private long _originalVehicleGroupId;
	private boolean _setOriginalVehicleGroupId;
	private long _debitNoteId;
	private long _originalDebitNoteId;
	private boolean _setOriginalDebitNoteId;
	private long _sequenceNo;
	private long _codeNumber;
	private long _originalCodeNumber;
	private boolean _setOriginalCodeNumber;
	private String _chassisNumber;
	private String _engineNumber;
	private String _productionYear;
	private String _vehicleEngineStatus;
	private String _vehicleColor;
	private double _unitPrice;
	private String _currency;
	private String _remarks;
	private long _confirmedInspectionId;
	private long _originalConfirmedInspectionId;
	private boolean _setOriginalConfirmedInspectionId;
	private long _inspectionRecordId;
	private long _originalInspectionRecordId;
	private boolean _setOriginalInspectionRecordId;
	private long _draftCertificateId;
	private long _originalDraftCertificateId;
	private boolean _setOriginalDraftCertificateId;
	private long _certificateRecordId;
	private long _originalCertificateRecordId;
	private boolean _setOriginalCertificateRecordId;
	private long _markUpStatus;
	private long _safeTestRequirementId;
	private long _originalSafeTestRequirementId;
	private boolean _setOriginalSafeTestRequirementId;
	private long _emissionTestRequirementId;
	private long _originalEmissionTestRequirementId;
	private boolean _setOriginalEmissionTestRequirementId;
	private long _controlRequirementId;
	private long _originalControlRequirementId;
	private boolean _setOriginalControlRequirementId;
	private int _markAsSample;
	private Date _SynchDate;
	private long _columnBitmask;
	private VehicleRecord _escapedModel;
}